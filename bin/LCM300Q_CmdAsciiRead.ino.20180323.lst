
/tmp/arduino_build_545621/LCM300Q_CmdAsciiRead.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
       0:	00 80 00 20 bd 01 00 00 01 20 00 00 c5 1f 00 00     ... ..... ......
      10:	c5 1f 00 00 c5 1f 00 00 c5 1f 00 00 c5 1f 00 00     ................
      20:	c5 1f 00 00 c5 1f 00 00 c5 1f 00 00 01 20 00 00     ............. ..
      30:	01 20 00 00 c5 1f 00 00 19 3b 00 00 09 3c 00 00     . .......;...<..
      40:	01 20 00 00 01 20 00 00 01 20 00 00 01 20 00 00     . ... ... ... ..
      50:	01 20 00 00 01 20 00 00 01 20 00 00 01 20 00 00     . ... ... ... ..
      60:	01 20 00 00 01 20 00 00 01 20 00 00 01 20 00 00     . ... ... ... ..
      70:	01 20 00 00 01 20 00 00 01 20 00 00 01 20 00 00     . ... ... ... ..
      80:	01 20 00 00 01 20 00 00 01 20 00 00 01 20 00 00     . ... ... ... ..
      90:	01 20 00 00 01 20 00 00 01 20 00 00 01 20 00 00     . ... ... ... ..
      a0:	a1 1e 00 00 b1 1e 00 00 01 20 00 00 01 20 00 00     ......... ... ..
      b0:	01 20 00 00 01 20 00 00 01 20 00 00 01 20 00 00     . ... ... ... ..
      c0:	01 20 00 00 01 20 00 00 01 20 00 00 01 20 00 00     . ... ... ... ..
      d0:	01 20 00 00 01 20 00 00 01 20 00 00 01 20 00 00     . ... ... ... ..
      e0:	01 20 00 00 01 20 00 00 01 20 00 00 01 20 00 00     . ... ... ... ..
      f0:	01 20 00 00 dd 36 00 00 01 20 00 00 21 38 00 00     . ...6... ..!8..
     100:	01 20 00 00 65 39 00 00 01 20 00 00 01 20 00 00     . ..e9... ... ..
     110:	01 20 00 00 01 20 00 00 01 20 00 00 01 20 00 00     . ... ... ... ..
     120:	01 20 00 00 01 20 00 00 01 20 00 00 01 20 00 00     . ... ... ... ..
     130:	01 20 00 00 01 20 00 00 01 20 00 00 01 20 00 00     . ... ... ... ..
     140:	01 20 00 00 01 20 00 00 01 20 00 00 01 20 00 00     . ... ... ... ..
     150:	01 20 00 00 01 20 00 00 01 20 00 00 01 20 00 00     . ... ... ... ..
     160:	01 20 00 00 21 26 00 00 01 20 00 00 01 20 00 00     . ..!&... ... ..
     170:	01 20 00 00 01 20 00 00 01 20 00 00 01 20 00 00     . ... ... ... ..
     180:	01 20 00 00 01 20 00 00 01 20 00 00 01 20 00 00     . ... ... ... ..
     190:	01 20 00 00 01 20 00 00 01 20 00 00 01 20 00 00     . ... ... ... ..
     1a0:	01 20 00 00 01 20 00 00 01 20 00 00 01 20 00 00     . ... ... ... ..
     1b0:	01 20 00 00 01 20 00 00 01 20 00 00                 . ... ... ..

000001bc <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1bc:	4b56      	ldr	r3, [pc, #344]	; (318 <ResetHandler+0x15c>)
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1c2:	b510      	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
     1ca:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1cc:	bf00      	nop
	__asm__ volatile ("nop");
     1ce:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1d0:	f001 ff1a 	bl	2008 <startup_early_hook>
	// enable clocks to always-used peripherals
#if defined(__MK20DX128__)
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
     1d4:	4b51      	ldr	r3, [pc, #324]	; (31c <ResetHandler+0x160>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
     1da:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1dc:	4a50      	ldr	r2, [pc, #320]	; (320 <ResetHandler+0x164>)
     1de:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1e0:	4a50      	ldr	r2, [pc, #320]	; (324 <ResetHandler+0x168>)
     1e2:	60da      	str	r2, [r3, #12]
	UART0_C2 = UART_C2_TE;
	PORTB_PCR17 = PORT_PCR_MUX(3);
#endif
#ifdef KINETISK
	// if the RTC oscillator isn't enabled, get it started early
	if (!(RTC_CR & RTC_CR_OSCE)) {
     1e4:	4a50      	ldr	r2, [pc, #320]	; (328 <ResetHandler+0x16c>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     1ec:	d104      	bne.n	1f8 <ResetHandler+0x3c>
		RTC_SR = 0;
     1ee:	494f      	ldr	r1, [pc, #316]	; (32c <ResetHandler+0x170>)
     1f0:	600b      	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     1f2:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     1f6:	6013      	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     1f8:	4b4d      	ldr	r3, [pc, #308]	; (330 <ResetHandler+0x174>)
     1fa:	781a      	ldrb	r2, [r3, #0]
     1fc:	0711      	lsls	r1, r2, #28
     1fe:	d503      	bpl.n	208 <ResetHandler+0x4c>
     200:	781a      	ldrb	r2, [r3, #0]
     202:	f042 0208 	orr.w	r2, r2, #8
     206:	701a      	strb	r2, [r3, #0]
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     208:	4b4a      	ldr	r3, [pc, #296]	; (334 <ResetHandler+0x178>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     20a:	494b      	ldr	r1, [pc, #300]	; (338 <ResetHandler+0x17c>)
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     20c:	222a      	movs	r2, #42	; 0x2a
     20e:	701a      	strb	r2, [r3, #0]
     210:	4a4a      	ldr	r2, [pc, #296]	; (33c <ResetHandler+0x180>)
     212:	4b4b      	ldr	r3, [pc, #300]	; (340 <ResetHandler+0x184>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     214:	428b      	cmp	r3, r1
     216:	d204      	bcs.n	222 <ResetHandler+0x66>
     218:	f852 0f04 	ldr.w	r0, [r2, #4]!
     21c:	f843 0b04 	str.w	r0, [r3], #4
     220:	e7f8      	b.n	214 <ResetHandler+0x58>
     222:	4b48      	ldr	r3, [pc, #288]	; (344 <ResetHandler+0x188>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     224:	4948      	ldr	r1, [pc, #288]	; (348 <ResetHandler+0x18c>)
     226:	2200      	movs	r2, #0
     228:	428b      	cmp	r3, r1
     22a:	d202      	bcs.n	232 <ResetHandler+0x76>
     22c:	f843 2b04 	str.w	r2, [r3], #4
     230:	e7fa      	b.n	228 <ResetHandler+0x6c>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     232:	4946      	ldr	r1, [pc, #280]	; (34c <ResetHandler+0x190>)
     234:	4a46      	ldr	r2, [pc, #280]	; (350 <ResetHandler+0x194>)
     236:	2300      	movs	r3, #0
     238:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     23c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     240:	3301      	adds	r3, #1
     242:	2b6f      	cmp	r3, #111	; 0x6f
     244:	d1f8      	bne.n	238 <ResetHandler+0x7c>
     246:	4b43      	ldr	r3, [pc, #268]	; (354 <ResetHandler+0x198>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     248:	4a43      	ldr	r2, [pc, #268]	; (358 <ResetHandler+0x19c>)
     24a:	2180      	movs	r1, #128	; 0x80
     24c:	f803 1b01 	strb.w	r1, [r3], #1
     250:	4293      	cmp	r3, r2
     252:	d1fb      	bne.n	24c <ResetHandler+0x90>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     254:	4b41      	ldr	r3, [pc, #260]	; (35c <ResetHandler+0x1a0>)
     256:	4a3d      	ldr	r2, [pc, #244]	; (34c <ResetHandler+0x190>)
     258:	601a      	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     25a:	4b41      	ldr	r3, [pc, #260]	; (360 <ResetHandler+0x1a4>)
     25c:	228a      	movs	r2, #138	; 0x8a
     25e:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     260:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     264:	2224      	movs	r2, #36	; 0x24
     266:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     268:	22a0      	movs	r2, #160	; 0xa0
     26a:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     26c:	799a      	ldrb	r2, [r3, #6]
     26e:	0792      	lsls	r2, r2, #30
     270:	d5fc      	bpl.n	26c <ResetHandler+0xb0>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     272:	799a      	ldrb	r2, [r3, #6]
     274:	06d4      	lsls	r4, r2, #27
     276:	d4fc      	bmi.n	272 <ResetHandler+0xb6>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     278:	4a3a      	ldr	r2, [pc, #232]	; (364 <ResetHandler+0x1a8>)
     27a:	7993      	ldrb	r3, [r2, #6]
     27c:	f003 030c 	and.w	r3, r3, #12
     280:	2b08      	cmp	r3, #8
     282:	4b38      	ldr	r3, [pc, #224]	; (364 <ResetHandler+0x1a8>)
     284:	d1f9      	bne.n	27a <ResetHandler+0xbe>
    #endif
   #else
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
    #else
	MCG_C5 = MCG_C5_PRDIV0(3);		 // config PLL input for 16 MHz Crystal / 4 = 4 MHz
     286:	2203      	movs	r2, #3
     288:	711a      	strb	r2, [r3, #4]
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
    #elif F_CPU == 72000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(3); // config PLL for 72 MHz output
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(0); // config PLL for 96 MHz output
     28a:	2240      	movs	r2, #64	; 0x40
     28c:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     28e:	799a      	ldrb	r2, [r3, #6]
     290:	0690      	lsls	r0, r2, #26
     292:	d5fc      	bpl.n	28e <ResetHandler+0xd2>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     294:	4a33      	ldr	r2, [pc, #204]	; (364 <ResetHandler+0x1a8>)
     296:	7991      	ldrb	r1, [r2, #6]
     298:	4b32      	ldr	r3, [pc, #200]	; (364 <ResetHandler+0x1a8>)
     29a:	0649      	lsls	r1, r1, #25
     29c:	d5fb      	bpl.n	296 <ResetHandler+0xda>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(2) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 48000000
	// config divisors: 48 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
  #if defined(KINETISK)
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(1) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV3(1) |  SIM_CLKDIV1_OUTDIV4(3);
     29e:	4a32      	ldr	r2, [pc, #200]	; (368 <ResetHandler+0x1ac>)
     2a0:	4932      	ldr	r1, [pc, #200]	; (36c <ResetHandler+0x1b0>)
     2a2:	6011      	str	r1, [r2, #0]
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2a4:	2102      	movs	r1, #2
     2a6:	6051      	str	r1, [r2, #4]
#error "Error, F_CPU must be 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2a8:	2220      	movs	r2, #32
     2aa:	701a      	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ac:	799a      	ldrb	r2, [r3, #6]
     2ae:	f002 020c 	and.w	r2, r2, #12
     2b2:	2a0c      	cmp	r2, #12
     2b4:	d1fa      	bne.n	2ac <ResetHandler+0xf0>
	// USB uses PLL clock, trace is CPU clock, CLKOUT=OSCERCLK0
	#if defined(KINETISK)
	#if F_CPU == 216000000 || F_CPU == 180000000
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2b6:	4b2e      	ldr	r3, [pc, #184]	; (370 <ResetHandler+0x1b4>)
     2b8:	4a2e      	ldr	r2, [pc, #184]	; (374 <ResetHandler+0x1b8>)
     2ba:	601a      	str	r2, [r3, #0]
    // since we are not going into "stop mode" i removed it
	SMC_PMCTRL = SMC_PMCTRL_RUNM(2); // VLPR mode :-)
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2bc:	4b2e      	ldr	r3, [pc, #184]	; (378 <ResetHandler+0x1bc>)
     2be:	f64b 327f 	movw	r2, #47999	; 0xbb7f
     2c2:	601a      	str	r2, [r3, #0]
	SYST_CVR = 0;
     2c4:	2200      	movs	r2, #0
     2c6:	605a      	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2c8:	2207      	movs	r2, #7
     2ca:	f843 2c04 	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2ce:	4a2b      	ldr	r2, [pc, #172]	; (37c <ResetHandler+0x1c0>)
     2d0:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2d4:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     2d6:	f002 f861 	bl	239c <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2da:	4b14      	ldr	r3, [pc, #80]	; (32c <ResetHandler+0x170>)
     2dc:	681b      	ldr	r3, [r3, #0]
     2de:	07da      	lsls	r2, r3, #31
     2e0:	d505      	bpl.n	2ee <ResetHandler+0x132>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2e2:	4827      	ldr	r0, [pc, #156]	; (380 <ResetHandler+0x1c4>)
     2e4:	f001 ff1e 	bl	2124 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     2e8:	4b26      	ldr	r3, [pc, #152]	; (384 <ResetHandler+0x1c8>)
     2ea:	4a27      	ldr	r2, [pc, #156]	; (388 <ResetHandler+0x1cc>)
     2ec:	601a      	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     2ee:	4b27      	ldr	r3, [pc, #156]	; (38c <ResetHandler+0x1d0>)
     2f0:	781b      	ldrb	r3, [r3, #0]
     2f2:	065b      	lsls	r3, r3, #25
     2f4:	d509      	bpl.n	30a <ResetHandler+0x14e>
     2f6:	4c23      	ldr	r4, [pc, #140]	; (384 <ResetHandler+0x1c8>)
     2f8:	4b23      	ldr	r3, [pc, #140]	; (388 <ResetHandler+0x1cc>)
     2fa:	6822      	ldr	r2, [r4, #0]
     2fc:	429a      	cmp	r2, r3
     2fe:	d104      	bne.n	30a <ResetHandler+0x14e>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     300:	481f      	ldr	r0, [pc, #124]	; (380 <ResetHandler+0x1c4>)
     302:	f001 ff0f 	bl	2124 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     306:	2300      	movs	r3, #0
     308:	6023      	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     30a:	f004 f907 	bl	451c <__libc_init_array>

	startup_late_hook();
     30e:	f001 fe81 	bl	2014 <startup_late_hook>
	main();
     312:	f002 ffff 	bl	3314 <main>
     316:	e7fe      	b.n	316 <ResetHandler+0x15a>
     318:	4005200e 	.word	0x4005200e
     31c:	40048030 	.word	0x40048030
     320:	00043f82 	.word	0x00043f82
     324:	2b000001 	.word	0x2b000001
     328:	4003d010 	.word	0x4003d010
     32c:	4003d014 	.word	0x4003d014
     330:	4007d002 	.word	0x4007d002
     334:	4007e000 	.word	0x4007e000
     338:	1fff9828 	.word	0x1fff9828
     33c:	00009000 	.word	0x00009000
     340:	1fff8720 	.word	0x1fff8720
     344:	1fff9828 	.word	0x1fff9828
     348:	1fff9bf0 	.word	0x1fff9bf0
     34c:	1fff8200 	.word	0x1fff8200
     350:	00000000 	.word	0x00000000
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	e000ed08 	.word	0xe000ed08
     360:	40065000 	.word	0x40065000
     364:	40064000 	.word	0x40064000
     368:	40048044 	.word	0x40048044
     36c:	11130000 	.word	0x11130000
     370:	40048004 	.word	0x40048004
     374:	000510c0 	.word	0x000510c0
     378:	e000e014 	.word	0xe000e014
     37c:	20200000 	.word	0x20200000
     380:	5ab539c7 	.word	0x5ab539c7
     384:	4003e01c 	.word	0x4003e01c
     388:	5a94c3a5 	.word	0x5a94c3a5
     38c:	4007f000 	.word	0x4007f000
     390:	ffffffff 	.word	0xffffffff
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff9828 	.word	0x1fff9828
     42c:	00000000 	.word	0x00000000
     430:	00008ffc 	.word	0x00008ffc

00000434 <frame_dummy>:
     434:	4b08      	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	b510      	push	{r4, lr}
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4908      	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	4808      	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	f3af 8000 	nop.w
     442:	4808      	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b903      	cbnz	r3, 44a <frame_dummy+0x16>
     448:	bd10      	pop	{r4, pc}
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	2b00      	cmp	r3, #0
     44e:	d0fb      	beq.n	448 <frame_dummy+0x14>
     450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     454:	4718      	bx	r3
     456:	bf00      	nop
     458:	00000000 	.word	0x00000000
     45c:	1fff982c 	.word	0x1fff982c
     460:	00008ffc 	.word	0x00008ffc
     464:	1fff9828 	.word	0x1fff9828
     468:	00000000 	.word	0x00000000

0000046c <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
     46c:	2000      	movs	r0, #0
     46e:	4770      	bx	lr

00000470 <Systronix_LCM300::~Systronix_LCM300()>:
#define MFR_IOUT_MAX_CMD	0xA6	// linear returns 0xD3A0 = 14.5 amps




class Systronix_LCM300
     470:	b510      	push	{r4, lr}
     472:	4604      	mov	r4, r0
     474:	3008      	adds	r0, #8
     476:	f000 fb89 	bl	b8c <i2c_t3::~i2c_t3()>
     47a:	4620      	mov	r0, r4
     47c:	bd10      	pop	{r4, pc}
     47e:	bf00      	nop

00000480 <setup>:

size_t read_cnt;

/* ========== SETUP ========== */
void setup(void) 
{
     480:	b570      	push	{r4, r5, r6, lr}
     482:	b088      	sub	sp, #32
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration &&
		(usb_cdc_line_rtsdtr & (USB_SERIAL_DTR | USB_SERIAL_RTS)) &&
     484:	494c      	ldr	r1, [pc, #304]	; (5b8 <setup+0x138>)
     486:	4c4d      	ldr	r4, [pc, #308]	; (5bc <setup+0x13c>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 25);
     488:	4a4d      	ldr	r2, [pc, #308]	; (5c0 <setup+0x140>)
     48a:	4e4e      	ldr	r6, [pc, #312]	; (5c4 <setup+0x144>)

  
  Serial.begin(115200);     // use max baud rate
  // Teensy3 doesn't reset with Serial Monitor as do Teensy2/++2, or wait for Serial Monitor window
  // Wait here for 10 seconds to see if we will use Serial Monitor, so output is not lost
  while((!Serial) && (millis()<10000));    // wait until serial monitor is open or timeout, which seems to fall through
     48c:	f242 700f 	movw	r0, #9999	; 0x270f
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration &&
		(usb_cdc_line_rtsdtr & (USB_SERIAL_DTR | USB_SERIAL_RTS)) &&
     490:	780b      	ldrb	r3, [r1, #0]
     492:	f013 0fff 	tst.w	r3, #255	; 0xff
     496:	f000 8086 	beq.w	5a6 <setup+0x126>
     49a:	7823      	ldrb	r3, [r4, #0]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration &&
     49c:	f013 0f03 	tst.w	r3, #3
     4a0:	f000 8081 	beq.w	5a6 <setup+0x126>
		(usb_cdc_line_rtsdtr & (USB_SERIAL_DTR | USB_SERIAL_RTS)) &&
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 25);
     4a4:	6813      	ldr	r3, [r2, #0]
     4a6:	6835      	ldr	r5, [r6, #0]
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration &&
		(usb_cdc_line_rtsdtr & (USB_SERIAL_DTR | USB_SERIAL_RTS)) &&
     4a8:	1b5b      	subs	r3, r3, r5
     4aa:	2b18      	cmp	r3, #24
     4ac:	d97b      	bls.n	5a6 <setup+0x126>
#define BYTE 0
#endif

class __FlashStringHelper;

class Print
     4ae:	4b46      	ldr	r3, [pc, #280]	; (5c8 <setup+0x148>)
     4b0:	791a      	ldrb	r2, [r3, #4]
     4b2:	f88d 2010 	strb.w	r2, [sp, #16]
#define Stream_h

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
     4b6:	689a      	ldr	r2, [r3, #8]
     4b8:	9205      	str	r2, [sp, #20]
     4ba:	7b1a      	ldrb	r2, [r3, #12]
     4bc:	f88d 2018 	strb.w	r2, [sp, #24]
#if I2C_BUS_NUM >= 4
    extern "C" void i2c3_isr(void);
#endif
extern "C" void i2c_isr_handler(struct i2cStruct* i2c, uint8_t bus);

class i2c_t3 : public Stream
     4c0:	4a42      	ldr	r2, [pc, #264]	; (5cc <setup+0x14c>)
     4c2:	9203      	str	r2, [sp, #12]
     4c4:	7b5a      	ldrb	r2, [r3, #13]
     4c6:	f88d 2019 	strb.w	r2, [sp, #25]
     4ca:	691b      	ldr	r3, [r3, #16]
     4cc:	9307      	str	r3, [sp, #28]

  // start LCM300 library
  lcm300_58.setup (LCM300_BASE_MIN, Wire1, (char*)"Wire1");
     4ce:	4d40      	ldr	r5, [pc, #256]	; (5d0 <setup+0x150>)
     4d0:	4b40      	ldr	r3, [pc, #256]	; (5d4 <setup+0x154>)
     4d2:	aa03      	add	r2, sp, #12
     4d4:	2158      	movs	r1, #88	; 0x58
     4d6:	4628      	mov	r0, r5
     4d8:	f000 fa02 	bl	8e0 <Systronix_LCM300::setup(unsigned char, i2c_t3, char*)>
     4dc:	a803      	add	r0, sp, #12
     4de:	f000 fb55 	bl	b8c <i2c_t3::~i2c_t3()>

	Serial.printf ("LCM300Q Library Test Code at 0x%.2X", lcm300_58.base_get());
     4e2:	4628      	mov	r0, r5
     4e4:	f000 f982 	bl	7ec <Systronix_LCM300::base_get()>
     4e8:	4c3b      	ldr	r4, [pc, #236]	; (5d8 <setup+0x158>)
     4ea:	4602      	mov	r2, r0
     4ec:	493b      	ldr	r1, [pc, #236]	; (5dc <setup+0x15c>)
     4ee:	4620      	mov	r0, r4
     4f0:	f002 febc 	bl	326c <Print::printf(char const*, ...)>
//  Serial.println(lcm300_58.BaseAddr, HEX);

  lcm300_58.begin(I2C_PINS_29_30);
     4f4:	2102      	movs	r1, #2
     4f6:	4628      	mov	r0, r5
     4f8:	f000 f95c 	bl	7b4 <Systronix_LCM300::begin(i2c_pins)>
  lcm300_58.init();
     4fc:	4628      	mov	r0, r5
     4fe:	f000 f977 	bl	7f0 <Systronix_LCM300::init()>

  Serial.printf("Build %s - %s\r\n%s\r\n", __DATE__, __TIME__, __FILE__);
     502:	4b37      	ldr	r3, [pc, #220]	; (5e0 <setup+0x160>)
     504:	9300      	str	r3, [sp, #0]
     506:	4b37      	ldr	r3, [pc, #220]	; (5e4 <setup+0x164>)
     508:	4a37      	ldr	r2, [pc, #220]	; (5e8 <setup+0x168>)
     50a:	4938      	ldr	r1, [pc, #224]	; (5ec <setup+0x16c>)
     50c:	4620      	mov	r0, r4
     50e:	f002 fead 	bl	326c <Print::printf(char const*, ...)>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     512:	6823      	ldr	r3, [r4, #0]
     514:	685b      	ldr	r3, [r3, #4]
     516:	2210      	movs	r2, #16
     518:	4935      	ldr	r1, [pc, #212]	; (5f0 <setup+0x170>)
     51a:	4620      	mov	r0, r4
     51c:	4798      	blx	r3
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     51e:	4620      	mov	r0, r4
     520:	f002 fe8c 	bl	323c <Print::println()>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     524:	6823      	ldr	r3, [r4, #0]
     526:	685b      	ldr	r3, [r3, #4]
     528:	2207      	movs	r2, #7
     52a:	4932      	ldr	r1, [pc, #200]	; (5f4 <setup+0x174>)
     52c:	4620      	mov	r0, r4
     52e:	4798      	blx	r3
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     530:	4931      	ldr	r1, [pc, #196]	; (5f8 <setup+0x178>)
     532:	4620      	mov	r0, r4
     534:	f002 fee4 	bl	3300 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     538:	4620      	mov	r0, r4
     53a:	f002 fe7f 	bl	323c <Print::println()>
  Serial.println( "CPU is T_3.6");
#endif
  Serial.print( "F_CPU =");   Serial.println( F_CPU );
  
#if defined I2C_T3_H 
  Serial.printf("Using i2c_t3 I2C library for Teensy\r\n");
     53e:	492f      	ldr	r1, [pc, #188]	; (5fc <setup+0x17c>)
     540:	4620      	mov	r0, r4
     542:	f002 fe93 	bl	326c <Print::printf(char const*, ...)>


   
//  int8_t flag = -1;  // I2C returns 0 if no error
  
  dtime = 2000;      // msec between samples, 1000 = 1 sec, 60,000 = 1 minute
     546:	4d2e      	ldr	r5, [pc, #184]	; (600 <setup+0x180>)
     548:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
     54c:	802b      	strh	r3, [r5, #0]
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     54e:	6823      	ldr	r3, [r4, #0]
     550:	685b      	ldr	r3, [r3, #4]
     552:	220d      	movs	r2, #13
     554:	492b      	ldr	r1, [pc, #172]	; (604 <setup+0x184>)
     556:	4620      	mov	r0, r4
     558:	4798      	blx	r3
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     55a:	882b      	ldrh	r3, [r5, #0]
     55c:	492a      	ldr	r1, [pc, #168]	; (608 <setup+0x188>)
     55e:	fba1 3103 	umull	r3, r1, r1, r3
     562:	0989      	lsrs	r1, r1, #6
     564:	4620      	mov	r0, r4
     566:	f002 fecb 	bl	3300 <Print::print(long)>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     56a:	6823      	ldr	r3, [r4, #0]
     56c:	685b      	ldr	r3, [r3, #4]
     56e:	2206      	movs	r2, #6
     570:	4926      	ldr	r1, [pc, #152]	; (60c <setup+0x18c>)
     572:	4620      	mov	r0, r4
     574:	4798      	blx	r3
     576:	6823      	ldr	r3, [r4, #0]
     578:	685b      	ldr	r3, [r3, #4]
     57a:	220f      	movs	r2, #15
     57c:	4924      	ldr	r1, [pc, #144]	; (610 <setup+0x190>)
     57e:	4620      	mov	r0, r4
     580:	4798      	blx	r3
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     582:	4620      	mov	r0, r4
     584:	f002 fe5a 	bl	323c <Print::println()>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     588:	6823      	ldr	r3, [r4, #0]
     58a:	685b      	ldr	r3, [r3, #4]
     58c:	2201      	movs	r2, #1
     58e:	4921      	ldr	r1, [pc, #132]	; (614 <setup+0x194>)
     590:	4620      	mov	r0, r4
     592:	4798      	blx	r3
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     594:	4620      	mov	r0, r4
     596:	f002 fe51 	bl	323c <Print::println()>
  Serial.print(" sec, ");
 
  Serial.println("Setup Complete!");
  Serial.println(" "); 
  
  Serial.printf("sizeof ascii array is %i\r\n", sizeof(ascii));
     59a:	2220      	movs	r2, #32
     59c:	491e      	ldr	r1, [pc, #120]	; (618 <setup+0x198>)
     59e:	4620      	mov	r0, r4
     5a0:	f002 fe64 	bl	326c <Print::printf(char const*, ...)>


}
     5a4:	e006      	b.n	5b4 <setup+0x134>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     5a6:	6813      	ldr	r3, [r2, #0]
     5a8:	9302      	str	r3, [sp, #8]
	return ret;
     5aa:	9b02      	ldr	r3, [sp, #8]

  
  Serial.begin(115200);     // use max baud rate
  // Teensy3 doesn't reset with Serial Monitor as do Teensy2/++2, or wait for Serial Monitor window
  // Wait here for 10 seconds to see if we will use Serial Monitor, so output is not lost
  while((!Serial) && (millis()<10000));    // wait until serial monitor is open or timeout, which seems to fall through
     5ac:	4283      	cmp	r3, r0
     5ae:	f67f af6f 	bls.w	490 <setup+0x10>
     5b2:	e77c      	b.n	4ae <setup+0x2e>
  Serial.println(" "); 
  
  Serial.printf("sizeof ascii array is %i\r\n", sizeof(ascii));


}
     5b4:	b008      	add	sp, #32
     5b6:	bd70      	pop	{r4, r5, r6, pc}
     5b8:	1fff99e4 	.word	0x1fff99e4
     5bc:	1fff99f4 	.word	0x1fff99f4
     5c0:	1fff9900 	.word	0x1fff9900
     5c4:	1fff9be8 	.word	0x1fff9be8
     5c8:	1fff98d8 	.word	0x1fff98d8
     5cc:	00008a88 	.word	0x00008a88
     5d0:	1fff9848 	.word	0x1fff9848
     5d4:	000087d8 	.word	0x000087d8
     5d8:	1fff8dc8 	.word	0x1fff8dc8
     5dc:	000087e0 	.word	0x000087e0
     5e0:	00008830 	.word	0x00008830
     5e4:	00008804 	.word	0x00008804
     5e8:	00008810 	.word	0x00008810
     5ec:	0000881c 	.word	0x0000881c
     5f0:	000088a8 	.word	0x000088a8
     5f4:	000088bc 	.word	0x000088bc
     5f8:	02dc6c00 	.word	0x02dc6c00
     5fc:	000088c4 	.word	0x000088c4
     600:	1fff98b0 	.word	0x1fff98b0
     604:	000088ec 	.word	0x000088ec
     608:	10624dd3 	.word	0x10624dd3
     60c:	000088fc 	.word	0x000088fc
     610:	00008904 	.word	0x00008904
     614:	000089f8 	.word	0x000089f8
     618:	00008914 	.word	0x00008914

0000061c <loop>:

bool verbose = false; // don't print out detailed info about the PMBus command transaction

/* ========== LOOP ========== */
void loop(void) 
{
     61c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     620:	b084      	sub	sp, #16
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     622:	4b43      	ldr	r3, [pc, #268]	; (730 <loop+0x114>)
     624:	681b      	ldr	r3, [r3, #0]
     626:	9303      	str	r3, [sp, #12]
	return ret;
     628:	9b03      	ldr	r3, [sp, #12]
//  int16_t temp0;
//  int8_t stat=-1;  // status flag
//  float temp;
  

  Serial.printf("@%u\r\n", millis()/1000);
     62a:	4a42      	ldr	r2, [pc, #264]	; (734 <loop+0x118>)
     62c:	fba2 3203 	umull	r3, r2, r2, r3
     630:	4d41      	ldr	r5, [pc, #260]	; (738 <loop+0x11c>)
     632:	0992      	lsrs	r2, r2, #6
     634:	4941      	ldr	r1, [pc, #260]	; (73c <loop+0x120>)
     636:	4628      	mov	r0, r5
     638:	f002 fe18 	bl	326c <Print::printf(char const*, ...)>
  

  read_cnt = 16;
     63c:	f8df a128 	ldr.w	sl, [pc, #296]	; 768 <loop+0x14c>
     640:	2210      	movs	r2, #16
     642:	f8ca 2000 	str.w	r2, [sl]

  verbose = false;  // detailed debug data or not?
     646:	f8df 9124 	ldr.w	r9, [pc, #292]	; 76c <loop+0x150>
     64a:	2300      	movs	r3, #0
     64c:	f889 3000 	strb.w	r3, [r9]
  result = lcm300_58.command_ascii_read(MFR_ID_CMD, read_cnt, ascii, verbose);
     650:	4c3b      	ldr	r4, [pc, #236]	; (740 <loop+0x124>)
     652:	4f3c      	ldr	r7, [pc, #240]	; (744 <loop+0x128>)
     654:	9300      	str	r3, [sp, #0]
     656:	4623      	mov	r3, r4
     658:	2199      	movs	r1, #153	; 0x99
     65a:	4638      	mov	r0, r7
     65c:	f000 f95a 	bl	914 <Systronix_LCM300::command_ascii_read(int, unsigned int, char*, bool)>
     660:	4e39      	ldr	r6, [pc, #228]	; (748 <loop+0x12c>)
     662:	7030      	strb	r0, [r6, #0]
  Serial.printf("mfr ID: %s\r\n", ascii);
     664:	4622      	mov	r2, r4
     666:	4939      	ldr	r1, [pc, #228]	; (74c <loop+0x130>)
     668:	4628      	mov	r0, r5
     66a:	f002 fdff 	bl	326c <Print::printf(char const*, ...)>

  read_cnt = 10;
     66e:	f04f 080a 	mov.w	r8, #10
     672:	f8ca 8000 	str.w	r8, [sl]
  result = lcm300_58.command_ascii_read (MFR_MODEL_CMD, read_cnt, ascii, verbose);
     676:	f899 3000 	ldrb.w	r3, [r9]
     67a:	9300      	str	r3, [sp, #0]
     67c:	4623      	mov	r3, r4
     67e:	4642      	mov	r2, r8
     680:	219a      	movs	r1, #154	; 0x9a
     682:	4638      	mov	r0, r7
     684:	f000 f946 	bl	914 <Systronix_LCM300::command_ascii_read(int, unsigned int, char*, bool)>
     688:	7030      	strb	r0, [r6, #0]
  Serial.printf("model: %s\r\n", ascii);
     68a:	4622      	mov	r2, r4
     68c:	4930      	ldr	r1, [pc, #192]	; (750 <loop+0x134>)
     68e:	4628      	mov	r0, r5
     690:	f002 fdec 	bl	326c <Print::printf(char const*, ...)>

  read_cnt = 4;
     694:	2204      	movs	r2, #4
     696:	f8ca 2000 	str.w	r2, [sl]
  result = lcm300_58.command_ascii_read (MFR_REVISION_CMD, read_cnt, ascii, verbose);
     69a:	f899 3000 	ldrb.w	r3, [r9]
     69e:	9300      	str	r3, [sp, #0]
     6a0:	4623      	mov	r3, r4
     6a2:	219b      	movs	r1, #155	; 0x9b
     6a4:	4638      	mov	r0, r7
     6a6:	f000 f935 	bl	914 <Systronix_LCM300::command_ascii_read(int, unsigned int, char*, bool)>
     6aa:	7030      	strb	r0, [r6, #0]
  Serial.printf("revision: %s\r\n", ascii);
     6ac:	4622      	mov	r2, r4
     6ae:	4929      	ldr	r1, [pc, #164]	; (754 <loop+0x138>)
     6b0:	4628      	mov	r0, r5
     6b2:	f002 fddb 	bl	326c <Print::printf(char const*, ...)>
 
  read_cnt = 10;
     6b6:	f8ca 8000 	str.w	r8, [sl]
  result = lcm300_58.command_ascii_read (MFR_LOCATION_CMD, read_cnt, ascii, verbose);
     6ba:	f899 3000 	ldrb.w	r3, [r9]
     6be:	9300      	str	r3, [sp, #0]
     6c0:	4623      	mov	r3, r4
     6c2:	4642      	mov	r2, r8
     6c4:	219c      	movs	r1, #156	; 0x9c
     6c6:	4638      	mov	r0, r7
     6c8:	f000 f924 	bl	914 <Systronix_LCM300::command_ascii_read(int, unsigned int, char*, bool)>
     6cc:	7030      	strb	r0, [r6, #0]
  Serial.printf("location: %s\r\n", ascii); 
     6ce:	4622      	mov	r2, r4
     6d0:	4921      	ldr	r1, [pc, #132]	; (758 <loop+0x13c>)
     6d2:	4628      	mov	r0, r5
     6d4:	f002 fdca 	bl	326c <Print::printf(char const*, ...)>

  read_cnt = 8;
     6d8:	2208      	movs	r2, #8
     6da:	f8ca 2000 	str.w	r2, [sl]
  result = lcm300_58.command_ascii_read (MFR_DATE_CMD, read_cnt, ascii, verbose);
     6de:	f899 3000 	ldrb.w	r3, [r9]
     6e2:	9300      	str	r3, [sp, #0]
     6e4:	4623      	mov	r3, r4
     6e6:	219d      	movs	r1, #157	; 0x9d
     6e8:	4638      	mov	r0, r7
     6ea:	f000 f913 	bl	914 <Systronix_LCM300::command_ascii_read(int, unsigned int, char*, bool)>
     6ee:	7030      	strb	r0, [r6, #0]
  Serial.printf("Mfg Date: %s\r\n", ascii); 
     6f0:	4622      	mov	r2, r4
     6f2:	491a      	ldr	r1, [pc, #104]	; (75c <loop+0x140>)
     6f4:	4628      	mov	r0, r5
     6f6:	f002 fdb9 	bl	326c <Print::printf(char const*, ...)>

  read_cnt = 10;
     6fa:	f8ca 8000 	str.w	r8, [sl]
  result = lcm300_58.command_ascii_read (MFR_SERIAL_CMD, read_cnt, ascii, verbose);
     6fe:	f899 3000 	ldrb.w	r3, [r9]
     702:	9300      	str	r3, [sp, #0]
     704:	4623      	mov	r3, r4
     706:	4642      	mov	r2, r8
     708:	219e      	movs	r1, #158	; 0x9e
     70a:	4638      	mov	r0, r7
     70c:	f000 f902 	bl	914 <Systronix_LCM300::command_ascii_read(int, unsigned int, char*, bool)>
     710:	7030      	strb	r0, [r6, #0]
  Serial.printf("Mfg Serial: %s\r\n", ascii);   
     712:	4622      	mov	r2, r4
     714:	4912      	ldr	r1, [pc, #72]	; (760 <loop+0x144>)
     716:	4628      	mov	r0, r5
     718:	f002 fda8 	bl	326c <Print::printf(char const*, ...)>


  Serial.println();
     71c:	4628      	mov	r0, r5
     71e:	f002 fd8d 	bl	323c <Print::println()>
  
  
  delay(dtime);
     722:	4b10      	ldr	r3, [pc, #64]	; (764 <loop+0x148>)
     724:	8818      	ldrh	r0, [r3, #0]
     726:	f001 fe23 	bl	2370 <delay>
}
     72a:	b004      	add	sp, #16
     72c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     730:	1fff9900 	.word	0x1fff9900
     734:	10624dd3 	.word	0x10624dd3
     738:	1fff8dc8 	.word	0x1fff8dc8
     73c:	00008930 	.word	0x00008930
     740:	1fff98b4 	.word	0x1fff98b4
     744:	1fff9848 	.word	0x1fff9848
     748:	1fff98d5 	.word	0x1fff98d5
     74c:	00008938 	.word	0x00008938
     750:	00008948 	.word	0x00008948
     754:	00008954 	.word	0x00008954
     758:	00008964 	.word	0x00008964
     75c:	00008974 	.word	0x00008974
     760:	00008984 	.word	0x00008984
     764:	1fff98b0 	.word	0x1fff98b0
     768:	1fff9844 	.word	0x1fff9844
     76c:	1fff98d4 	.word	0x1fff98d4

00000770 <_GLOBAL__sub_I_DEBUG>:
     770:	b508      	push	{r3, lr}
     772:	480a      	ldr	r0, [pc, #40]	; (79c <_GLOBAL__sub_I_DEBUG+0x2c>)
     774:	4b0a      	ldr	r3, [pc, #40]	; (7a0 <_GLOBAL__sub_I_DEBUG+0x30>)
     776:	6043      	str	r3, [r0, #4]
#define BYTE 0
#endif

class __FlashStringHelper;

class Print
     778:	4b0a      	ldr	r3, [pc, #40]	; (7a4 <_GLOBAL__sub_I_DEBUG+0x34>)
     77a:	791a      	ldrb	r2, [r3, #4]
     77c:	7302      	strb	r2, [r0, #12]
     77e:	689a      	ldr	r2, [r3, #8]
     780:	6102      	str	r2, [r0, #16]
     782:	7b1a      	ldrb	r2, [r3, #12]
     784:	7502      	strb	r2, [r0, #20]
     786:	4a08      	ldr	r2, [pc, #32]	; (7a8 <_GLOBAL__sub_I_DEBUG+0x38>)
     788:	6082      	str	r2, [r0, #8]
     78a:	7b5a      	ldrb	r2, [r3, #13]
     78c:	7542      	strb	r2, [r0, #21]
     78e:	691b      	ldr	r3, [r3, #16]
     790:	6183      	str	r3, [r0, #24]
//};

//static data tmp48;      // LCM300Q at base address 0x48


Systronix_LCM300 lcm300_58;    // supply at default address
     792:	4a06      	ldr	r2, [pc, #24]	; (7ac <_GLOBAL__sub_I_DEBUG+0x3c>)
     794:	4906      	ldr	r1, [pc, #24]	; (7b0 <_GLOBAL__sub_I_DEBUG+0x40>)
     796:	f003 feaf 	bl	44f8 <__aeabi_atexit>
     79a:	bd08      	pop	{r3, pc}
     79c:	1fff9848 	.word	0x1fff9848
     7a0:	00008998 	.word	0x00008998
     7a4:	1fff98ec 	.word	0x1fff98ec
     7a8:	00008a88 	.word	0x00008a88
     7ac:	1fff87fc 	.word	0x1fff87fc
     7b0:	00000471 	.word	0x00000471

000007b4 <Systronix_LCM300::begin(i2c_pins)>:
/*!
	@brief  Join the I2C bus as a master at BaseAddr, 100 kHz clock
*/

void Systronix_LCM300::begin (i2c_pins pins)
	{
     7b4:	b510      	push	{r4, lr}
     7b6:	b086      	sub	sp, #24
     7b8:	4604      	mov	r4, r0
    //             I2C_RATE_1500, I2C_RATE_1800, I2C_RATE_2000, I2C_RATE_2400,
    //             I2C_RATE_2800, I2C_RATE_3000
    //      opMode = I2C_OP_MODE_IMM, I2C_OP_MODE_ISR, I2C_OP_MODE_DMA (ignored for Slave mode, defaults to ISR)
    //
    inline void begin(i2c_mode mode, uint8_t address, i2c_pins pins, i2c_pullup pullup, uint32_t rate, i2c_op_mode opMode=I2C_OP_MODE_ISR)
        { begin_(i2c, bus, mode, address, 0, pins, pullup, rate, opMode); }
     7ba:	7d40      	ldrb	r0, [r0, #21]
     7bc:	2301      	movs	r3, #1
     7be:	9304      	str	r3, [sp, #16]
     7c0:	4b08      	ldr	r3, [pc, #32]	; (7e4 <Systronix_LCM300::begin(i2c_pins)+0x30>)
     7c2:	9303      	str	r3, [sp, #12]
     7c4:	2200      	movs	r2, #0
     7c6:	9202      	str	r2, [sp, #8]
     7c8:	9101      	str	r1, [sp, #4]
     7ca:	9200      	str	r2, [sp, #0]
     7cc:	4613      	mov	r3, r2
     7ce:	4601      	mov	r1, r0
     7d0:	69a0      	ldr	r0, [r4, #24]
     7d2:	f000 fbc1 	bl	f58 <i2c_t3::begin_(i2cStruct*, unsigned char, i2c_mode, unsigned char, unsigned char, i2c_pins, i2c_pullup, unsigned long, i2c_op_mode)>
    //                       zero (the default in cases where timeout is not specified).  The default is
    //                       initially zero (infinite wait).
    // return: none
    // parameters:
    //      timeout = timeout in microseconds
    inline void setDefaultTimeout(uint32_t timeout) { i2c->defTimeout = timeout; }
     7d6:	69a3      	ldr	r3, [r4, #24]
     7d8:	4a03      	ldr	r2, [pc, #12]	; (7e8 <Systronix_LCM300::begin(i2c_pins)+0x34>)
     7da:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
	_wire.begin(I2C_MASTER, 0x00, pins, I2C_PULLUP_EXT, I2C_RATE_100);	// join I2C as master
//	Serial.printf("LCM300 lib begin %s\r\n", _wire_name);
	_wire.setDefaultTimeout(200000); // 200ms
	}
     7de:	b006      	add	sp, #24
     7e0:	bd10      	pop	{r4, pc}
     7e2:	bf00      	nop
     7e4:	000186a0 	.word	0x000186a0
     7e8:	00030d40 	.word	0x00030d40

000007ec <Systronix_LCM300::base_get()>:
//

uint8_t Systronix_LCM300::base_get(void)
	{
	return _base;
	}
     7ec:	7800      	ldrb	r0, [r0, #0]
     7ee:	4770      	bx	lr

000007f0 <Systronix_LCM300::init()>:
//
// Attempts to write the pointer register.  If successful, sets control.exists true, else false.
//

uint8_t Systronix_LCM300::init (void)
	{
     7f0:	b530      	push	{r4, r5, lr}
     7f2:	b083      	sub	sp, #12
     7f4:	4604      	mov	r4, r0
	_wire.beginTransmission (_base);					// base address
     7f6:	f100 0508 	add.w	r5, r0, #8
     7fa:	7801      	ldrb	r1, [r0, #0]
     7fc:	4628      	mov	r0, r5
     7fe:	f000 fd17 	bl	1230 <i2c_t3::beginTransmission(unsigned char)>
    inline uint8_t endTransmission(i2c_stop sendStop, uint32_t timeout) { return endTransmission(i2c, bus, sendStop, timeout); }
    //
    // Master Transmit - blocking routine, transmits Tx buffer to slave
    // return: 0=success, 1=data too long, 2=recv addr NACK, 3=recv data NACK, 4=other error
    //
    inline uint8_t endTransmission(void) { return endTransmission(i2c, bus, I2C_STOP, 0); }
     802:	7d62      	ldrb	r2, [r4, #21]
     804:	2300      	movs	r3, #0
     806:	9300      	str	r3, [sp, #0]
     808:	2301      	movs	r3, #1
     80a:	69a1      	ldr	r1, [r4, #24]
     80c:	4628      	mov	r0, r5
     80e:	f000 fff1 	bl	17f4 <i2c_t3::endTransmission(i2cStruct*, unsigned char, i2c_stop, unsigned long)>

	if (_wire.endTransmission())						// returns 0 if got an ACK from LCM300
     812:	b120      	cbz	r0, 81e <Systronix_LCM300::init()+0x2e>
		{
		error.exists = false;							// unsuccessful i2c transaction
     814:	2300      	movs	r3, #0
     816:	f884 3020 	strb.w	r3, [r4, #32]
		return FAIL;
     81a:	23ff      	movs	r3, #255	; 0xff
     81c:	e003      	b.n	826 <Systronix_LCM300::init()+0x36>
     81e:	4603      	mov	r3, r0
		}
	
	error.exists = true;								// if here, we appear to have communicated with
     820:	2201      	movs	r2, #1
     822:	f884 2020 	strb.w	r2, [r4, #32]
	return SUCCESS;										// the LCM300
	}
     826:	4618      	mov	r0, r3
     828:	b003      	add	sp, #12
     82a:	bd30      	pop	{r4, r5, pc}

0000082c <Systronix_LCM300::tally_transaction(unsigned char)>:

TODO use i2c_t3 error or status enumeration here in the switch/case
*/

void Systronix_LCM300::tally_transaction (uint8_t value)
	{
     82c:	b430      	push	{r4, r5}
	if (value && (error.total_error_count < UINT64_MAX))
     82e:	2900      	cmp	r1, #0
     830:	d050      	beq.n	8d4 <Systronix_LCM300::tally_transaction(unsigned char)+0xa8>
     832:	460b      	mov	r3, r1
     834:	e9d0 4514 	ldrd	r4, r5, [r0, #80]	; 0x50
     838:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
     83c:	bf08      	it	eq
     83e:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
     842:	d004      	beq.n	84e <Systronix_LCM300::tally_transaction(unsigned char)+0x22>
		error.total_error_count++; 			// every time here incr total error count
     844:	3401      	adds	r4, #1
     846:	f145 0500 	adc.w	r5, r5, #0
     84a:	e9c0 4514 	strd	r4, r5, [r0, #80]	; 0x50

	error.error_val = value;
     84e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

	switch (value)
     852:	2b0c      	cmp	r3, #12
     854:	d83a      	bhi.n	8cc <Systronix_LCM300::tally_transaction(unsigned char)+0xa0>
     856:	e8df f003 	tbb	[pc, r3]
     85a:	1507      	.short	0x1507
     85c:	1d19211d 	.word	0x1d19211d
     860:	2d292521 	.word	0x2d292521
     864:	312d      	.short	0x312d
     866:	35          	.byte	0x35
     867:	00          	.byte	0x00
		{
		case SUCCESS:
			if (error.successful_count < UINT64_MAX)
     868:	e9d0 2316 	ldrd	r2, r3, [r0, #88]	; 0x58
     86c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
     870:	bf08      	it	eq
     872:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
     876:	d031      	beq.n	8dc <Systronix_LCM300::tally_transaction(unsigned char)+0xb0>
				error.successful_count++;
     878:	3201      	adds	r2, #1
     87a:	f143 0300 	adc.w	r3, r3, #0
     87e:	e9c0 2316 	strd	r2, r3, [r0, #88]	; 0x58
     882:	e02b      	b.n	8dc <Systronix_LCM300::tally_transaction(unsigned char)+0xb0>
			break;
		case 1:								// i2c_t3 and Wire: data too long from endTransmission() (rx/tx buffers are 259 bytes - slave addr + 2 cmd bytes + 256 data)
			error.data_len_error_count++;
     884:	6a83      	ldr	r3, [r0, #40]	; 0x28
     886:	3301      	adds	r3, #1
     888:	6283      	str	r3, [r0, #40]	; 0x28
			break;
     88a:	e027      	b.n	8dc <Systronix_LCM300::tally_transaction(unsigned char)+0xb0>
#if defined I2C_T3_H
		case I2C_TIMEOUT:
			error.timeout_count++;			// 4 from i2c_t3; timeout from call to status() (read)
     88c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     88e:	3301      	adds	r3, #1
     890:	62c3      	str	r3, [r0, #44]	; 0x2c
#else
		case 4:
			error.other_error_count++;		// i2c_t3 and Wire: from endTransmission() "other error"
#endif
			break;
     892:	e023      	b.n	8dc <Systronix_LCM300::tally_transaction(unsigned char)+0xb0>
		case 2:								// i2c_t3 and Wire: from endTransmission()
		case I2C_ADDR_NAK:					// 5 from i2c_t3
			error.rcv_addr_nack_count++;
     894:	6b03      	ldr	r3, [r0, #48]	; 0x30
     896:	3301      	adds	r3, #1
     898:	6303      	str	r3, [r0, #48]	; 0x30
			break;
     89a:	e01f      	b.n	8dc <Systronix_LCM300::tally_transaction(unsigned char)+0xb0>
		case 3:								// i2c_t3 and Wire: from endTransmission()
		case I2C_DATA_NAK:					// 6 from i2c_t3
			error.rcv_data_nack_count++;
     89c:	6b43      	ldr	r3, [r0, #52]	; 0x34
     89e:	3301      	adds	r3, #1
     8a0:	6343      	str	r3, [r0, #52]	; 0x34
			break;
     8a2:	e01b      	b.n	8dc <Systronix_LCM300::tally_transaction(unsigned char)+0xb0>
		case I2C_ARB_LOST:					// 7 from i2c_t3; arbitration lost from call to status() (read)
			error.arbitration_lost_count++;
     8a4:	6b83      	ldr	r3, [r0, #56]	; 0x38
     8a6:	3301      	adds	r3, #1
     8a8:	6383      	str	r3, [r0, #56]	; 0x38
			break;
     8aa:	e017      	b.n	8dc <Systronix_LCM300::tally_transaction(unsigned char)+0xb0>
		case I2C_BUF_OVF:
			error.buffer_overflow_count++;
     8ac:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
     8ae:	3301      	adds	r3, #1
     8b0:	63c3      	str	r3, [r0, #60]	; 0x3c
			break;
     8b2:	e013      	b.n	8dc <Systronix_LCM300::tally_transaction(unsigned char)+0xb0>
		case I2C_SLAVE_TX:
		case I2C_SLAVE_RX:
			error.other_error_count++;		// 9 & 10 from i2c_t3; these are not errors, I think
     8b4:	6c03      	ldr	r3, [r0, #64]	; 0x40
     8b6:	3301      	adds	r3, #1
     8b8:	6403      	str	r3, [r0, #64]	; 0x40
			break;
     8ba:	e00f      	b.n	8dc <Systronix_LCM300::tally_transaction(unsigned char)+0xb0>
		case WR_INCOMPLETE:					// 11; Wire.write failed to write all of the data to tx_buffer
			error.incomplete_write_count++;
     8bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
     8be:	3301      	adds	r3, #1
     8c0:	6243      	str	r3, [r0, #36]	; 0x24
			break;
     8c2:	e00b      	b.n	8dc <Systronix_LCM300::tally_transaction(unsigned char)+0xb0>
		case SILLY_PROGRAMMER:				// 12
			error.silly_programmer_error++;
     8c4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
     8c6:	3301      	adds	r3, #1
     8c8:	64c3      	str	r3, [r0, #76]	; 0x4c
			break;
     8ca:	e007      	b.n	8dc <Systronix_LCM300::tally_transaction(unsigned char)+0xb0>
		default:
			error.unknown_error_count++;
     8cc:	6c43      	ldr	r3, [r0, #68]	; 0x44
     8ce:	3301      	adds	r3, #1
     8d0:	6443      	str	r3, [r0, #68]	; 0x44
			break;
		}
	}
     8d2:	e003      	b.n	8dc <Systronix_LCM300::tally_transaction(unsigned char)+0xb0>
void Systronix_LCM300::tally_transaction (uint8_t value)
	{
	if (value && (error.total_error_count < UINT64_MAX))
		error.total_error_count++; 			// every time here incr total error count

	error.error_val = value;
     8d4:	2300      	movs	r3, #0
     8d6:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
     8da:	e7c5      	b.n	868 <Systronix_LCM300::tally_transaction(unsigned char)+0x3c>
			break;
		default:
			error.unknown_error_count++;
			break;
		}
	}
     8dc:	bc30      	pop	{r4, r5}
     8de:	4770      	bx	lr

000008e0 <Systronix_LCM300::setup(unsigned char, i2c_t3, char*)>:
	@todo	Test base address for legal range 0x58 - 0x5F
			Add constructor(void) for default address of 0x5F
*/

uint8_t Systronix_LCM300::setup (uint8_t base, i2c_t3 wire, char* name)
	{
     8e0:	b510      	push	{r4, lr}
	if ((LCM300_BASE_MIN > base) || (LCM300_BASE_MAX < base))
     8e2:	f1a1 0458 	sub.w	r4, r1, #88	; 0x58
     8e6:	b2e4      	uxtb	r4, r4
     8e8:	2c07      	cmp	r4, #7
     8ea:	d904      	bls.n	8f6 <Systronix_LCM300::setup(unsigned char, i2c_t3, char*)+0x16>
		{
		tally_transaction (SILLY_PROGRAMMER);
     8ec:	210c      	movs	r1, #12
     8ee:	f7ff ff9d 	bl	82c <Systronix_LCM300::tally_transaction(unsigned char)>
		return FAIL;
     8f2:	20ff      	movs	r0, #255	; 0xff
     8f4:	bd10      	pop	{r4, pc}
		}

	_base = base;
     8f6:	7001      	strb	r1, [r0, #0]
     8f8:	7911      	ldrb	r1, [r2, #4]
     8fa:	7301      	strb	r1, [r0, #12]
     8fc:	6891      	ldr	r1, [r2, #8]
     8fe:	6101      	str	r1, [r0, #16]
     900:	7b11      	ldrb	r1, [r2, #12]
     902:	7501      	strb	r1, [r0, #20]
#if I2C_BUS_NUM >= 4
    extern "C" void i2c3_isr(void);
#endif
extern "C" void i2c_isr_handler(struct i2cStruct* i2c, uint8_t bus);

class i2c_t3 : public Stream
     904:	7b51      	ldrb	r1, [r2, #13]
     906:	7541      	strb	r1, [r0, #21]
     908:	6912      	ldr	r2, [r2, #16]
     90a:	6182      	str	r2, [r0, #24]
	_wire = wire;
	_wire_name = wire_name = name;		// protected and public
     90c:	6603      	str	r3, [r0, #96]	; 0x60
     90e:	6043      	str	r3, [r0, #4]
	return SUCCESS;
     910:	2000      	movs	r0, #0
	}
     912:	bd10      	pop	{r4, pc}

00000914 <Systronix_LCM300::command_ascii_read(int, unsigned int, char*, bool)>:
@param debug print out detailed cmd value, length byte, # read, hex values + char if printable 
@return SUCCESS, FAIL, or ABSENT
*/

uint8_t Systronix_LCM300::command_ascii_read (int cmd, size_t length, char *data, bool debug)
	{
     914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     918:	b082      	sub	sp, #8
     91a:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
	uint8_t ret_val;
	size_t count;							// # bytes to read, generally length + 2
	char char_read;
	char char_print = 0x20;

	if (!error.exists)						// exit immediately if device does not exist
     91e:	f890 4020 	ldrb.w	r4, [r0, #32]
     922:	2c00      	cmp	r4, #0
     924:	f000 80af 	beq.w	a86 <Systronix_LCM300::command_ascii_read(int, unsigned int, char*, bool)+0x172>
     928:	461e      	mov	r6, r3
     92a:	460d      	mov	r5, r1
     92c:	4604      	mov	r4, r0
		return ABSENT;


	_wire.beginTransmission (_base);						// base address
     92e:	f100 0808 	add.w	r8, r0, #8
     932:	7801      	ldrb	r1, [r0, #0]
     934:	4640      	mov	r0, r8
     936:	f000 fc7b 	bl	1230 <i2c_t3::beginTransmission(unsigned char)>
    //
    size_t write(uint8_t data);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n)          { return write((uint8_t)n); }
    inline size_t write(unsigned int n)  { return write((uint8_t)n); }
    inline size_t write(int n)           { return write((uint8_t)n); }
     93a:	fa5f f985 	uxtb.w	r9, r5
     93e:	68a3      	ldr	r3, [r4, #8]
     940:	681b      	ldr	r3, [r3, #0]
     942:	4649      	mov	r1, r9
     944:	4640      	mov	r0, r8
     946:	4798      	blx	r3
	ret_val = _wire.write (cmd);							// PMBus command code

	if (1 != ret_val)
     948:	b2c0      	uxtb	r0, r0
     94a:	2801      	cmp	r0, #1
     94c:	d005      	beq.n	95a <Systronix_LCM300::command_ascii_read(int, unsigned int, char*, bool)+0x46>
		{
		tally_transaction (WR_INCOMPLETE);				// increment the appropriate counter
     94e:	210b      	movs	r1, #11
     950:	4620      	mov	r0, r4
     952:	f7ff ff6b 	bl	82c <Systronix_LCM300::tally_transaction(unsigned char)>
		return FAIL;
     956:	20ff      	movs	r0, #255	; 0xff
     958:	e0bd      	b.n	ad6 <Systronix_LCM300::command_ascii_read(int, unsigned int, char*, bool)+0x1c2>
    //                   if command should end with a STOP (I2C_STOP) or not (I2C_NOSTOP).
    // return: 0=success, 1=data too long, 2=recv addr NACK, 3=recv data NACK, 4=other error
    // parameters:
    //      i2c_stop = I2C_NOSTOP, I2C_STOP
    //
    inline uint8_t endTransmission(i2c_stop sendStop) { return endTransmission(i2c, bus, sendStop, 0); }
     95a:	7d62      	ldrb	r2, [r4, #21]
     95c:	2300      	movs	r3, #0
     95e:	9300      	str	r3, [sp, #0]
     960:	69a1      	ldr	r1, [r4, #24]
     962:	4640      	mov	r0, r8
     964:	f000 ff46 	bl	17f4 <i2c_t3::endTransmission(i2cStruct*, unsigned char, i2c_stop, unsigned long)>
		}

	_wire.endTransmission(I2C_NOSTOP); 					// don't send a stop condition, PMBus wants a repeated start

	if (debug) Serial.printf("ascii read, cmd: 0x%X\r\n", cmd);
     968:	2f00      	cmp	r7, #0
     96a:	f000 809f 	beq.w	aac <Systronix_LCM300::command_ascii_read(int, unsigned int, char*, bool)+0x198>
     96e:	462a      	mov	r2, r5
     970:	495a      	ldr	r1, [pc, #360]	; (adc <Systronix_LCM300::command_ascii_read(int, unsigned int, char*, bool)+0x1c8>)
     972:	485b      	ldr	r0, [pc, #364]	; (ae0 <Systronix_LCM300::command_ascii_read(int, unsigned int, char*, bool)+0x1cc>)
     974:	f002 fc7a 	bl	326c <Print::printf(char const*, ...)>
    //      address = target 7bit slave address
    //      length = number of bytes requested
    //      i2c_stop = I2C_NOSTOP, I2C_STOP
    //
    inline size_t requestFrom(uint8_t addr, size_t len, i2c_stop sendStop)
        { return requestFrom_(i2c, bus, addr, len, sendStop, 0); }
     978:	7822      	ldrb	r2, [r4, #0]
     97a:	7d61      	ldrb	r1, [r4, #21]
     97c:	2300      	movs	r3, #0
     97e:	9301      	str	r3, [sp, #4]
     980:	2301      	movs	r3, #1
     982:	9300      	str	r3, [sp, #0]
     984:	69a0      	ldr	r0, [r4, #24]
     986:	f000 ff49 	bl	181c <i2c_t3::requestFrom_(i2cStruct*, unsigned char, unsigned char, unsigned int, i2c_stop, unsigned long)>
	// now try to read the ascii data at that read command location

	// 0th byte is the length of the ascii data, always >=2 and < 16 for LCM300
	// add length byte and one more for good measure
	count = 1;
	if (count != _wire.requestFrom(_base, count, I2C_STOP))
     98a:	2801      	cmp	r0, #1
     98c:	d07f      	beq.n	a8e <Systronix_LCM300::command_ascii_read(int, unsigned int, char*, bool)+0x17a>
		{
		Serial.printf("ascii read of 1st byte failed\r\n");
     98e:	4955      	ldr	r1, [pc, #340]	; (ae4 <Systronix_LCM300::command_ascii_read(int, unsigned int, char*, bool)+0x1d0>)
     990:	4853      	ldr	r0, [pc, #332]	; (ae0 <Systronix_LCM300::command_ascii_read(int, unsigned int, char*, bool)+0x1cc>)
     992:	f002 fc6b 	bl	326c <Print::printf(char const*, ...)>
		data[0] = '\0';	// null term
     996:	2300      	movs	r3, #0
     998:	7033      	strb	r3, [r6, #0]
		return FAIL;
     99a:	20ff      	movs	r0, #255	; 0xff
     99c:	e09b      	b.n	ad6 <Systronix_LCM300::command_ascii_read(int, unsigned int, char*, bool)+0x1c2>
		// should read length of ascii data avail at this command
		char_read = _wire.readByte();
		if (debug) Serial.printf("ascii length byte = %u\r\n", (uint8_t) char_read);
		}

	_wire.beginTransmission (_base);						// base address
     99e:	7821      	ldrb	r1, [r4, #0]
     9a0:	4640      	mov	r0, r8
     9a2:	f000 fc45 	bl	1230 <i2c_t3::beginTransmission(unsigned char)>
    //
    size_t write(uint8_t data);
    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n)          { return write((uint8_t)n); }
    inline size_t write(unsigned int n)  { return write((uint8_t)n); }
    inline size_t write(int n)           { return write((uint8_t)n); }
     9a6:	68a3      	ldr	r3, [r4, #8]
     9a8:	681b      	ldr	r3, [r3, #0]
     9aa:	4649      	mov	r1, r9
     9ac:	4640      	mov	r0, r8
     9ae:	4798      	blx	r3
	ret_val = _wire.write (cmd);							// PMBus command code

	if (1 != ret_val)
     9b0:	b2c0      	uxtb	r0, r0
     9b2:	2801      	cmp	r0, #1
     9b4:	d005      	beq.n	9c2 <Systronix_LCM300::command_ascii_read(int, unsigned int, char*, bool)+0xae>
		{
		tally_transaction (WR_INCOMPLETE);				// increment the appropriate counter
     9b6:	210b      	movs	r1, #11
     9b8:	4620      	mov	r0, r4
     9ba:	f7ff ff37 	bl	82c <Systronix_LCM300::tally_transaction(unsigned char)>
		return FAIL;
     9be:	20ff      	movs	r0, #255	; 0xff
     9c0:	e089      	b.n	ad6 <Systronix_LCM300::command_ascii_read(int, unsigned int, char*, bool)+0x1c2>
    //                   if command should end with a STOP (I2C_STOP) or not (I2C_NOSTOP).
    // return: 0=success, 1=data too long, 2=recv addr NACK, 3=recv data NACK, 4=other error
    // parameters:
    //      i2c_stop = I2C_NOSTOP, I2C_STOP
    //
    inline uint8_t endTransmission(i2c_stop sendStop) { return endTransmission(i2c, bus, sendStop, 0); }
     9c2:	7d62      	ldrb	r2, [r4, #21]
     9c4:	f04f 0900 	mov.w	r9, #0
     9c8:	f8cd 9000 	str.w	r9, [sp]
     9cc:	464b      	mov	r3, r9
     9ce:	69a1      	ldr	r1, [r4, #24]
     9d0:	4640      	mov	r0, r8
     9d2:	f000 ff0f 	bl	17f4 <i2c_t3::endTransmission(i2cStruct*, unsigned char, i2c_stop, unsigned long)>
		}

	_wire.endTransmission(I2C_NOSTOP); 					// don't send a stop condition, PMBus wants a repeated start

	// now read the ascii data based on length we already read, but we re-read the length byte
	count = char_read + 1;	// length of ascii data including length byte
     9d6:	3501      	adds	r5, #1
    //      address = target 7bit slave address
    //      length = number of bytes requested
    //      i2c_stop = I2C_NOSTOP, I2C_STOP
    //
    inline size_t requestFrom(uint8_t addr, size_t len, i2c_stop sendStop)
        { return requestFrom_(i2c, bus, addr, len, sendStop, 0); }
     9d8:	7822      	ldrb	r2, [r4, #0]
     9da:	7d61      	ldrb	r1, [r4, #21]
     9dc:	f8cd 9004 	str.w	r9, [sp, #4]
     9e0:	2301      	movs	r3, #1
     9e2:	9300      	str	r3, [sp, #0]
     9e4:	462b      	mov	r3, r5
     9e6:	69a0      	ldr	r0, [r4, #24]
     9e8:	f000 ff18 	bl	181c <i2c_t3::requestFrom_(i2cStruct*, unsigned char, unsigned char, unsigned int, i2c_stop, unsigned long)>
	if (count != _wire.requestFrom(_base, count, I2C_STOP))
     9ec:	4285      	cmp	r5, r0
     9ee:	d00b      	beq.n	a08 <Systronix_LCM300::command_ascii_read(int, unsigned int, char*, bool)+0xf4>
		{
		Serial.printf("ascii data chars failed");
     9f0:	493d      	ldr	r1, [pc, #244]	; (ae8 <Systronix_LCM300::command_ascii_read(int, unsigned int, char*, bool)+0x1d4>)
     9f2:	483b      	ldr	r0, [pc, #236]	; (ae0 <Systronix_LCM300::command_ascii_read(int, unsigned int, char*, bool)+0x1cc>)
     9f4:	f002 fc3a 	bl	326c <Print::printf(char const*, ...)>
    // Return Status - returns current status of I2C (enum return value)
    // return: I2C_WAITING, I2C_SENDING, I2C_SEND_ADDR, I2C_RECEIVING,
    //         I2C_TIMEOUT, I2C_ADDR_NAK, I2C_DATA_NAK, I2C_ARB_LOST,
    //         I2C_SLAVE_TX, I2C_SLAVE_RX
    //
    inline i2c_status status(void) { return i2c->currentStatus; }
     9f8:	69a3      	ldr	r3, [r4, #24]
     9fa:	f893 1251 	ldrb.w	r1, [r3, #593]	; 0x251
		ret_val = _wire.status();				// to get error value
		tally_transaction (ret_val);					// increment the appropriate counter
     9fe:	4620      	mov	r0, r4
     a00:	f7ff ff14 	bl	82c <Systronix_LCM300::tally_transaction(unsigned char)>
		return FAIL;
     a04:	20ff      	movs	r0, #255	; 0xff
     a06:	e066      	b.n	ad6 <Systronix_LCM300::command_ascii_read(int, unsigned int, char*, bool)+0x1c2>
		}
	else
		{
		if (debug) Serial.printf("%u ascii chars read\r\n", (uint8_t)count);	
     a08:	2f00      	cmp	r7, #0
     a0a:	d05c      	beq.n	ac6 <Systronix_LCM300::command_ascii_read(int, unsigned int, char*, bool)+0x1b2>
     a0c:	b2ea      	uxtb	r2, r5
     a0e:	4937      	ldr	r1, [pc, #220]	; (aec <Systronix_LCM300::command_ascii_read(int, unsigned int, char*, bool)+0x1d8>)
     a10:	4833      	ldr	r0, [pc, #204]	; (ae0 <Systronix_LCM300::command_ascii_read(int, unsigned int, char*, bool)+0x1cc>)
     a12:	f002 fc2b 	bl	326c <Print::printf(char const*, ...)>

    // ------------------------------------------------------------------------------------------------------
    // Available - returns number of remaining available bytes in Rx buffer
    // return: #bytes available
    //
    inline int available(void) { return i2c->rxBufferLength - i2c->rxBufferIndex; }
     a16:	69a0      	ldr	r0, [r4, #24]
     a18:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
     a1c:	f8d0 2134 	ldr.w	r2, [r0, #308]	; 0x134
		}

	uint8_t index=0;
	while (_wire.available())
     a20:	429a      	cmp	r2, r3
     a22:	d02b      	beq.n	a7c <Systronix_LCM300::command_ascii_read(int, unsigned int, char*, bool)+0x168>
@param debug print out detailed cmd value, length byte, # read, hex values + char if printable 
@return SUCCESS, FAIL, or ABSENT
*/

uint8_t Systronix_LCM300::command_ascii_read (int cmd, size_t length, char *data, bool debug)
	{
     a24:	2500      	movs	r5, #0
			}
		else
			{
			char_print = char_read;	// printable ascii	
			}
		if (debug) Serial.printf("%u:0x%02X/%c ", index, char_read, char_print);
     a26:	f8df 90cc 	ldr.w	r9, [pc, #204]	; af4 <Systronix_LCM300::command_ascii_read(int, unsigned int, char*, bool)+0x1e0>
     a2a:	f8df 80b4 	ldr.w	r8, [pc, #180]	; ae0 <Systronix_LCM300::command_ascii_read(int, unsigned int, char*, bool)+0x1cc>
    static int read_(struct i2cStruct* i2c);
    //
    // Read - returns next data byte (signed int) from Rx buffer
    // return: data, -1 if buffer empty
    //
    inline int read(void) { return read_(i2c); }
     a2e:	f000 ff11 	bl	1854 <i2c_t3::read_(i2cStruct*)>
		}

	uint8_t index=0;
	while (_wire.available())
		{
		char_read = _wire.read();
     a32:	fa5f fa80 	uxtb.w	sl, r0
		if ((char_read < 0x20) || (char_read > 0x7E)) 
     a36:	f1aa 0220 	sub.w	r2, sl, #32
     a3a:	b2d2      	uxtb	r2, r2
			{
			char_print = 0x20;	// unprintable? Use space
			}
		else
			{
			char_print = char_read;	// printable ascii	
     a3c:	2a5e      	cmp	r2, #94	; 0x5e
     a3e:	bf94      	ite	ls
     a40:	4653      	movls	r3, sl
     a42:	2320      	movhi	r3, #32
			}
		if (debug) Serial.printf("%u:0x%02X/%c ", index, char_read, char_print);
     a44:	b137      	cbz	r7, a54 <Systronix_LCM300::command_ascii_read(int, unsigned int, char*, bool)+0x140>
     a46:	9300      	str	r3, [sp, #0]
     a48:	4653      	mov	r3, sl
     a4a:	462a      	mov	r2, r5
     a4c:	4649      	mov	r1, r9
     a4e:	4640      	mov	r0, r8
     a50:	f002 fc0c 	bl	326c <Print::printf(char const*, ...)>
		if (0 == index)
     a54:	b115      	cbz	r5, a5c <Systronix_LCM300::command_ascii_read(int, unsigned int, char*, bool)+0x148>
			{
				// discard length in byte 0
			}
		else 
			{
				data[index-1] = char_read;
     a56:	1973      	adds	r3, r6, r5
     a58:	f803 ac01 	strb.w	sl, [r3, #-1]
			}
		index++;
     a5c:	3501      	adds	r5, #1
     a5e:	b2ed      	uxtb	r5, r5

    // ------------------------------------------------------------------------------------------------------
    // Available - returns number of remaining available bytes in Rx buffer
    // return: #bytes available
    //
    inline int available(void) { return i2c->rxBufferLength - i2c->rxBufferIndex; }
     a60:	69a0      	ldr	r0, [r4, #24]
     a62:	f8d0 2138 	ldr.w	r2, [r0, #312]	; 0x138
     a66:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
		{
		if (debug) Serial.printf("%u ascii chars read\r\n", (uint8_t)count);	
		}

	uint8_t index=0;
	while (_wire.available())
     a6a:	429a      	cmp	r2, r3
     a6c:	d1df      	bne.n	a2e <Systronix_LCM300::command_ascii_read(int, unsigned int, char*, bool)+0x11a>
				data[index-1] = char_read;
			}
		index++;
		}

	if (index > 2)
     a6e:	2d02      	cmp	r5, #2
     a70:	d903      	bls.n	a7a <Systronix_LCM300::command_ascii_read(int, unsigned int, char*, bool)+0x166>
		data[index-1] = '\0'; 	// null term
     a72:	1973      	adds	r3, r6, r5
     a74:	2200      	movs	r2, #0
     a76:	f803 2c01 	strb.w	r2, [r3, #-1]

	if (debug) Serial.println();
     a7a:	b137      	cbz	r7, a8a <Systronix_LCM300::command_ascii_read(int, unsigned int, char*, bool)+0x176>
     a7c:	4818      	ldr	r0, [pc, #96]	; (ae0 <Systronix_LCM300::command_ascii_read(int, unsigned int, char*, bool)+0x1cc>)
     a7e:	f002 fbdd 	bl	323c <Print::println()>
	return SUCCESS;
     a82:	2000      	movs	r0, #0
     a84:	e027      	b.n	ad6 <Systronix_LCM300::command_ascii_read(int, unsigned int, char*, bool)+0x1c2>
	size_t count;							// # bytes to read, generally length + 2
	char char_read;
	char char_print = 0x20;

	if (!error.exists)						// exit immediately if device does not exist
		return ABSENT;
     a86:	20fd      	movs	r0, #253	; 0xfd
     a88:	e025      	b.n	ad6 <Systronix_LCM300::command_ascii_read(int, unsigned int, char*, bool)+0x1c2>

	if (index > 2)
		data[index-1] = '\0'; 	// null term

	if (debug) Serial.println();
	return SUCCESS;
     a8a:	2000      	movs	r0, #0
     a8c:	e023      	b.n	ad6 <Systronix_LCM300::command_ascii_read(int, unsigned int, char*, bool)+0x1c2>
    static uint8_t readByte_(struct i2cStruct* i2c);
    //
    // Read Byte - returns next data byte (uint8_t) from Rx buffer
    // return: data, 0 if buffer empty
    //
    inline uint8_t readByte(void) { return readByte_(i2c); }
     a8e:	69a0      	ldr	r0, [r4, #24]
     a90:	f000 ff0c 	bl	18ac <i2c_t3::readByte_(i2cStruct*)>
     a94:	4605      	mov	r5, r0
		}
	else
		{
		// should read length of ascii data avail at this command
		char_read = _wire.readByte();
		if (debug) Serial.printf("ascii length byte = %u\r\n", (uint8_t) char_read);
     a96:	4602      	mov	r2, r0
     a98:	4915      	ldr	r1, [pc, #84]	; (af0 <Systronix_LCM300::command_ascii_read(int, unsigned int, char*, bool)+0x1dc>)
     a9a:	4811      	ldr	r0, [pc, #68]	; (ae0 <Systronix_LCM300::command_ascii_read(int, unsigned int, char*, bool)+0x1cc>)
     a9c:	f002 fbe6 	bl	326c <Print::printf(char const*, ...)>
     aa0:	e77d      	b.n	99e <Systronix_LCM300::command_ascii_read(int, unsigned int, char*, bool)+0x8a>
     aa2:	69a0      	ldr	r0, [r4, #24]
     aa4:	f000 ff02 	bl	18ac <i2c_t3::readByte_(i2cStruct*)>
     aa8:	4605      	mov	r5, r0
     aaa:	e778      	b.n	99e <Systronix_LCM300::command_ascii_read(int, unsigned int, char*, bool)+0x8a>
    //      address = target 7bit slave address
    //      length = number of bytes requested
    //      i2c_stop = I2C_NOSTOP, I2C_STOP
    //
    inline size_t requestFrom(uint8_t addr, size_t len, i2c_stop sendStop)
        { return requestFrom_(i2c, bus, addr, len, sendStop, 0); }
     aac:	7822      	ldrb	r2, [r4, #0]
     aae:	7d61      	ldrb	r1, [r4, #21]
     ab0:	2300      	movs	r3, #0
     ab2:	9301      	str	r3, [sp, #4]
     ab4:	2301      	movs	r3, #1
     ab6:	9300      	str	r3, [sp, #0]
     ab8:	69a0      	ldr	r0, [r4, #24]
     aba:	f000 feaf 	bl	181c <i2c_t3::requestFrom_(i2cStruct*, unsigned char, unsigned char, unsigned int, i2c_stop, unsigned long)>
	// now try to read the ascii data at that read command location

	// 0th byte is the length of the ascii data, always >=2 and < 16 for LCM300
	// add length byte and one more for good measure
	count = 1;
	if (count != _wire.requestFrom(_base, count, I2C_STOP))
     abe:	2801      	cmp	r0, #1
     ac0:	f47f af65 	bne.w	98e <Systronix_LCM300::command_ascii_read(int, unsigned int, char*, bool)+0x7a>
     ac4:	e7ed      	b.n	aa2 <Systronix_LCM300::command_ascii_read(int, unsigned int, char*, bool)+0x18e>

    // ------------------------------------------------------------------------------------------------------
    // Available - returns number of remaining available bytes in Rx buffer
    // return: #bytes available
    //
    inline int available(void) { return i2c->rxBufferLength - i2c->rxBufferIndex; }
     ac6:	69a0      	ldr	r0, [r4, #24]
     ac8:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
     acc:	f8d0 2134 	ldr.w	r2, [r0, #308]	; 0x134
		{
		if (debug) Serial.printf("%u ascii chars read\r\n", (uint8_t)count);	
		}

	uint8_t index=0;
	while (_wire.available())
     ad0:	429a      	cmp	r2, r3
     ad2:	d1a7      	bne.n	a24 <Systronix_LCM300::command_ascii_read(int, unsigned int, char*, bool)+0x110>

	if (index > 2)
		data[index-1] = '\0'; 	// null term

	if (debug) Serial.println();
	return SUCCESS;
     ad4:	2000      	movs	r0, #0
	}
     ad6:	b002      	add	sp, #8
     ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     adc:	000089fc 	.word	0x000089fc
     ae0:	1fff8dc8 	.word	0x1fff8dc8
     ae4:	00008a14 	.word	0x00008a14
     ae8:	00008a34 	.word	0x00008a34
     aec:	00008a4c 	.word	0x00008a4c
     af0:	00008a64 	.word	0x00008a64
     af4:	000089ec 	.word	0x000089ec

00000af8 <i2c_t3::available()>:
     af8:	6903      	ldr	r3, [r0, #16]
     afa:	f8d3 0138 	ldr.w	r0, [r3, #312]	; 0x138
     afe:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
     b02:	1ac0      	subs	r0, r0, r3
     b04:	4770      	bx	lr
     b06:	bf00      	nop

00000b08 <i2c_t3::flush()>:
    inline uint8_t peekByte(void) { return peekByte_(i2c); }

    // ------------------------------------------------------------------------------------------------------
    // Flush (not implemented)
    //
    inline void flush(void) {}
     b08:	4770      	bx	lr
     b0a:	bf00      	nop

00000b0c <i2c_t3::write(unsigned char)>:
// parameters:
//      data = data byte
//
size_t i2c_t3::write(uint8_t data)
{
    if(i2c->txBufferLength < I2C_TX_BUFFER_LENGTH)
     b0c:	6903      	ldr	r3, [r0, #16]
     b0e:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
     b12:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
     b16:	d809      	bhi.n	b2c <i2c_t3::write(unsigned char)+0x20>
    {
        i2c->txBuffer[i2c->txBufferLength++] = data;
     b18:	f8d3 2244 	ldr.w	r2, [r3, #580]	; 0x244
     b1c:	1c50      	adds	r0, r2, #1
     b1e:	f8c3 0244 	str.w	r0, [r3, #580]	; 0x244
     b22:	4413      	add	r3, r2
     b24:	f883 113c 	strb.w	r1, [r3, #316]	; 0x13c
        return 1;
     b28:	2001      	movs	r0, #1
     b2a:	4770      	bx	lr
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
     b2c:	2301      	movs	r3, #1
     b2e:	7103      	strb	r3, [r0, #4]
    }
    setWriteError();
    return 0;
     b30:	2000      	movs	r0, #0
}
     b32:	4770      	bx	lr

00000b34 <i2c_t3::write(unsigned char const*, unsigned int)>:
// parameters:
//      data = pointer to uint8_t array of data
//      length = number of bytes to write
//
size_t i2c_t3::write(const uint8_t* data, size_t quantity)
{
     b34:	b430      	push	{r4, r5}
    if(i2c->txBufferLength < I2C_TX_BUFFER_LENGTH)
     b36:	6904      	ldr	r4, [r0, #16]
     b38:	f8d4 3244 	ldr.w	r3, [r4, #580]	; 0x244
     b3c:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
     b40:	d81f      	bhi.n	b82 <i2c_t3::write(unsigned char const*, unsigned int)+0x4e>
    {
        size_t avail = I2C_TX_BUFFER_LENGTH - i2c->txBufferLength;
     b42:	f8d4 5244 	ldr.w	r5, [r4, #580]	; 0x244
     b46:	f5c5 7581 	rsb	r5, r5, #258	; 0x102
     b4a:	3501      	adds	r5, #1
        uint8_t* dest = i2c->txBuffer + i2c->txBufferLength;
     b4c:	f504 739e 	add.w	r3, r4, #316	; 0x13c
     b50:	f8d4 4244 	ldr.w	r4, [r4, #580]	; 0x244

        if(quantity > avail)
     b54:	4295      	cmp	r5, r2
     b56:	d202      	bcs.n	b5e <i2c_t3::write(unsigned char const*, unsigned int)+0x2a>
     b58:	2201      	movs	r2, #1
     b5a:	7102      	strb	r2, [r0, #4]
        {
            quantity = avail; // truncate to space avail if needed
     b5c:	462a      	mov	r2, r5
            setWriteError();
        }
        for(size_t count=quantity; count; count--)
     b5e:	b142      	cbz	r2, b72 <i2c_t3::write(unsigned char const*, unsigned int)+0x3e>
     b60:	3c01      	subs	r4, #1
     b62:	4423      	add	r3, r4
     b64:	188d      	adds	r5, r1, r2
            *dest++ = *data++;
     b66:	f811 4b01 	ldrb.w	r4, [r1], #1
     b6a:	f803 4f01 	strb.w	r4, [r3, #1]!
        if(quantity > avail)
        {
            quantity = avail; // truncate to space avail if needed
            setWriteError();
        }
        for(size_t count=quantity; count; count--)
     b6e:	42a9      	cmp	r1, r5
     b70:	d1f9      	bne.n	b66 <i2c_t3::write(unsigned char const*, unsigned int)+0x32>
            *dest++ = *data++;
        i2c->txBufferLength += quantity;
     b72:	6901      	ldr	r1, [r0, #16]
     b74:	f8d1 3244 	ldr.w	r3, [r1, #580]	; 0x244
     b78:	4413      	add	r3, r2
     b7a:	f8c1 3244 	str.w	r3, [r1, #580]	; 0x244
        return quantity;
     b7e:	4610      	mov	r0, r2
     b80:	e002      	b.n	b88 <i2c_t3::write(unsigned char const*, unsigned int)+0x54>
     b82:	2301      	movs	r3, #1
     b84:	7103      	strb	r3, [r0, #4]
    }
    setWriteError();
    return 0;
     b86:	2000      	movs	r0, #0
}
     b88:	bc30      	pop	{r4, r5}
     b8a:	4770      	bx	lr

00000b8c <i2c_t3::~i2c_t3()>:
i2c_t3::i2c_t3(uint8_t i2c_bus)
{
    bus = i2c_bus;
    i2c = &i2cData[bus];
}
i2c_t3::~i2c_t3()
     b8c:	b538      	push	{r3, r4, r5, lr}
     b8e:	4604      	mov	r4, r0
     b90:	4b09      	ldr	r3, [pc, #36]	; (bb8 <i2c_t3::~i2c_t3()+0x2c>)
     b92:	6003      	str	r3, [r0, #0]
{
    // if DMA active, delete DMA object
    if(i2c->opMode == I2C_OP_MODE_DMA)
     b94:	6903      	ldr	r3, [r0, #16]
     b96:	f893 2248 	ldrb.w	r2, [r3, #584]	; 0x248
     b9a:	2a02      	cmp	r2, #2
     b9c:	d109      	bne.n	bb2 <i2c_t3::~i2c_t3()+0x26>
        delete i2c->DMA;
     b9e:	f8d3 5264 	ldr.w	r5, [r3, #612]	; 0x264
     ba2:	b135      	cbz	r5, bb2 <i2c_t3::~i2c_t3()+0x26>
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
		release();
     ba4:	4628      	mov	r0, r5
     ba6:	f002 fb2f 	bl	3208 <DMAChannel::release()>
     baa:	2108      	movs	r1, #8
     bac:	4628      	mov	r0, r5
     bae:	f002 fbbd 	bl	332c <operator delete(void*, unsigned int)>
}
     bb2:	4620      	mov	r0, r4
     bb4:	bd38      	pop	{r3, r4, r5, pc}
     bb6:	bf00      	nop
     bb8:	00008a88 	.word	0x00008a88

00000bbc <i2c_t3::i2c_t3(unsigned char)>:


// ------------------------------------------------------------------------------------------------------
// Constructor/Destructor
//
i2c_t3::i2c_t3(uint8_t i2c_bus)
     bbc:	b410      	push	{r4}
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
     bbe:	2200      	movs	r2, #0
     bc0:	7102      	strb	r2, [r0, #4]
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     bc2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
     bc6:	6084      	str	r4, [r0, #8]
     bc8:	7302      	strb	r2, [r0, #12]
     bca:	4a05      	ldr	r2, [pc, #20]	; (be0 <i2c_t3::i2c_t3(unsigned char)+0x24>)
     bcc:	6002      	str	r2, [r0, #0]
{
    bus = i2c_bus;
     bce:	7341      	strb	r1, [r0, #13]
    i2c = &i2cData[bus];
     bd0:	f44f 741c 	mov.w	r4, #624	; 0x270
     bd4:	4a03      	ldr	r2, [pc, #12]	; (be4 <i2c_t3::i2c_t3(unsigned char)+0x28>)
     bd6:	fb04 2101 	mla	r1, r4, r1, r2
     bda:	6101      	str	r1, [r0, #16]
}
     bdc:	bc10      	pop	{r4}
     bde:	4770      	bx	lr
     be0:	00008a88 	.word	0x00008a88
     be4:	1fff8800 	.word	0x1fff8800

00000be8 <i2c_t3::setOpMode_(i2cStruct*, unsigned char, i2c_op_mode)>:
// parameters:
//      opMode = I2C_OP_MODE_ISR, I2C_OP_MODE_DMA, I2C_OP_MODE_IMM
//
uint8_t i2c_t3::setOpMode_(struct i2cStruct* i2c, uint8_t bus, i2c_op_mode opMode)
{
    if(*(i2c->S) & I2C_S_BUSY) return 0; // return immediately if bus busy
     be8:	68c3      	ldr	r3, [r0, #12]
     bea:	781b      	ldrb	r3, [r3, #0]
     bec:	f013 0f20 	tst.w	r3, #32
     bf0:	f040 80b5 	bne.w	d5e <i2c_t3::setOpMode_(i2cStruct*, unsigned char, i2c_op_mode)+0x176>
// return: 1=success, 0=fail (bus busy)
// parameters:
//      opMode = I2C_OP_MODE_ISR, I2C_OP_MODE_DMA, I2C_OP_MODE_IMM
//
uint8_t i2c_t3::setOpMode_(struct i2cStruct* i2c, uint8_t bus, i2c_op_mode opMode)
{
     bf4:	b570      	push	{r4, r5, r6, lr}
     bf6:	4604      	mov	r4, r0
     bf8:	460d      	mov	r5, r1
    if(*(i2c->S) & I2C_S_BUSY) return 0; // return immediately if bus busy

    *(i2c->C1) = I2C_C1_IICEN; // reset I2C modes, stop intr, stop DMA
     bfa:	6883      	ldr	r3, [r0, #8]
     bfc:	2180      	movs	r1, #128	; 0x80
     bfe:	7019      	strb	r1, [r3, #0]
    *(i2c->S) = I2C_S_IICIF | I2C_S_ARBL; // clear status flags just in case
     c00:	68c3      	ldr	r3, [r0, #12]
     c02:	2112      	movs	r1, #18
     c04:	7019      	strb	r1, [r3, #0]

    // Slaves can only use ISR
    if(i2c->currentMode == I2C_SLAVE) opMode = I2C_OP_MODE_ISR;
     c06:	f890 3249 	ldrb.w	r3, [r0, #585]	; 0x249
     c0a:	2b01      	cmp	r3, #1
     c0c:	d00b      	beq.n	c26 <i2c_t3::setOpMode_(i2cStruct*, unsigned char, i2c_op_mode)+0x3e>

    if(opMode == I2C_OP_MODE_IMM)
     c0e:	b922      	cbnz	r2, c1a <i2c_t3::setOpMode_(i2cStruct*, unsigned char, i2c_op_mode)+0x32>
    {
        i2c->opMode = I2C_OP_MODE_IMM;
     c10:	2300      	movs	r3, #0
     c12:	f880 3248 	strb.w	r3, [r0, #584]	; 0x248
            }
        }
        else
            i2c->opMode = I2C_OP_MODE_ISR;
    }
    return 1;
     c16:	2001      	movs	r0, #1
     c18:	bd70      	pop	{r4, r5, r6, pc}

    if(opMode == I2C_OP_MODE_IMM)
    {
        i2c->opMode = I2C_OP_MODE_IMM;
    }
    if(opMode == I2C_OP_MODE_ISR || opMode == I2C_OP_MODE_DMA)
     c1a:	1e53      	subs	r3, r2, #1
     c1c:	b2db      	uxtb	r3, r3
     c1e:	2b01      	cmp	r3, #1
     c20:	f200 809f 	bhi.w	d62 <i2c_t3::setOpMode_(i2cStruct*, unsigned char, i2c_op_mode)+0x17a>
     c24:	e000      	b.n	c28 <i2c_t3::setOpMode_(i2cStruct*, unsigned char, i2c_op_mode)+0x40>

    *(i2c->C1) = I2C_C1_IICEN; // reset I2C modes, stop intr, stop DMA
    *(i2c->S) = I2C_S_IICIF | I2C_S_ARBL; // clear status flags just in case

    // Slaves can only use ISR
    if(i2c->currentMode == I2C_SLAVE) opMode = I2C_OP_MODE_ISR;
     c26:	2201      	movs	r2, #1
        i2c->opMode = I2C_OP_MODE_IMM;
    }
    if(opMode == I2C_OP_MODE_ISR || opMode == I2C_OP_MODE_DMA)
    {
        // Nested Vec Interrupt Ctrl - enable I2C interrupt
        if(bus == 0)
     c28:	b925      	cbnz	r5, c34 <i2c_t3::setOpMode_(i2cStruct*, unsigned char, i2c_op_mode)+0x4c>
        {
            NVIC_ENABLE_IRQ(IRQ_I2C0);
     c2a:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
     c2e:	4b4e      	ldr	r3, [pc, #312]	; (d68 <i2c_t3::setOpMode_(i2cStruct*, unsigned char, i2c_op_mode)+0x180>)
     c30:	6019      	str	r1, [r3, #0]
     c32:	e005      	b.n	c40 <i2c_t3::setOpMode_(i2cStruct*, unsigned char, i2c_op_mode)+0x58>
            I2C0_INTR_FLAG_INIT; // init I2C0 interrupt flag if used
        }
        #if I2C_BUS_NUM >= 2
            if(bus == 1)
     c34:	2d01      	cmp	r5, #1
     c36:	d103      	bne.n	c40 <i2c_t3::setOpMode_(i2cStruct*, unsigned char, i2c_op_mode)+0x58>
            {
                NVIC_ENABLE_IRQ(IRQ_I2C1);
     c38:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
     c3c:	4b4a      	ldr	r3, [pc, #296]	; (d68 <i2c_t3::setOpMode_(i2cStruct*, unsigned char, i2c_op_mode)+0x180>)
     c3e:	6019      	str	r1, [r3, #0]
            {
                NVIC_ENABLE_IRQ(IRQ_I2C3);
                I2C3_INTR_FLAG_INIT; // init I2C3 interrupt flag if used
            }
        #endif
        if(opMode == I2C_OP_MODE_DMA)
     c40:	2a02      	cmp	r2, #2
     c42:	f040 8088 	bne.w	d56 <i2c_t3::setOpMode_(i2cStruct*, unsigned char, i2c_op_mode)+0x16e>
        {
            // attempt to get a DMA Channel (if not already allocated)
            if(i2c->DMA == nullptr)
     c46:	f8d4 6264 	ldr.w	r6, [r4, #612]	; 0x264
     c4a:	b94e      	cbnz	r6, c60 <i2c_t3::setOpMode_(i2cStruct*, unsigned char, i2c_op_mode)+0x78>
                i2c->DMA = new DMAChannel();
     c4c:	2008      	movs	r0, #8
     c4e:	f002 fb69 	bl	3324 <operator new(unsigned int)>
     c52:	4606      	mov	r6, r0
	/*************************************************/
	/**    Channel Allocation                       **/
	/*************************************************/

	DMAChannel() {
		begin();
     c54:	2100      	movs	r1, #0
     c56:	f002 fa79 	bl	314c <DMAChannel::begin(bool)>
     c5a:	f8c4 6264 	str.w	r6, [r4, #612]	; 0x264
            // check if object created but no available channel
            if(i2c->DMA != nullptr && i2c->DMA->channel == DMA_NUM_CHANNELS)
     c5e:	b186      	cbz	r6, c82 <i2c_t3::setOpMode_(i2cStruct*, unsigned char, i2c_op_mode)+0x9a>
     c60:	7933      	ldrb	r3, [r6, #4]
     c62:	2b10      	cmp	r3, #16
     c64:	d10d      	bne.n	c82 <i2c_t3::setOpMode_(i2cStruct*, unsigned char, i2c_op_mode)+0x9a>
	DMAChannel & operator = (const DMASetting &rhs) {
		copy_tcd(TCD, rhs.TCD);
		return *this;
	}
	~DMAChannel() {
		release();
     c66:	4630      	mov	r0, r6
     c68:	f002 face 	bl	3208 <DMAChannel::release()>
            {
                // revert to ISR mode if no DMA channels avail
                delete i2c->DMA;
     c6c:	2108      	movs	r1, #8
     c6e:	4630      	mov	r0, r6
     c70:	f002 fb5c 	bl	332c <operator delete(void*, unsigned int)>
                i2c->DMA = nullptr;
     c74:	2300      	movs	r3, #0
     c76:	f8c4 3264 	str.w	r3, [r4, #612]	; 0x264
                i2c->opMode = I2C_OP_MODE_ISR;
     c7a:	2001      	movs	r0, #1
     c7c:	f884 0248 	strb.w	r0, [r4, #584]	; 0x248
     c80:	bd70      	pop	{r4, r5, r6, pc}
            }
            else
            {
                // DMA object has valid channel
                if(bus == 0)
     c82:	bb75      	cbnz	r5, ce2 <i2c_t3::setOpMode_(i2cStruct*, unsigned char, i2c_op_mode)+0xfa>
	void interruptAtHalf(void) {
		TCD->CSR |= DMA_TCD_CSR_INTHALF;
	}

	void disableOnCompletion(void) {
		TCD->CSR |= DMA_TCD_CSR_DREQ;
     c84:	6832      	ldr	r2, [r6, #0]
     c86:	8b93      	ldrh	r3, [r2, #28]
     c88:	b29b      	uxth	r3, r3
     c8a:	f043 0308 	orr.w	r3, r3, #8
     c8e:	8393      	strh	r3, [r2, #28]
                {
                    // setup static DMA settings
                    i2c->DMA->disableOnCompletion();
                    i2c->DMA->attachInterrupt(i2c0_isr);
     c90:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     c94:	7913      	ldrb	r3, [r2, #4]
     c96:	3310      	adds	r3, #16
     c98:	4834      	ldr	r0, [pc, #208]	; (d6c <i2c_t3::setOpMode_(i2cStruct*, unsigned char, i2c_op_mode)+0x184>)
     c9a:	4935      	ldr	r1, [pc, #212]	; (d70 <i2c_t3::setOpMode_(i2cStruct*, unsigned char, i2c_op_mode)+0x188>)
     c9c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     ca0:	7912      	ldrb	r2, [r2, #4]
     ca2:	1153      	asrs	r3, r2, #5
     ca4:	009b      	lsls	r3, r3, #2
     ca6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
     caa:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
     cae:	f002 021f 	and.w	r2, r2, #31
     cb2:	2101      	movs	r1, #1
     cb4:	fa01 f202 	lsl.w	r2, r1, r2
     cb8:	601a      	str	r2, [r3, #0]
	/*************************************************/
	/**    Special Options / Features               **/
	/*************************************************/

	void interruptAtCompletion(void) {
		TCD->CSR |= DMA_TCD_CSR_INTMAJOR;
     cba:	f8d4 3264 	ldr.w	r3, [r4, #612]	; 0x264
     cbe:	681a      	ldr	r2, [r3, #0]
     cc0:	8b93      	ldrh	r3, [r2, #28]
     cc2:	b29b      	uxth	r3, r3
     cc4:	f043 0302 	orr.w	r3, r3, #2
     cc8:	8393      	strh	r3, [r2, #28]
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
     cca:	f8d4 3264 	ldr.w	r3, [r4, #612]	; 0x264
     cce:	791b      	ldrb	r3, [r3, #4]
     cd0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     cd4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
		*mux = 0;
     cd8:	2200      	movs	r2, #0
     cda:	701a      	strb	r2, [r3, #0]
		*mux = (source & 63) | DMAMUX_ENABLE;
     cdc:	2296      	movs	r2, #150	; 0x96
     cde:	701a      	strb	r2, [r3, #0]
     ce0:	e031      	b.n	d46 <i2c_t3::setOpMode_(i2cStruct*, unsigned char, i2c_op_mode)+0x15e>
                    i2c->DMA->interruptAtCompletion();
                    i2c->DMA->triggerAtHardwareEvent(DMAMUX_SOURCE_I2C0);
                }
                #if I2C_BUS_NUM >= 2
                    if(bus == 1)
     ce2:	2d01      	cmp	r5, #1
     ce4:	d12f      	bne.n	d46 <i2c_t3::setOpMode_(i2cStruct*, unsigned char, i2c_op_mode)+0x15e>
	void interruptAtHalf(void) {
		TCD->CSR |= DMA_TCD_CSR_INTHALF;
	}

	void disableOnCompletion(void) {
		TCD->CSR |= DMA_TCD_CSR_DREQ;
     ce6:	f8d4 3264 	ldr.w	r3, [r4, #612]	; 0x264
     cea:	681a      	ldr	r2, [r3, #0]
     cec:	8b93      	ldrh	r3, [r2, #28]
     cee:	b29b      	uxth	r3, r3
     cf0:	f043 0308 	orr.w	r3, r3, #8
     cf4:	8393      	strh	r3, [r2, #28]
                    {
                        // setup static DMA settings
                        i2c->DMA->disableOnCompletion();
                        i2c->DMA->attachInterrupt(i2c1_isr);
     cf6:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264

	// An interrupt routine can be run when the DMA channel completes
	// the entire transfer, and also optionally when half of the
	// transfer is completed.
	void attachInterrupt(void (*isr)(void)) {
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
     cfa:	7913      	ldrb	r3, [r2, #4]
     cfc:	3310      	adds	r3, #16
     cfe:	481d      	ldr	r0, [pc, #116]	; (d74 <i2c_t3::setOpMode_(i2cStruct*, unsigned char, i2c_op_mode)+0x18c>)
     d00:	491b      	ldr	r1, [pc, #108]	; (d70 <i2c_t3::setOpMode_(i2cStruct*, unsigned char, i2c_op_mode)+0x188>)
     d02:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
     d06:	7912      	ldrb	r2, [r2, #4]
     d08:	1153      	asrs	r3, r2, #5
     d0a:	009b      	lsls	r3, r3, #2
     d0c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
     d10:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
     d14:	f002 021f 	and.w	r2, r2, #31
     d18:	2101      	movs	r1, #1
     d1a:	fa01 f202 	lsl.w	r2, r1, r2
     d1e:	601a      	str	r2, [r3, #0]
	/*************************************************/
	/**    Special Options / Features               **/
	/*************************************************/

	void interruptAtCompletion(void) {
		TCD->CSR |= DMA_TCD_CSR_INTMAJOR;
     d20:	f8d4 3264 	ldr.w	r3, [r4, #612]	; 0x264
     d24:	681a      	ldr	r2, [r3, #0]
     d26:	8b93      	ldrh	r3, [r2, #28]
     d28:	b29b      	uxth	r3, r3
     d2a:	f043 0302 	orr.w	r3, r3, #2
     d2e:	8393      	strh	r3, [r2, #28]
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint8_t *mux;
		mux = (volatile uint8_t *)&(DMAMUX0_CHCFG0) + channel;
     d30:	f8d4 3264 	ldr.w	r3, [r4, #612]	; 0x264
     d34:	791b      	ldrb	r3, [r3, #4]
     d36:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
     d3a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
		*mux = 0;
     d3e:	2200      	movs	r2, #0
     d40:	701a      	strb	r2, [r3, #0]
		*mux = (source & 63) | DMAMUX_ENABLE;
     d42:	2297      	movs	r2, #151	; 0x97
     d44:	701a      	strb	r2, [r3, #0]
                        i2c->DMA->attachInterrupt(i2c3_isr);
                        i2c->DMA->interruptAtCompletion();
                        i2c->DMA->triggerAtHardwareEvent(DMAMUX_SOURCE_I2C3);
                    }
                #endif
                i2c->activeDMA = I2C_DMA_OFF;
     d46:	2300      	movs	r3, #0
     d48:	f884 325a 	strb.w	r3, [r4, #602]	; 0x25a
                i2c->opMode = I2C_OP_MODE_DMA;
     d4c:	2302      	movs	r3, #2
     d4e:	f884 3248 	strb.w	r3, [r4, #584]	; 0x248
            }
        }
        else
            i2c->opMode = I2C_OP_MODE_ISR;
    }
    return 1;
     d52:	2001      	movs	r0, #1
     d54:	bd70      	pop	{r4, r5, r6, pc}
                i2c->activeDMA = I2C_DMA_OFF;
                i2c->opMode = I2C_OP_MODE_DMA;
            }
        }
        else
            i2c->opMode = I2C_OP_MODE_ISR;
     d56:	2001      	movs	r0, #1
     d58:	f884 0248 	strb.w	r0, [r4, #584]	; 0x248
     d5c:	bd70      	pop	{r4, r5, r6, pc}
// parameters:
//      opMode = I2C_OP_MODE_ISR, I2C_OP_MODE_DMA, I2C_OP_MODE_IMM
//
uint8_t i2c_t3::setOpMode_(struct i2cStruct* i2c, uint8_t bus, i2c_op_mode opMode)
{
    if(*(i2c->S) & I2C_S_BUSY) return 0; // return immediately if bus busy
     d5e:	2000      	movs	r0, #0
        }
        else
            i2c->opMode = I2C_OP_MODE_ISR;
    }
    return 1;
}
     d60:	4770      	bx	lr
            }
        }
        else
            i2c->opMode = I2C_OP_MODE_ISR;
    }
    return 1;
     d62:	2001      	movs	r0, #1
}
     d64:	bd70      	pop	{r4, r5, r6, pc}
     d66:	bf00      	nop
     d68:	e000e100 	.word	0xe000e100
     d6c:	00001ea1 	.word	0x00001ea1
     d70:	1fff8200 	.word	0x1fff8200
     d74:	00001eb1 	.word	0x00001eb1

00000d78 <i2c_t3::setRate_(i2cStruct*, unsigned long, unsigned long)>:
//        8          8        400k
//        4          4        200k
//        2          2        100k
//
void i2c_t3::setRate_(struct i2cStruct* i2c, uint32_t busFreq, uint32_t i2cFreq)
{
     d78:	b470      	push	{r4, r5, r6}
    int32_t target_div = ((busFreq/1000)<<8)/(i2cFreq/1000);
     d7a:	4c24      	ldr	r4, [pc, #144]	; (e0c <i2c_t3::setRate_(i2cStruct*, unsigned long, unsigned long)+0x94>)
     d7c:	fba4 3501 	umull	r3, r5, r4, r1
     d80:	09ad      	lsrs	r5, r5, #6
     d82:	022b      	lsls	r3, r5, #8
     d84:	fba4 2502 	umull	r2, r5, r4, r2
     d88:	09ad      	lsrs	r5, r5, #6
     d8a:	fbb3 f5f5 	udiv	r5, r3, r5
    size_t idx;
    // find closest divide ratio
    for(idx=0; idx < sizeof(i2c_div_num)/sizeof(i2c_div_num[0]) && (i2c_div_num[idx]<<8) <= target_div; idx++);
     d8e:	f5b5 5fa0 	cmp.w	r5, #5120	; 0x1400
     d92:	db1f      	blt.n	dd4 <i2c_t3::setRate_(i2cStruct*, unsigned long, unsigned long)+0x5c>
     d94:	4a1e      	ldr	r2, [pc, #120]	; (e10 <i2c_t3::setRate_(i2cStruct*, unsigned long, unsigned long)+0x98>)
     d96:	2301      	movs	r3, #1
     d98:	f852 4f04 	ldr.w	r4, [r2, #4]!
     d9c:	ebb5 2f04 	cmp.w	r5, r4, lsl #8
     da0:	db03      	blt.n	daa <i2c_t3::setRate_(i2cStruct*, unsigned long, unsigned long)+0x32>
     da2:	3301      	adds	r3, #1
     da4:	2b37      	cmp	r3, #55	; 0x37
     da6:	d1f7      	bne.n	d98 <i2c_t3::setRate_(i2cStruct*, unsigned long, unsigned long)+0x20>
     da8:	e000      	b.n	dac <i2c_t3::setRate_(i2cStruct*, unsigned long, unsigned long)+0x34>
    if(idx && abs(target_div-(i2c_div_num[idx-1]<<8)) <= abs(target_div-(i2c_div_num[idx]<<8))) idx--;
     daa:	b1a3      	cbz	r3, dd6 <i2c_t3::setRate_(i2cStruct*, unsigned long, unsigned long)+0x5e>
     dac:	1e5c      	subs	r4, r3, #1
     dae:	4e18      	ldr	r6, [pc, #96]	; (e10 <i2c_t3::setRate_(i2cStruct*, unsigned long, unsigned long)+0x98>)
     db0:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
     db4:	eba5 2202 	sub.w	r2, r5, r2, lsl #8
     db8:	2a00      	cmp	r2, #0
     dba:	bfb8      	it	lt
     dbc:	4252      	neglt	r2, r2
     dbe:	f856 6023 	ldr.w	r6, [r6, r3, lsl #2]
     dc2:	eba5 2506 	sub.w	r5, r5, r6, lsl #8
     dc6:	2d00      	cmp	r5, #0
     dc8:	bfb8      	it	lt
     dca:	426d      	neglt	r5, r5
     dcc:	42aa      	cmp	r2, r5
     dce:	bfd8      	it	le
     dd0:	4623      	movle	r3, r4
     dd2:	e000      	b.n	dd6 <i2c_t3::setRate_(i2cStruct*, unsigned long, unsigned long)+0x5e>
void i2c_t3::setRate_(struct i2cStruct* i2c, uint32_t busFreq, uint32_t i2cFreq)
{
    int32_t target_div = ((busFreq/1000)<<8)/(i2cFreq/1000);
    size_t idx;
    // find closest divide ratio
    for(idx=0; idx < sizeof(i2c_div_num)/sizeof(i2c_div_num[0]) && (i2c_div_num[idx]<<8) <= target_div; idx++);
     dd4:	2300      	movs	r3, #0
    if(idx && abs(target_div-(i2c_div_num[idx-1]<<8)) <= abs(target_div-(i2c_div_num[idx]<<8))) idx--;
    // Set divider to set rate
    *(i2c->F) = i2c_div_ratio[idx];
     dd6:	6842      	ldr	r2, [r0, #4]
     dd8:	4c0e      	ldr	r4, [pc, #56]	; (e14 <i2c_t3::setRate_(i2cStruct*, unsigned long, unsigned long)+0x9c>)
     dda:	5ce4      	ldrb	r4, [r4, r3]
     ddc:	7014      	strb	r4, [r2, #0]
    // save current rate setting
    i2c->currentRate = busFreq/i2c_div_num[idx];
     dde:	4a0c      	ldr	r2, [pc, #48]	; (e10 <i2c_t3::setRate_(i2cStruct*, unsigned long, unsigned long)+0x98>)
     de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     de4:	fbb1 f3f3 	udiv	r3, r1, r3
     de8:	f8c0 324c 	str.w	r3, [r0, #588]	; 0x24c

    // Set filter
    if(busFreq >= 48000000)
     dec:	4b0a      	ldr	r3, [pc, #40]	; (e18 <i2c_t3::setRate_(i2cStruct*, unsigned long, unsigned long)+0xa0>)
     dee:	4299      	cmp	r1, r3
     df0:	d903      	bls.n	dfa <i2c_t3::setRate_(i2cStruct*, unsigned long, unsigned long)+0x82>
        *(i2c->FLT) = 4;
     df2:	6983      	ldr	r3, [r0, #24]
     df4:	2204      	movs	r2, #4
     df6:	701a      	strb	r2, [r3, #0]
     df8:	e006      	b.n	e08 <i2c_t3::setRate_(i2cStruct*, unsigned long, unsigned long)+0x90>
    else
        *(i2c->FLT) = busFreq/12000000;
     dfa:	6983      	ldr	r3, [r0, #24]
     dfc:	4a07      	ldr	r2, [pc, #28]	; (e1c <i2c_t3::setRate_(i2cStruct*, unsigned long, unsigned long)+0xa4>)
     dfe:	fba2 2101 	umull	r2, r1, r2, r1
     e02:	f3c1 5107 	ubfx	r1, r1, #20, #8
     e06:	7019      	strb	r1, [r3, #0]
}
     e08:	bc70      	pop	{r4, r5, r6}
     e0a:	4770      	bx	lr
     e0c:	10624dd3 	.word	0x10624dd3
     e10:	00008aa4 	.word	0x00008aa4
     e14:	00008b80 	.word	0x00008b80
     e18:	02dc6bff 	.word	0x02dc6bff
     e1c:	165e9f81 	.word	0x165e9f81

00000e20 <i2c_t3::pinConfigure_(i2cStruct*, unsigned char, i2c_pins, i2c_pullup, unsigned char)>:
//
#define PIN_CONFIG_ALT(name,alt) uint32_t name = (pullup == I2C_PULLUP_EXT) ? (PORT_PCR_MUX(alt)|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE) \
                                                                            : (PORT_PCR_MUX(alt)|PORT_PCR_PE|PORT_PCR_PS)

uint8_t i2c_t3::pinConfigure_(struct i2cStruct* i2c, uint8_t bus, i2c_pins pins, i2c_pullup pullup, uint8_t reconfig)
{
     e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     e24:	f89d e020 	ldrb.w	lr, [sp, #32]
    uint8_t retval = 0;

    if(reconfig && (*(i2c->S) & I2C_S_BUSY)) return 0; // if reconfig return immediately if bus busy (otherwise assume initial setup)
     e28:	f1be 0f00 	cmp.w	lr, #0
     e2c:	d072      	beq.n	f14 <i2c_t3::pinConfigure_(i2cStruct*, unsigned char, i2c_pins, i2c_pullup, unsigned char)+0xf4>
     e2e:	68c4      	ldr	r4, [r0, #12]
     e30:	7824      	ldrb	r4, [r4, #0]
     e32:	f014 0f20 	tst.w	r4, #32
     e36:	d164      	bne.n	f02 <i2c_t3::pinConfigure_(i2cStruct*, unsigned char, i2c_pins, i2c_pullup, unsigned char)+0xe2>
     e38:	e06c      	b.n	f14 <i2c_t3::pinConfigure_(i2cStruct*, unsigned char, i2c_pins, i2c_pullup, unsigned char)+0xf4>

    // Verify new pin setting is valid
    //
    if(bus == 0)
    {
        switch(pins)
     e3a:	2a01      	cmp	r2, #1
     e3c:	d864      	bhi.n	f08 <i2c_t3::pinConfigure_(i2cStruct*, unsigned char, i2c_pins, i2c_pullup, unsigned char)+0xe8>
     e3e:	461c      	mov	r4, r3
     e40:	4615      	mov	r5, r2
     e42:	4689      	mov	r9, r1
     e44:	4680      	mov	r8, r0
    // and there will be no change to the configuration.
    //
    if(retval)
    {
        // If reconfig set, switch previous pins to non-I2C
        if(reconfig)
     e46:	f1be 0f00 	cmp.w	lr, #0
     e4a:	d032      	beq.n	eb2 <i2c_t3::pinConfigure_(i2cStruct*, unsigned char, i2c_pins, i2c_pullup, unsigned char)+0x92>
        {
            uint8_t old_mode = (i2c->currentPullup == I2C_PULLUP_EXT) ? INPUT : INPUT_PULLUP;
     e4c:	f890 324b 	ldrb.w	r3, [r0, #587]	; 0x24b
     e50:	2b00      	cmp	r3, #0
     e52:	bf0c      	ite	eq
     e54:	f04f 0a00 	moveq.w	sl, #0
     e58:	f04f 0a02 	movne.w	sl, #2
            switch(i2c->currentPins)
     e5c:	f890 324a 	ldrb.w	r3, [r0, #586]	; 0x24a
     e60:	2b03      	cmp	r3, #3
     e62:	d826      	bhi.n	eb2 <i2c_t3::pinConfigure_(i2cStruct*, unsigned char, i2c_pins, i2c_pullup, unsigned char)+0x92>
     e64:	e8df f003 	tbb	[pc, r3]
     e68:	1d140b02 	.word	0x1d140b02
            {
            case I2C_PINS_16_17:
                pinMode(17,old_mode);
     e6c:	4651      	mov	r1, sl
     e6e:	2011      	movs	r0, #17
     e70:	f001 f99a 	bl	21a8 <pinMode>
                pinMode(16,old_mode);
     e74:	4651      	mov	r1, sl
     e76:	2010      	movs	r0, #16
     e78:	f001 f996 	bl	21a8 <pinMode>
                break;
     e7c:	e019      	b.n	eb2 <i2c_t3::pinConfigure_(i2cStruct*, unsigned char, i2c_pins, i2c_pullup, unsigned char)+0x92>
            case I2C_PINS_18_19:
                pinMode(18,old_mode);
     e7e:	4651      	mov	r1, sl
     e80:	2012      	movs	r0, #18
     e82:	f001 f991 	bl	21a8 <pinMode>
                pinMode(19,old_mode);
     e86:	4651      	mov	r1, sl
     e88:	2013      	movs	r0, #19
     e8a:	f001 f98d 	bl	21a8 <pinMode>
                break;
     e8e:	e010      	b.n	eb2 <i2c_t3::pinConfigure_(i2cStruct*, unsigned char, i2c_pins, i2c_pullup, unsigned char)+0x92>
                pinMode(22,old_mode);
                break;
            #endif
            #if defined(__MK20DX256__) // 3.1/3.2
            case I2C_PINS_29_30:
                pinMode(30,old_mode);
     e90:	4651      	mov	r1, sl
     e92:	201e      	movs	r0, #30
     e94:	f001 f988 	bl	21a8 <pinMode>
                pinMode(29,old_mode);
     e98:	4651      	mov	r1, sl
     e9a:	201d      	movs	r0, #29
     e9c:	f001 f984 	bl	21a8 <pinMode>
                break;
     ea0:	e007      	b.n	eb2 <i2c_t3::pinConfigure_(i2cStruct*, unsigned char, i2c_pins, i2c_pullup, unsigned char)+0x92>
            case I2C_PINS_26_31:
                pinMode(31,old_mode);
     ea2:	4651      	mov	r1, sl
     ea4:	201f      	movs	r0, #31
     ea6:	f001 f97f 	bl	21a8 <pinMode>
                pinMode(26,old_mode);
     eaa:	4651      	mov	r1, sl
     eac:	201a      	movs	r0, #26
     eae:	f001 f97b 	bl	21a8 <pinMode>
            }
        }

        // Configure new pins
        //
        if(bus == 0)
     eb2:	f1b9 0f00 	cmp.w	r9, #0
     eb6:	d10d      	bne.n	ed4 <i2c_t3::pinConfigure_(i2cStruct*, unsigned char, i2c_pins, i2c_pullup, unsigned char)+0xb4>
        {
            switch(pins)
     eb8:	b115      	cbz	r5, ec0 <i2c_t3::pinConfigure_(i2cStruct*, unsigned char, i2c_pins, i2c_pullup, unsigned char)+0xa0>
     eba:	2d01      	cmp	r5, #1
     ebc:	d005      	beq.n	eca <i2c_t3::pinConfigure_(i2cStruct*, unsigned char, i2c_pins, i2c_pullup, unsigned char)+0xaa>
     ebe:	e009      	b.n	ed4 <i2c_t3::pinConfigure_(i2cStruct*, unsigned char, i2c_pins, i2c_pullup, unsigned char)+0xb4>
            {
            case I2C_PINS_16_17:
                CORE_PIN17_CONFIG = pinConfigAlt2;
     ec0:	4b21      	ldr	r3, [pc, #132]	; (f48 <i2c_t3::pinConfigure_(i2cStruct*, unsigned char, i2c_pins, i2c_pullup, unsigned char)+0x128>)
     ec2:	601e      	str	r6, [r3, #0]
                CORE_PIN16_CONFIG = pinConfigAlt2;
     ec4:	3b04      	subs	r3, #4
     ec6:	601e      	str	r6, [r3, #0]
                break;
     ec8:	e014      	b.n	ef4 <i2c_t3::pinConfigure_(i2cStruct*, unsigned char, i2c_pins, i2c_pullup, unsigned char)+0xd4>
            case I2C_PINS_18_19:
                CORE_PIN18_CONFIG = pinConfigAlt2;
     eca:	4b20      	ldr	r3, [pc, #128]	; (f4c <i2c_t3::pinConfigure_(i2cStruct*, unsigned char, i2c_pins, i2c_pullup, unsigned char)+0x12c>)
     ecc:	601e      	str	r6, [r3, #0]
                CORE_PIN19_CONFIG = pinConfigAlt2;
     ece:	3b04      	subs	r3, #4
     ed0:	601e      	str	r6, [r3, #0]
                break;
     ed2:	e00f      	b.n	ef4 <i2c_t3::pinConfigure_(i2cStruct*, unsigned char, i2c_pins, i2c_pullup, unsigned char)+0xd4>
            #endif
            default: break;
            }
        }
        #if I2C_BUS_NUM >= 2
            if(bus == 1)
     ed4:	f1b9 0f01 	cmp.w	r9, #1
     ed8:	d10c      	bne.n	ef4 <i2c_t3::pinConfigure_(i2cStruct*, unsigned char, i2c_pins, i2c_pullup, unsigned char)+0xd4>
            {
                switch(pins)
     eda:	2d02      	cmp	r5, #2
     edc:	d006      	beq.n	eec <i2c_t3::pinConfigure_(i2cStruct*, unsigned char, i2c_pins, i2c_pullup, unsigned char)+0xcc>
     ede:	2d03      	cmp	r5, #3
     ee0:	d108      	bne.n	ef4 <i2c_t3::pinConfigure_(i2cStruct*, unsigned char, i2c_pins, i2c_pullup, unsigned char)+0xd4>
                    CORE_PIN22_CONFIG = pinConfigAlt2;
                    break;
                #endif
                #if defined(__MK20DX256__) // 3.1/3.2
                case I2C_PINS_26_31:
                    CORE_PIN31_CONFIG = pinConfigAlt6;
     ee2:	4b1b      	ldr	r3, [pc, #108]	; (f50 <i2c_t3::pinConfigure_(i2cStruct*, unsigned char, i2c_pins, i2c_pullup, unsigned char)+0x130>)
     ee4:	601f      	str	r7, [r3, #0]
                    CORE_PIN26_CONFIG = pinConfigAlt6;
     ee6:	3304      	adds	r3, #4
     ee8:	601f      	str	r7, [r3, #0]
                    break;
     eea:	e003      	b.n	ef4 <i2c_t3::pinConfigure_(i2cStruct*, unsigned char, i2c_pins, i2c_pullup, unsigned char)+0xd4>
                case I2C_PINS_29_30:
                    CORE_PIN30_CONFIG = pinConfigAlt2;
     eec:	4b19      	ldr	r3, [pc, #100]	; (f54 <i2c_t3::pinConfigure_(i2cStruct*, unsigned char, i2c_pins, i2c_pullup, unsigned char)+0x134>)
     eee:	601e      	str	r6, [r3, #0]
                    CORE_PIN29_CONFIG = pinConfigAlt2;
     ef0:	3b04      	subs	r3, #4
     ef2:	601e      	str	r6, [r3, #0]
                }
            }
        #endif

        // Update settings
        i2c->currentPins = pins;
     ef4:	f888 524a 	strb.w	r5, [r8, #586]	; 0x24a
        i2c->currentPullup = pullup;
     ef8:	f888 424b 	strb.w	r4, [r8, #587]	; 0x24b
     efc:	2001      	movs	r0, #1
     efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

uint8_t i2c_t3::pinConfigure_(struct i2cStruct* i2c, uint8_t bus, i2c_pins pins, i2c_pullup pullup, uint8_t reconfig)
{
    uint8_t retval = 0;

    if(reconfig && (*(i2c->S) & I2C_S_BUSY)) return 0; // if reconfig return immediately if bus busy (otherwise assume initial setup)
     f02:	2000      	movs	r0, #0
     f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        // Update settings
        i2c->currentPins = pins;
        i2c->currentPullup = pullup;
    }

    return retval;
     f08:	2000      	movs	r0, #0
     f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     f0e:	2000      	movs	r0, #0
     f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

    if(reconfig && (*(i2c->S) & I2C_S_BUSY)) return 0; // if reconfig return immediately if bus busy (otherwise assume initial setup)

    // Create config settings
    //
    PIN_CONFIG_ALT(pinConfigAlt2,2);
     f14:	2b00      	cmp	r3, #0
     f16:	f240 2603 	movw	r6, #515	; 0x203
     f1a:	bf08      	it	eq
     f1c:	f44f 7619 	moveq.w	r6, #612	; 0x264
     f20:	f240 6403 	movw	r4, #1539	; 0x603
     f24:	f240 6764 	movw	r7, #1636	; 0x664
     f28:	2b00      	cmp	r3, #0
     f2a:	bf18      	it	ne
     f2c:	4627      	movne	r7, r4
        PIN_CONFIG_ALT(pinConfigAlt7,7);
    #endif

    // Verify new pin setting is valid
    //
    if(bus == 0)
     f2e:	2900      	cmp	r1, #0
     f30:	d083      	beq.n	e3a <i2c_t3::pinConfigure_(i2cStruct*, unsigned char, i2c_pins, i2c_pullup, unsigned char)+0x1a>
        #endif
        default: break;
        }
    }
    #if I2C_BUS_NUM >= 2
        if(bus == 1)
     f32:	2901      	cmp	r1, #1
     f34:	d002      	beq.n	f3c <i2c_t3::pinConfigure_(i2cStruct*, unsigned char, i2c_pins, i2c_pullup, unsigned char)+0x11c>
        // Update settings
        i2c->currentPins = pins;
        i2c->currentPullup = pullup;
    }

    return retval;
     f36:	2000      	movs	r0, #0
     f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        }
    }
    #if I2C_BUS_NUM >= 2
        if(bus == 1)
        {
            switch(pins)
     f3c:	1e94      	subs	r4, r2, #2
     f3e:	2c01      	cmp	r4, #1
     f40:	f67f af7d 	bls.w	e3e <i2c_t3::pinConfigure_(i2cStruct*, unsigned char, i2c_pins, i2c_pullup, unsigned char)+0x1e>
     f44:	e7e3      	b.n	f0e <i2c_t3::pinConfigure_(i2cStruct*, unsigned char, i2c_pins, i2c_pullup, unsigned char)+0xee>
     f46:	bf00      	nop
     f48:	4004a004 	.word	0x4004a004
     f4c:	4004a00c 	.word	0x4004a00c
     f50:	4004d000 	.word	0x4004d000
     f54:	4004b02c 	.word	0x4004b02c

00000f58 <i2c_t3::begin_(i2cStruct*, unsigned char, i2c_mode, unsigned char, unsigned char, i2c_pins, i2c_pullup, unsigned long, i2c_op_mode)>:
//             I2C_RATE_2800, I2C_RATE_3000
//      opMode = I2C_OP_MODE_IMM, I2C_OP_MODE_ISR, I2C_OP_MODE_DMA (ignored for Slave mode, defaults to ISR)
//
void i2c_t3::begin_(struct i2cStruct* i2c, uint8_t bus, i2c_mode mode, uint8_t address1, uint8_t address2,
                    i2c_pins pins, i2c_pullup pullup, uint32_t rate, i2c_op_mode opMode)
{
     f58:	b570      	push	{r4, r5, r6, lr}
     f5a:	b082      	sub	sp, #8
     f5c:	4604      	mov	r4, r0
     f5e:	f89d 6018 	ldrb.w	r6, [sp, #24]
    // Enable I2C internal clock
    if(bus == 0)
     f62:	460d      	mov	r5, r1
     f64:	b929      	cbnz	r1, f72 <i2c_t3::begin_(i2cStruct*, unsigned char, i2c_mode, unsigned char, unsigned char, i2c_pins, i2c_pullup, unsigned long, i2c_op_mode)+0x1a>
        SIM_SCGC4 |= SIM_SCGC4_I2C0;
     f66:	4830      	ldr	r0, [pc, #192]	; (1028 <i2c_t3::begin_(i2cStruct*, unsigned char, i2c_mode, unsigned char, unsigned char, i2c_pins, i2c_pullup, unsigned long, i2c_op_mode)+0xd0>)
     f68:	6801      	ldr	r1, [r0, #0]
     f6a:	f041 0140 	orr.w	r1, r1, #64	; 0x40
     f6e:	6001      	str	r1, [r0, #0]
     f70:	e006      	b.n	f80 <i2c_t3::begin_(i2cStruct*, unsigned char, i2c_mode, unsigned char, unsigned char, i2c_pins, i2c_pullup, unsigned long, i2c_op_mode)+0x28>
    #if I2C_BUS_NUM >= 2
        if(bus == 1)
     f72:	2901      	cmp	r1, #1
     f74:	d104      	bne.n	f80 <i2c_t3::begin_(i2cStruct*, unsigned char, i2c_mode, unsigned char, unsigned char, i2c_pins, i2c_pullup, unsigned long, i2c_op_mode)+0x28>
            SIM_SCGC4 |= SIM_SCGC4_I2C1;
     f76:	482c      	ldr	r0, [pc, #176]	; (1028 <i2c_t3::begin_(i2cStruct*, unsigned char, i2c_mode, unsigned char, unsigned char, i2c_pins, i2c_pullup, unsigned long, i2c_op_mode)+0xd0>)
     f78:	6801      	ldr	r1, [r0, #0]
     f7a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
     f7e:	6001      	str	r1, [r0, #0]
    #if I2C_BUS_NUM >= 4
        if(bus == 3)
            SIM_SCGC1 |= SIM_SCGC1_I2C3;
    #endif

    i2c->currentMode = mode; // Set mode
     f80:	f884 2249 	strb.w	r2, [r4, #585]	; 0x249
    i2c->currentStatus = I2C_WAITING; // reset status
     f84:	2100      	movs	r1, #0
     f86:	f884 1251 	strb.w	r1, [r4, #593]	; 0x251

    // Set Master/Slave address (zeroed in Master to prevent accidental Rx when setup is changed dynamically)
    if(i2c->currentMode == I2C_MASTER)
     f8a:	b93a      	cbnz	r2, f9c <i2c_t3::begin_(i2cStruct*, unsigned char, i2c_mode, unsigned char, unsigned char, i2c_pins, i2c_pullup, unsigned long, i2c_op_mode)+0x44>
    {
        *(i2c->C2) = I2C_C2_HDRS; // Set high drive select
     f8c:	6963      	ldr	r3, [r4, #20]
     f8e:	2220      	movs	r2, #32
     f90:	701a      	strb	r2, [r3, #0]
        *(i2c->A1) = 0;
     f92:	6822      	ldr	r2, [r4, #0]
     f94:	7011      	strb	r1, [r2, #0]
        *(i2c->RA) = 0;
     f96:	69e2      	ldr	r2, [r4, #28]
     f98:	7011      	strb	r1, [r2, #0]
     f9a:	e011      	b.n	fc0 <i2c_t3::begin_(i2cStruct*, unsigned char, i2c_mode, unsigned char, unsigned char, i2c_pins, i2c_pullup, unsigned long, i2c_op_mode)+0x68>
    }
    else
    {
        *(i2c->C2) = (address2) ? (I2C_C2_HDRS|I2C_C2_RMEN) // Set high drive select and range-match enable
     f9c:	6962      	ldr	r2, [r4, #20]
                                : I2C_C2_HDRS;              // Set high drive select
     f9e:	2e00      	cmp	r6, #0
     fa0:	d13a      	bne.n	1018 <i2c_t3::begin_(i2cStruct*, unsigned char, i2c_mode, unsigned char, unsigned char, i2c_pins, i2c_pullup, unsigned long, i2c_op_mode)+0xc0>
     fa2:	e030      	b.n	1006 <i2c_t3::begin_(i2cStruct*, unsigned char, i2c_mode, unsigned char, unsigned char, i2c_pins, i2c_pullup, unsigned long, i2c_op_mode)+0xae>
        // set Slave address, if two addresses are given, setup range and put lower address in A1, higher in RA
        *(i2c->A1) = (address2) ? ((address1 < address2) ? (address1<<1) : (address2<<1))
                                : (address1<<1);
     fa4:	005b      	lsls	r3, r3, #1
     fa6:	b2db      	uxtb	r3, r3
     fa8:	7013      	strb	r3, [r2, #0]
        *(i2c->RA) = (address2) ? ((address1 < address2) ? (address2<<1) : (address1<<1))
     faa:	69e2      	ldr	r2, [r4, #28]
                                : 0;
     fac:	0073      	lsls	r3, r6, #1
     fae:	b2db      	uxtb	r3, r3
     fb0:	e005      	b.n	fbe <i2c_t3::begin_(i2cStruct*, unsigned char, i2c_mode, unsigned char, unsigned char, i2c_pins, i2c_pullup, unsigned long, i2c_op_mode)+0x66>
    {
        *(i2c->C2) = (address2) ? (I2C_C2_HDRS|I2C_C2_RMEN) // Set high drive select and range-match enable
                                : I2C_C2_HDRS;              // Set high drive select
        // set Slave address, if two addresses are given, setup range and put lower address in A1, higher in RA
        *(i2c->A1) = (address2) ? ((address1 < address2) ? (address1<<1) : (address2<<1))
                                : (address1<<1);
     fb2:	0076      	lsls	r6, r6, #1
     fb4:	b2f6      	uxtb	r6, r6
     fb6:	7016      	strb	r6, [r2, #0]
        *(i2c->RA) = (address2) ? ((address1 < address2) ? (address2<<1) : (address1<<1))
     fb8:	69e2      	ldr	r2, [r4, #28]
                                : 0;
     fba:	005b      	lsls	r3, r3, #1
     fbc:	b2db      	uxtb	r3, r3
     fbe:	7013      	strb	r3, [r2, #0]

    // Setup pins and options (note: does not "unset" unused pins if changed).  As noted in
    // original TwoWire.cpp, internal 3.0/3.1 pullup is strong (about 190 ohms), but it can
    // work if other devices on bus have strong enough pulldown devices (usually true).
    //
    pinConfigure_(i2c, bus, pins, pullup, 0);
     fc0:	2300      	movs	r3, #0
     fc2:	9300      	str	r3, [sp, #0]
     fc4:	f89d 3020 	ldrb.w	r3, [sp, #32]
     fc8:	f89d 201c 	ldrb.w	r2, [sp, #28]
     fcc:	4629      	mov	r1, r5
     fce:	4620      	mov	r0, r4
     fd0:	f7ff ff26 	bl	e20 <i2c_t3::pinConfigure_(i2cStruct*, unsigned char, i2c_pins, i2c_pullup, unsigned char)>
        if(bus == 1)
            setRate_(i2c, (uint32_t)F_CPU, rate); // LC Wire1 bus uses system clock (F_CPU) instead of bus clock (F_BUS)
        else
            setRate_(i2c, (uint32_t)F_BUS, rate);
    #else
        setRate_(i2c, (uint32_t)F_BUS, rate);
     fd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
     fd6:	4915      	ldr	r1, [pc, #84]	; (102c <i2c_t3::begin_(i2cStruct*, unsigned char, i2c_mode, unsigned char, unsigned char, i2c_pins, i2c_pullup, unsigned long, i2c_op_mode)+0xd4>)
     fd8:	4620      	mov	r0, r4
     fda:	f7ff fecd 	bl	d78 <i2c_t3::setRate_(i2cStruct*, unsigned long, unsigned long)>
    #endif

    // Set config registers and operating mode
    setOpMode_(i2c, bus, opMode);
     fde:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
     fe2:	4629      	mov	r1, r5
     fe4:	4620      	mov	r0, r4
     fe6:	f7ff fdff 	bl	be8 <i2c_t3::setOpMode_(i2cStruct*, unsigned char, i2c_op_mode)>
    if(i2c->currentMode == I2C_MASTER)
     fea:	f894 3249 	ldrb.w	r3, [r4, #585]	; 0x249
     fee:	b91b      	cbnz	r3, ff8 <i2c_t3::begin_(i2cStruct*, unsigned char, i2c_mode, unsigned char, unsigned char, i2c_pins, i2c_pullup, unsigned long, i2c_op_mode)+0xa0>
        *(i2c->C1) = I2C_C1_IICEN; // Master - enable I2C (hold in Rx mode, intr disabled)
     ff0:	68a3      	ldr	r3, [r4, #8]
     ff2:	2280      	movs	r2, #128	; 0x80
     ff4:	701a      	strb	r2, [r3, #0]
     ff6:	e002      	b.n	ffe <i2c_t3::begin_(i2cStruct*, unsigned char, i2c_mode, unsigned char, unsigned char, i2c_pins, i2c_pullup, unsigned long, i2c_op_mode)+0xa6>
    else
        *(i2c->C1) = I2C_C1_IICEN|I2C_C1_IICIE; // Slave - enable I2C and interrupts
     ff8:	68a3      	ldr	r3, [r4, #8]
     ffa:	22c0      	movs	r2, #192	; 0xc0
     ffc:	701a      	strb	r2, [r3, #0]

    i2c->resetBusCount = 0;   // bboyes
     ffe:	2300      	movs	r3, #0
    1000:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
}
    1004:	e00e      	b.n	1024 <i2c_t3::begin_(i2cStruct*, unsigned char, i2c_mode, unsigned char, unsigned char, i2c_pins, i2c_pullup, unsigned long, i2c_op_mode)+0xcc>
        *(i2c->RA) = 0;
    }
    else
    {
        *(i2c->C2) = (address2) ? (I2C_C2_HDRS|I2C_C2_RMEN) // Set high drive select and range-match enable
                                : I2C_C2_HDRS;              // Set high drive select
    1006:	2120      	movs	r1, #32
    1008:	7011      	strb	r1, [r2, #0]
        // set Slave address, if two addresses are given, setup range and put lower address in A1, higher in RA
        *(i2c->A1) = (address2) ? ((address1 < address2) ? (address1<<1) : (address2<<1))
    100a:	6822      	ldr	r2, [r4, #0]
                                : (address1<<1);
    100c:	005b      	lsls	r3, r3, #1
    100e:	b2db      	uxtb	r3, r3
    1010:	7013      	strb	r3, [r2, #0]
        *(i2c->RA) = (address2) ? ((address1 < address2) ? (address2<<1) : (address1<<1))
    1012:	69e2      	ldr	r2, [r4, #28]
                                : 0;
    1014:	2300      	movs	r3, #0
    1016:	e7d2      	b.n	fbe <i2c_t3::begin_(i2cStruct*, unsigned char, i2c_mode, unsigned char, unsigned char, i2c_pins, i2c_pullup, unsigned long, i2c_op_mode)+0x66>
        *(i2c->RA) = 0;
    }
    else
    {
        *(i2c->C2) = (address2) ? (I2C_C2_HDRS|I2C_C2_RMEN) // Set high drive select and range-match enable
                                : I2C_C2_HDRS;              // Set high drive select
    1018:	2128      	movs	r1, #40	; 0x28
    101a:	7011      	strb	r1, [r2, #0]
        // set Slave address, if two addresses are given, setup range and put lower address in A1, higher in RA
        *(i2c->A1) = (address2) ? ((address1 < address2) ? (address1<<1) : (address2<<1))
    101c:	6822      	ldr	r2, [r4, #0]
                                : (address1<<1);
    101e:	429e      	cmp	r6, r3
    1020:	d8c0      	bhi.n	fa4 <i2c_t3::begin_(i2cStruct*, unsigned char, i2c_mode, unsigned char, unsigned char, i2c_pins, i2c_pullup, unsigned long, i2c_op_mode)+0x4c>
    1022:	e7c6      	b.n	fb2 <i2c_t3::begin_(i2cStruct*, unsigned char, i2c_mode, unsigned char, unsigned char, i2c_pins, i2c_pullup, unsigned long, i2c_op_mode)+0x5a>
        *(i2c->C1) = I2C_C1_IICEN; // Master - enable I2C (hold in Rx mode, intr disabled)
    else
        *(i2c->C1) = I2C_C1_IICEN|I2C_C1_IICIE; // Slave - enable I2C and interrupts

    i2c->resetBusCount = 0;   // bboyes
}
    1024:	b002      	add	sp, #8
    1026:	bd70      	pop	{r4, r5, r6, pc}
    1028:	40048034 	.word	0x40048034
    102c:	02dc6c00 	.word	0x02dc6c00

00001030 <i2c_t3::resetBus_(i2cStruct*, unsigned char)>:
//             a hung bus in which a Slave device missed some clocks and remains stuck outputting
//             a low signal on SDA (thereby preventing START/STOP signaling).
// return: none
//
void i2c_t3::resetBus_(struct i2cStruct* i2c, uint8_t bus)
{
    1030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1034:	b083      	sub	sp, #12
    uint8_t scl=0, sda=0, count=0;

    switch(i2c->currentPins)
    1036:	f890 324a 	ldrb.w	r3, [r0, #586]	; 0x24a
    103a:	2b03      	cmp	r3, #3
    103c:	d862      	bhi.n	1104 <L_1477_delayMicroseconds+0x4e>
    103e:	e8df f003 	tbb	[pc, r3]
    1042:	0240      	.short	0x0240
    1044:	0644      	.short	0x0644
    {
    case I2C_PINS_16_17: sda = 17; scl = 16; break;
    case I2C_PINS_18_19: sda = 18; scl = 19; break;
    1046:	f04f 0812 	mov.w	r8, #18
    104a:	2513      	movs	r5, #19
    104c:	e040      	b.n	10d0 <L_1477_delayMicroseconds+0x1a>
    #if defined(__MKL26Z64__) // LC
    case I2C_PINS_22_23: sda = 23; scl = 22; break;
    #endif
    #if defined(__MK20DX256__) // 3.1/3.2
    case I2C_PINS_29_30: sda = 30; scl = 29; break;
    case I2C_PINS_26_31: sda = 31; scl = 26; break;
    104e:	f04f 081f 	mov.w	r8, #31
    1052:	251a      	movs	r5, #26
    1054:	e03c      	b.n	10d0 <L_1477_delayMicroseconds+0x1a>
        // change pin mux to digital I/O
        pinMode(sda,((i2c->currentPullup == I2C_PULLUP_EXT) ? INPUT : INPUT_PULLUP));
        digitalWrite(scl,HIGH);
        pinMode(scl,OUTPUT);

        while(digitalRead(sda) == 0 && count++ < 10)
    1056:	4640      	mov	r0, r8
    1058:	f001 f898 	bl	218c <digitalRead>
    105c:	b990      	cbnz	r0, 1084 <L_1428_delayMicroseconds+0x6>
    105e:	3c01      	subs	r4, #1
    1060:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    1064:	d00e      	beq.n	1084 <L_1428_delayMicroseconds+0x6>
        {
            digitalWrite(scl,LOW);
    1066:	4651      	mov	r1, sl
    1068:	4628      	mov	r0, r5
    106a:	f001 f86b 	bl	2144 <digitalWrite>
#else
		"subs   %0, #1"				"\n\t"
#endif
		"bne    L_%=_delayMicroseconds"		"\n"
		: "+r" (n) :
	);
    106e:	4633      	mov	r3, r6

00001070 <L_1414_delayMicroseconds>:
    1070:	3b01      	subs	r3, #1
    1072:	d1fd      	bne.n	1070 <L_1414_delayMicroseconds>
            delayMicroseconds(5);       // 10us period == 100kHz
            digitalWrite(scl,HIGH);
    1074:	4649      	mov	r1, r9
    1076:	4628      	mov	r0, r5
    1078:	f001 f864 	bl	2144 <digitalWrite>
    107c:	4633      	mov	r3, r6

0000107e <L_1428_delayMicroseconds>:
    107e:	3b01      	subs	r3, #1
    1080:	d1fd      	bne.n	107e <L_1428_delayMicroseconds>
    1082:	e7e8      	b.n	1056 <i2c_t3::resetBus_(i2cStruct*, unsigned char)+0x26>
            delayMicroseconds(5);
        }

        // reconfigure pins for I2C
        pinConfigure_(i2c, bus, i2c->currentPins, i2c->currentPullup, 0);
    1084:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
    1088:	f897 224a 	ldrb.w	r2, [r7, #586]	; 0x24a
    108c:	2100      	movs	r1, #0
    108e:	9100      	str	r1, [sp, #0]
    1090:	4659      	mov	r1, fp
    1092:	4638      	mov	r0, r7
    1094:	f7ff fec4 	bl	e20 <i2c_t3::pinConfigure_(i2cStruct*, unsigned char, i2c_pins, i2c_pullup, unsigned char)>

        // reset config and status
        if(*(i2c->S) & 0x7F) // reset config if any residual status bits are set
    1098:	68fb      	ldr	r3, [r7, #12]
    109a:	781b      	ldrb	r3, [r3, #0]
    109c:	f013 0f7f 	tst.w	r3, #127	; 0x7f
    10a0:	d00b      	beq.n	10ba <L_1477_delayMicroseconds+0x4>
        {
            *(i2c->C1) = 0x00; // disable I2C, intr disabled
    10a2:	68bb      	ldr	r3, [r7, #8]
    10a4:	2200      	movs	r2, #0
    10a6:	701a      	strb	r2, [r3, #0]
    10a8:	2350      	movs	r3, #80	; 0x50
    10aa:	461a      	mov	r2, r3

000010ac <L_1465_delayMicroseconds>:
    10ac:	3a01      	subs	r2, #1
    10ae:	d1fd      	bne.n	10ac <L_1465_delayMicroseconds>
            delayMicroseconds(5);
            *(i2c->C1) = I2C_C1_IICEN; // enable I2C, intr disabled, Rx mode
    10b0:	68ba      	ldr	r2, [r7, #8]
    10b2:	2180      	movs	r1, #128	; 0x80
    10b4:	7011      	strb	r1, [r2, #0]

000010b6 <L_1477_delayMicroseconds>:
    10b6:	3b01      	subs	r3, #1
    10b8:	d1fd      	bne.n	10b6 <L_1477_delayMicroseconds>
            delayMicroseconds(5);
        }
        i2c->currentStatus = I2C_WAITING;
    10ba:	2300      	movs	r3, #0
    10bc:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
    }
}
    10c0:	e020      	b.n	1104 <L_1477_delayMicroseconds+0x4e>
{
    uint8_t scl=0, sda=0, count=0;

    switch(i2c->currentPins)
    {
    case I2C_PINS_16_17: sda = 17; scl = 16; break;
    10c2:	f04f 0811 	mov.w	r8, #17
    10c6:	2510      	movs	r5, #16
    10c8:	e002      	b.n	10d0 <L_1477_delayMicroseconds+0x1a>
    #endif
    #if defined(__MKL26Z64__) // LC
    case I2C_PINS_22_23: sda = 23; scl = 22; break;
    #endif
    #if defined(__MK20DX256__) // 3.1/3.2
    case I2C_PINS_29_30: sda = 30; scl = 29; break;
    10ca:	f04f 081e 	mov.w	r8, #30
    10ce:	251d      	movs	r5, #29
    10d0:	468b      	mov	fp, r1
    10d2:	4607      	mov	r7, r0
    #endif
    }
    if(sda && scl)
    {
        // change pin mux to digital I/O
        pinMode(sda,((i2c->currentPullup == I2C_PULLUP_EXT) ? INPUT : INPUT_PULLUP));
    10d4:	f890 324b 	ldrb.w	r3, [r0, #587]	; 0x24b
    10d8:	2b00      	cmp	r3, #0
    10da:	bf0c      	ite	eq
    10dc:	2100      	moveq	r1, #0
    10de:	2102      	movne	r1, #2
    10e0:	4640      	mov	r0, r8
    10e2:	f001 f861 	bl	21a8 <pinMode>
        digitalWrite(scl,HIGH);
    10e6:	2101      	movs	r1, #1
    10e8:	4628      	mov	r0, r5
    10ea:	f001 f82b 	bl	2144 <digitalWrite>
        pinMode(scl,OUTPUT);
    10ee:	2101      	movs	r1, #1
    10f0:	4628      	mov	r0, r5
    10f2:	f001 f859 	bl	21a8 <pinMode>
    10f6:	240b      	movs	r4, #11

        while(digitalRead(sda) == 0 && count++ < 10)
        {
            digitalWrite(scl,LOW);
    10f8:	f04f 0a00 	mov.w	sl, #0
    10fc:	2650      	movs	r6, #80	; 0x50
            delayMicroseconds(5);       // 10us period == 100kHz
            digitalWrite(scl,HIGH);
    10fe:	f04f 0901 	mov.w	r9, #1
    1102:	e7a8      	b.n	1056 <i2c_t3::resetBus_(i2cStruct*, unsigned char)+0x26>
            *(i2c->C1) = I2C_C1_IICEN; // enable I2C, intr disabled, Rx mode
            delayMicroseconds(5);
        }
        i2c->currentStatus = I2C_WAITING;
    }
}
    1104:	b003      	add	sp, #12
    1106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    110a:	bf00      	nop

0000110c <i2c_t3::acquireBus_(i2cStruct*, unsigned char, unsigned long, unsigned char&)>:
// parameters:
//      timeout = timeout in microseconds
//      forceImm = flag to indicate if immediate mode is required
//
uint8_t i2c_t3::acquireBus_(struct i2cStruct* i2c, uint8_t bus, uint32_t timeout, uint8_t& forceImm)
{
    110c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1110:	4604      	mov	r4, r0
    1112:	460e      	mov	r6, r1
    1114:	4615      	mov	r5, r2
    1116:	461f      	mov	r7, r3
class elapsedMicros
{
private:
	unsigned long us;
public:
	elapsedMicros(void) { us = micros(); }
    1118:	f001 f906 	bl	2328 <micros>
    elapsedMicros deltaT;
    int irqPriority, currPriority;

    // update timeout
    timeout = (timeout == 0) ? i2c->defTimeout : timeout;
    111c:	b90d      	cbnz	r5, 1122 <i2c_t3::acquireBus_(i2cStruct*, unsigned char, unsigned long, unsigned char&)+0x16>
    111e:	f8d4 5268 	ldr.w	r5, [r4, #616]	; 0x268
	elapsedMicros(unsigned long val) { us = micros() - val; }
	elapsedMicros(const elapsedMicros &orig) { us = orig.us; }
	operator unsigned long () const { return micros() - us; }
	elapsedMicros & operator = (const elapsedMicros &rhs) { us = rhs.us; return *this; }
	elapsedMicros & operator = (unsigned long val) { us = micros() - val; return *this; }
    1122:	f001 f901 	bl	2328 <micros>
    1126:	4680      	mov	r8, r0

    // TODO may need to check bus busy before issuing START if multi-master

    // start timer, then take control of the bus
    deltaT = 0;
    if(*(i2c->C1) & I2C_C1_MST)
    1128:	68a3      	ldr	r3, [r4, #8]
    112a:	781a      	ldrb	r2, [r3, #0]
    112c:	f012 0f20 	tst.w	r2, #32
    1130:	d002      	beq.n	1138 <i2c_t3::acquireBus_(i2cStruct*, unsigned char, unsigned long, unsigned char&)+0x2c>
    {
        // we are already the bus master, so send a repeated start
        *(i2c->C1) = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_RSTA | I2C_C1_TX;
    1132:	22b4      	movs	r2, #180	; 0xb4
    1134:	701a      	strb	r2, [r3, #0]
    1136:	e039      	b.n	11ac <i2c_t3::acquireBus_(i2cStruct*, unsigned char, unsigned long, unsigned char&)+0xa0>
    }
    else
    {
        while(timeout == 0 || deltaT < timeout)
    1138:	b12d      	cbz	r5, 1146 <i2c_t3::acquireBus_(i2cStruct*, unsigned char, unsigned long, unsigned char&)+0x3a>
	unsigned long us;
public:
	elapsedMicros(void) { us = micros(); }
	elapsedMicros(unsigned long val) { us = micros() - val; }
	elapsedMicros(const elapsedMicros &orig) { us = orig.us; }
	operator unsigned long () const { return micros() - us; }
    113a:	f001 f8f5 	bl	2328 <micros>
    113e:	ebc8 0000 	rsb	r0, r8, r0
    1142:	4285      	cmp	r5, r0
    1144:	d90a      	bls.n	115c <i2c_t3::acquireBus_(i2cStruct*, unsigned char, unsigned long, unsigned char&)+0x50>
        {
            // we are not currently the bus master, so check if bus ready
            if(!(*(i2c->S) & I2C_S_BUSY))
    1146:	68e3      	ldr	r3, [r4, #12]
    1148:	781b      	ldrb	r3, [r3, #0]
    114a:	f013 0f20 	tst.w	r3, #32
    114e:	d1f3      	bne.n	1138 <i2c_t3::acquireBus_(i2cStruct*, unsigned char, unsigned long, unsigned char&)+0x2c>
            {
                // become the bus master in transmit mode (send start)
                i2c->currentMode = I2C_MASTER;
    1150:	2300      	movs	r3, #0
    1152:	f884 3249 	strb.w	r3, [r4, #585]	; 0x249
                *(i2c->C1) = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    1156:	68a3      	ldr	r3, [r4, #8]
    1158:	22b0      	movs	r2, #176	; 0xb0
    115a:	701a      	strb	r2, [r3, #0]
                break;
            }
        }
        #if defined(I2C_AUTO_RETRY)
            // if not master and auto-retry set, then reset bus and try one last time
            if(!(*(i2c->C1) & I2C_C1_MST))
    115c:	68a3      	ldr	r3, [r4, #8]
    115e:	781b      	ldrb	r3, [r3, #0]
    1160:	f013 0f20 	tst.w	r3, #32
    1164:	d116      	bne.n	1194 <i2c_t3::acquireBus_(i2cStruct*, unsigned char, unsigned long, unsigned char&)+0x88>
            {
                resetBus_(i2c,bus);
    1166:	4631      	mov	r1, r6
    1168:	4620      	mov	r0, r4
    116a:	f7ff ff61 	bl	1030 <i2c_t3::resetBus_(i2cStruct*, unsigned char)>
                if ((i2c->resetBusCount) < UINT32_MAX) i2c->resetBusCount++;   // bboyes max test added 2017Jun20
    116e:	f8d4 326c 	ldr.w	r3, [r4, #620]	; 0x26c
    1172:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    1176:	bf1c      	itt	ne
    1178:	3301      	addne	r3, #1
    117a:	f8c4 326c 	strne.w	r3, [r4, #620]	; 0x26c
                if(!(*(i2c->S) & I2C_S_BUSY))
    117e:	68e3      	ldr	r3, [r4, #12]
    1180:	781b      	ldrb	r3, [r3, #0]
    1182:	f013 0f20 	tst.w	r3, #32
    1186:	d105      	bne.n	1194 <i2c_t3::acquireBus_(i2cStruct*, unsigned char, unsigned long, unsigned char&)+0x88>
                {
                    // become the bus master in transmit mode (send start)
                    i2c->currentMode = I2C_MASTER;
    1188:	2300      	movs	r3, #0
    118a:	f884 3249 	strb.w	r3, [r4, #585]	; 0x249
                    *(i2c->C1) = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    118e:	68a3      	ldr	r3, [r4, #8]
    1190:	22b0      	movs	r2, #176	; 0xb0
    1192:	701a      	strb	r2, [r3, #0]
                }
            }
        #endif
        // check if not master
        if(!(*(i2c->C1) & I2C_C1_MST))
    1194:	68a3      	ldr	r3, [r4, #8]
    1196:	781b      	ldrb	r3, [r3, #0]
    1198:	f003 0320 	and.w	r3, r3, #32
    119c:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    11a0:	b923      	cbnz	r3, 11ac <i2c_t3::acquireBus_(i2cStruct*, unsigned char, unsigned long, unsigned char&)+0xa0>
        {
            i2c->currentStatus = I2C_TIMEOUT; // bus not acquired, mark as timeout
    11a2:	2304      	movs	r3, #4
    11a4:	f884 3251 	strb.w	r3, [r4, #593]	; 0x251
            return 0;
    11a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
    }

    // For ISR operation, check if current routine has higher priority than I2C IRQ, and if so
    // either escalate priority of I2C IRQ or send I2C using immediate mode
    if(i2c->opMode == I2C_OP_MODE_ISR || i2c->opMode == I2C_OP_MODE_DMA)
    11ac:	f894 3248 	ldrb.w	r3, [r4, #584]	; 0x248
    11b0:	3b01      	subs	r3, #1
    11b2:	b2db      	uxtb	r3, r3
    11b4:	2b01      	cmp	r3, #1
    11b6:	d831      	bhi.n	121c <i2c_t3::acquireBus_(i2cStruct*, unsigned char, unsigned long, unsigned char&)+0x110>
    {
        currPriority = nvic_execution_priority();
    11b8:	f000 ff48 	bl	204c <nvic_execution_priority>
        switch(bus)
    11bc:	b116      	cbz	r6, 11c4 <i2c_t3::acquireBus_(i2cStruct*, unsigned char, unsigned long, unsigned char&)+0xb8>
    11be:	2e01      	cmp	r6, #1
    11c0:	d003      	beq.n	11ca <i2c_t3::acquireBus_(i2cStruct*, unsigned char, unsigned long, unsigned char&)+0xbe>
    11c2:	e005      	b.n	11d0 <i2c_t3::acquireBus_(i2cStruct*, unsigned char, unsigned long, unsigned char&)+0xc4>
        {
        case 0:  irqPriority = NVIC_GET_PRIORITY(IRQ_I2C0); break;
    11c4:	4b18      	ldr	r3, [pc, #96]	; (1228 <i2c_t3::acquireBus_(i2cStruct*, unsigned char, unsigned long, unsigned char&)+0x11c>)
    11c6:	781b      	ldrb	r3, [r3, #0]
    11c8:	e004      	b.n	11d4 <i2c_t3::acquireBus_(i2cStruct*, unsigned char, unsigned long, unsigned char&)+0xc8>
        #if defined(__MKL26Z64__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) // LC/3.1/3.2/3.5/3.6
        case 1:  irqPriority = NVIC_GET_PRIORITY(IRQ_I2C1); break;
    11ca:	4b18      	ldr	r3, [pc, #96]	; (122c <i2c_t3::acquireBus_(i2cStruct*, unsigned char, unsigned long, unsigned char&)+0x120>)
    11cc:	781b      	ldrb	r3, [r3, #0]
    11ce:	e001      	b.n	11d4 <i2c_t3::acquireBus_(i2cStruct*, unsigned char, unsigned long, unsigned char&)+0xc8>
        case 2:  irqPriority = NVIC_GET_PRIORITY(IRQ_I2C2); break;
        #endif
        #if defined(__MK66FX1M0__) // 3.6
        case 3:  irqPriority = NVIC_GET_PRIORITY(IRQ_I2C3); break;
        #endif
        default: irqPriority = NVIC_GET_PRIORITY(IRQ_I2C0); break;
    11d0:	4b15      	ldr	r3, [pc, #84]	; (1228 <i2c_t3::acquireBus_(i2cStruct*, unsigned char, unsigned long, unsigned char&)+0x11c>)
    11d2:	781b      	ldrb	r3, [r3, #0]
        }
        if(currPriority <= irqPriority)
    11d4:	4283      	cmp	r3, r0
    11d6:	db24      	blt.n	1222 <i2c_t3::acquireBus_(i2cStruct*, unsigned char, unsigned long, unsigned char&)+0x116>
        {
            if(currPriority < 16)
    11d8:	280f      	cmp	r0, #15
    11da:	dc03      	bgt.n	11e4 <i2c_t3::acquireBus_(i2cStruct*, unsigned char, unsigned long, unsigned char&)+0xd8>
                forceImm = 1; // current priority cannot be surpassed, force Immediate mode
    11dc:	2001      	movs	r0, #1
    11de:	7038      	strb	r0, [r7, #0]
    11e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            else
            {
                switch(bus)
    11e4:	b116      	cbz	r6, 11ec <i2c_t3::acquireBus_(i2cStruct*, unsigned char, unsigned long, unsigned char&)+0xe0>
    11e6:	2e01      	cmp	r6, #1
    11e8:	d008      	beq.n	11fc <i2c_t3::acquireBus_(i2cStruct*, unsigned char, unsigned long, unsigned char&)+0xf0>
    11ea:	e00f      	b.n	120c <i2c_t3::acquireBus_(i2cStruct*, unsigned char, unsigned long, unsigned char&)+0x100>
                {
                case 0:  NVIC_SET_PRIORITY(IRQ_I2C0, currPriority-16); break;
    11ec:	f1a0 0310 	sub.w	r3, r0, #16
    11f0:	b2db      	uxtb	r3, r3
    11f2:	4a0d      	ldr	r2, [pc, #52]	; (1228 <i2c_t3::acquireBus_(i2cStruct*, unsigned char, unsigned long, unsigned char&)+0x11c>)
    11f4:	7013      	strb	r3, [r2, #0]
                default: NVIC_SET_PRIORITY(IRQ_I2C0, currPriority-16); break;
                }
            }
        }
    }
    return 1;
    11f6:	2001      	movs	r0, #1
                forceImm = 1; // current priority cannot be surpassed, force Immediate mode
            else
            {
                switch(bus)
                {
                case 0:  NVIC_SET_PRIORITY(IRQ_I2C0, currPriority-16); break;
    11f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                #if defined(__MKL26Z64__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) // LC/3.1/3.2/3.5/3.6
                case 1:  NVIC_SET_PRIORITY(IRQ_I2C1, currPriority-16); break;
    11fc:	f1a0 0310 	sub.w	r3, r0, #16
    1200:	b2db      	uxtb	r3, r3
    1202:	4a0a      	ldr	r2, [pc, #40]	; (122c <i2c_t3::acquireBus_(i2cStruct*, unsigned char, unsigned long, unsigned char&)+0x120>)
    1204:	7013      	strb	r3, [r2, #0]
                default: NVIC_SET_PRIORITY(IRQ_I2C0, currPriority-16); break;
                }
            }
        }
    }
    return 1;
    1206:	2001      	movs	r0, #1
            {
                switch(bus)
                {
                case 0:  NVIC_SET_PRIORITY(IRQ_I2C0, currPriority-16); break;
                #if defined(__MKL26Z64__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) // LC/3.1/3.2/3.5/3.6
                case 1:  NVIC_SET_PRIORITY(IRQ_I2C1, currPriority-16); break;
    1208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                case 2:  NVIC_SET_PRIORITY(IRQ_I2C2, currPriority-16); break;
                #endif
                #if defined(__MK66FX1M0__) // 3.6
                case 3:  NVIC_SET_PRIORITY(IRQ_I2C3, currPriority-16); break;
                #endif
                default: NVIC_SET_PRIORITY(IRQ_I2C0, currPriority-16); break;
    120c:	f1a0 0310 	sub.w	r3, r0, #16
    1210:	b2db      	uxtb	r3, r3
    1212:	4a05      	ldr	r2, [pc, #20]	; (1228 <i2c_t3::acquireBus_(i2cStruct*, unsigned char, unsigned long, unsigned char&)+0x11c>)
    1214:	7013      	strb	r3, [r2, #0]
                }
            }
        }
    }
    return 1;
    1216:	2001      	movs	r0, #1
                case 2:  NVIC_SET_PRIORITY(IRQ_I2C2, currPriority-16); break;
                #endif
                #if defined(__MK66FX1M0__) // 3.6
                case 3:  NVIC_SET_PRIORITY(IRQ_I2C3, currPriority-16); break;
                #endif
                default: NVIC_SET_PRIORITY(IRQ_I2C0, currPriority-16); break;
    1218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                }
            }
        }
    }
    return 1;
    121c:	2001      	movs	r0, #1
    121e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1222:	2001      	movs	r0, #1
}
    1224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1228:	e000e418 	.word	0xe000e418
    122c:	e000e419 	.word	0xe000e419

00001230 <i2c_t3::beginTransmission(unsigned char)>:
// parameters:
//      address = target 7bit slave address
//
void i2c_t3::beginTransmission(uint8_t address)
{
    i2c->txBuffer[0] = (address << 1); // store target addr
    1230:	6903      	ldr	r3, [r0, #16]
    1232:	0049      	lsls	r1, r1, #1
    1234:	f883 113c 	strb.w	r1, [r3, #316]	; 0x13c
    i2c->txBufferLength = 1;
    1238:	6903      	ldr	r3, [r0, #16]
    123a:	2201      	movs	r2, #1
    123c:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    1240:	2300      	movs	r3, #0
    1242:	7103      	strb	r3, [r0, #4]
    clearWriteError(); // clear any previous write error
    i2c->currentStatus = I2C_WAITING; // reset status
    1244:	6902      	ldr	r2, [r0, #16]
    1246:	f882 3251 	strb.w	r3, [r2, #593]	; 0x251
    124a:	4770      	bx	lr

0000124c <i2c_t3::sendTransmission_(i2cStruct*, unsigned char, i2c_stop, unsigned long)>:
// parameters:
//      i2c_stop = I2C_NOSTOP, I2C_STOP
//      timeout = timeout in microseconds (only used for Immediate operation)
//
void i2c_t3::sendTransmission_(struct i2cStruct* i2c, uint8_t bus, i2c_stop sendStop, uint32_t timeout)
{
    124c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1250:	b083      	sub	sp, #12
    1252:	461e      	mov	r6, r3
    uint8_t status, forceImm=0;
    1254:	2300      	movs	r3, #0
    1256:	f88d 3007 	strb.w	r3, [sp, #7]
    size_t idx;

    // exit immediately if sending 0 bytes
    if(i2c->txBufferLength == 0) return;
    125a:	f8d0 3244 	ldr.w	r3, [r0, #580]	; 0x244
    125e:	2b00      	cmp	r3, #0
    1260:	f000 80b8 	beq.w	13d4 <i2c_t3::sendTransmission_(i2cStruct*, unsigned char, i2c_stop, unsigned long)+0x188>
    1264:	4604      	mov	r4, r0
    1266:	4615      	mov	r5, r2

    // update timeout
    timeout = (timeout == 0) ? i2c->defTimeout : timeout;
    1268:	b90e      	cbnz	r6, 126e <i2c_t3::sendTransmission_(i2cStruct*, unsigned char, i2c_stop, unsigned long)+0x22>
    126a:	f8d0 6268 	ldr.w	r6, [r0, #616]	; 0x268
    // clear the status flags
    #if defined(__MKL26Z64__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) // LC/3.5/3.6
        *(i2c->FLT) |= I2C_FLT_STOPF | I2C_FLT_STARTF;  // clear STOP/START intr
        *(i2c->FLT) &= ~I2C_FLT_SSIE;                   // disable STOP/START intr (not used in Master mode)
    #endif
    *(i2c->S) = I2C_S_IICIF | I2C_S_ARBL; // clear intr, arbl
    126e:	68e3      	ldr	r3, [r4, #12]
    1270:	2212      	movs	r2, #18
    1272:	701a      	strb	r2, [r3, #0]

    // try to take control of the bus
    if(!acquireBus_(i2c, bus, timeout, forceImm)) return;
    1274:	f10d 0307 	add.w	r3, sp, #7
    1278:	4632      	mov	r2, r6
    127a:	4620      	mov	r0, r4
    127c:	f7ff ff46 	bl	110c <i2c_t3::acquireBus_(i2cStruct*, unsigned char, unsigned long, unsigned char&)>
    1280:	2800      	cmp	r0, #0
    1282:	f000 80a7 	beq.w	13d4 <i2c_t3::sendTransmission_(i2cStruct*, unsigned char, i2c_stop, unsigned long)+0x188>

    //
    // Immediate mode - blocking
    //
    if(i2c->opMode == I2C_OP_MODE_IMM || forceImm)
    1286:	f894 3248 	ldrb.w	r3, [r4, #584]	; 0x248
    128a:	b11b      	cbz	r3, 1294 <i2c_t3::sendTransmission_(i2cStruct*, unsigned char, i2c_stop, unsigned long)+0x48>
    128c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    1290:	2a00      	cmp	r2, #0
    1292:	d053      	beq.n	133c <i2c_t3::sendTransmission_(i2cStruct*, unsigned char, i2c_stop, unsigned long)+0xf0>
class elapsedMicros
{
private:
	unsigned long us;
public:
	elapsedMicros(void) { us = micros(); }
    1294:	f001 f848 	bl	2328 <micros>
    1298:	4681      	mov	r9, r0
    {
        elapsedMicros deltaT;
        i2c->currentStatus = I2C_SENDING;
    129a:	2301      	movs	r3, #1
    129c:	f884 3251 	strb.w	r3, [r4, #593]	; 0x251
        i2c->currentStop = sendStop;
    12a0:	f884 5250 	strb.w	r5, [r4, #592]	; 0x250
    12a4:	f204 173b 	addw	r7, r4, #315	; 0x13b

        for(idx=0; idx < i2c->txBufferLength && (timeout == 0 || deltaT < timeout); idx++)
    12a8:	2500      	movs	r5, #0
    inline void send(char* s)               { write(s); }
    inline uint8_t receive(void)            { int c = read(); return (c<0) ? 0 : c; }

    // ------------------------------------------------------------------------------------------------------
    // Immediate operation
    static void i2c_wait_(struct i2cStruct* i2c) { while(!(*(i2c->S) & I2C_S_IICIF)){} *(i2c->S) = I2C_S_IICIF; }
    12aa:	f04f 0802 	mov.w	r8, #2
    12ae:	f8d4 3244 	ldr.w	r3, [r4, #580]	; 0x244
    12b2:	429d      	cmp	r5, r3
    12b4:	d231      	bcs.n	131a <i2c_t3::sendTransmission_(i2cStruct*, unsigned char, i2c_stop, unsigned long)+0xce>
    12b6:	b12e      	cbz	r6, 12c4 <i2c_t3::sendTransmission_(i2cStruct*, unsigned char, i2c_stop, unsigned long)+0x78>
	elapsedMicros(unsigned long val) { us = micros() - val; }
	elapsedMicros(const elapsedMicros &orig) { us = orig.us; }
	operator unsigned long () const { return micros() - us; }
    12b8:	f001 f836 	bl	2328 <micros>
    12bc:	ebc9 0000 	rsb	r0, r9, r0
    12c0:	4286      	cmp	r6, r0
    12c2:	d92a      	bls.n	131a <i2c_t3::sendTransmission_(i2cStruct*, unsigned char, i2c_stop, unsigned long)+0xce>
        {
            // send data, wait for done
            *(i2c->D) = i2c->txBuffer[idx];
    12c4:	6923      	ldr	r3, [r4, #16]
    12c6:	f817 2f01 	ldrb.w	r2, [r7, #1]!
    12ca:	701a      	strb	r2, [r3, #0]
    12cc:	68e2      	ldr	r2, [r4, #12]
    12ce:	7813      	ldrb	r3, [r2, #0]
    12d0:	f013 0f02 	tst.w	r3, #2
    12d4:	d0fb      	beq.n	12ce <i2c_t3::sendTransmission_(i2cStruct*, unsigned char, i2c_stop, unsigned long)+0x82>
    12d6:	f882 8000 	strb.w	r8, [r2]
            i2c_wait_(i2c);
            status = *(i2c->S);
    12da:	68e2      	ldr	r2, [r4, #12]
    12dc:	7813      	ldrb	r3, [r2, #0]
    12de:	b2db      	uxtb	r3, r3

            // check arbitration
            if(status & I2C_S_ARBL)
    12e0:	f013 0f10 	tst.w	r3, #16
    12e4:	d008      	beq.n	12f8 <i2c_t3::sendTransmission_(i2cStruct*, unsigned char, i2c_stop, unsigned long)+0xac>
            {
                i2c->currentStatus = I2C_ARB_LOST;
    12e6:	2307      	movs	r3, #7
    12e8:	f884 3251 	strb.w	r3, [r4, #593]	; 0x251
                *(i2c->S) = I2C_S_ARBL; // clear arbl flag
    12ec:	2310      	movs	r3, #16
    12ee:	7013      	strb	r3, [r2, #0]
                // TODO: this is clearly not right, after ARBL it should drop into IMM slave mode if IAAS=1
                //       Right now Rx message would be ignored regardless of IAAS
                *(i2c->C1) = I2C_C1_IICEN; // change to Rx mode, intr disabled (does this send STOP if ARBL flagged?)
    12f0:	68a3      	ldr	r3, [r4, #8]
    12f2:	2280      	movs	r2, #128	; 0x80
    12f4:	701a      	strb	r2, [r3, #0]
                return;
    12f6:	e06d      	b.n	13d4 <i2c_t3::sendTransmission_(i2cStruct*, unsigned char, i2c_stop, unsigned long)+0x188>
            }
            // check if slave ACK'd
            else if(status & I2C_S_RXAK)
    12f8:	f013 0f01 	tst.w	r3, #1
    12fc:	d00b      	beq.n	1316 <i2c_t3::sendTransmission_(i2cStruct*, unsigned char, i2c_stop, unsigned long)+0xca>
            {
                if(idx == 0)
    12fe:	b91d      	cbnz	r5, 1308 <i2c_t3::sendTransmission_(i2cStruct*, unsigned char, i2c_stop, unsigned long)+0xbc>
                    i2c->currentStatus = I2C_ADDR_NAK; // NAK on Addr
    1300:	2305      	movs	r3, #5
    1302:	f884 3251 	strb.w	r3, [r4, #593]	; 0x251
    1306:	e002      	b.n	130e <i2c_t3::sendTransmission_(i2cStruct*, unsigned char, i2c_stop, unsigned long)+0xc2>
                else
                    i2c->currentStatus = I2C_DATA_NAK; // NAK on Data
    1308:	2306      	movs	r3, #6
    130a:	f884 3251 	strb.w	r3, [r4, #593]	; 0x251
                *(i2c->C1) = I2C_C1_IICEN; // send STOP, change to Rx mode, intr disabled
    130e:	68a3      	ldr	r3, [r4, #8]
    1310:	2280      	movs	r2, #128	; 0x80
    1312:	701a      	strb	r2, [r3, #0]
                return;
    1314:	e05e      	b.n	13d4 <i2c_t3::sendTransmission_(i2cStruct*, unsigned char, i2c_stop, unsigned long)+0x188>
    {
        elapsedMicros deltaT;
        i2c->currentStatus = I2C_SENDING;
        i2c->currentStop = sendStop;

        for(idx=0; idx < i2c->txBufferLength && (timeout == 0 || deltaT < timeout); idx++)
    1316:	3501      	adds	r5, #1
    1318:	e7c9      	b.n	12ae <i2c_t3::sendTransmission_(i2cStruct*, unsigned char, i2c_stop, unsigned long)+0x62>
                return;
            }
        }

        // Set final status
        if(idx < i2c->txBufferLength)
    131a:	f8d4 3244 	ldr.w	r3, [r4, #580]	; 0x244
    131e:	429d      	cmp	r5, r3
            i2c->currentStatus = I2C_TIMEOUT; // Tx incomplete, mark as timeout
    1320:	bf34      	ite	cc
    1322:	2304      	movcc	r3, #4
        else
            i2c->currentStatus = I2C_WAITING; // Tx complete, change to waiting state
    1324:	2300      	movcs	r3, #0
    1326:	f884 3251 	strb.w	r3, [r4, #593]	; 0x251

        // send STOP if configured
        if(i2c->currentStop == I2C_STOP)
    132a:	f894 3250 	ldrb.w	r3, [r4, #592]	; 0x250
    132e:	2b01      	cmp	r3, #1
            *(i2c->C1) = I2C_C1_IICEN; // send STOP, change to Rx mode, intr disabled
    1330:	68a3      	ldr	r3, [r4, #8]
    1332:	bf0c      	ite	eq
    1334:	2280      	moveq	r2, #128	; 0x80
        else
            *(i2c->C1) = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX; // no STOP, stay in Tx mode, intr disabled
    1336:	22b0      	movne	r2, #176	; 0xb0
    1338:	701a      	strb	r2, [r3, #0]
    133a:	e04b      	b.n	13d4 <i2c_t3::sendTransmission_(i2cStruct*, unsigned char, i2c_stop, unsigned long)+0x188>
    }
    //
    // ISR/DMA mode - non-blocking
    //
    else if(i2c->opMode == I2C_OP_MODE_ISR || i2c->opMode == I2C_OP_MODE_DMA)
    133c:	1e5a      	subs	r2, r3, #1
    133e:	b2d2      	uxtb	r2, r2
    1340:	2a01      	cmp	r2, #1
    1342:	d847      	bhi.n	13d4 <i2c_t3::sendTransmission_(i2cStruct*, unsigned char, i2c_stop, unsigned long)+0x188>
    {
        // send target addr and enable interrupts
        i2c->currentStatus = I2C_SENDING;
    1344:	2201      	movs	r2, #1
    1346:	f884 2251 	strb.w	r2, [r4, #593]	; 0x251
        i2c->currentStop = sendStop;
    134a:	f884 5250 	strb.w	r5, [r4, #592]	; 0x250
        i2c->txBufferIndex = 0;
    134e:	2200      	movs	r2, #0
    1350:	f8c4 2240 	str.w	r2, [r4, #576]	; 0x240
        if(i2c->opMode == I2C_OP_MODE_DMA && i2c->txBufferLength >= 5) // limit transfers less than 5 bytes to ISR method
    1354:	2b02      	cmp	r3, #2
    1356:	d10d      	bne.n	1374 <i2c_t3::sendTransmission_(i2cStruct*, unsigned char, i2c_stop, unsigned long)+0x128>
    1358:	f8d4 3244 	ldr.w	r3, [r4, #580]	; 0x244
    135c:	2b04      	cmp	r3, #4
    135e:	d811      	bhi.n	1384 <i2c_t3::sendTransmission_(i2cStruct*, unsigned char, i2c_stop, unsigned long)+0x138>
    1360:	e008      	b.n	1374 <i2c_t3::sendTransmission_(i2cStruct*, unsigned char, i2c_stop, unsigned long)+0x128>
	void destination(volatile signed char &p) { destination(*(volatile uint8_t *)&p); }
	void destination(volatile unsigned char &p) {
		TCD->DADDR = &p;
		TCD->DOFF = 0;
		TCD->ATTR_DST = 0;
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 1;
    1362:	681a      	ldr	r2, [r3, #0]
    1364:	6892      	ldr	r2, [r2, #8]
    1366:	b912      	cbnz	r2, 136e <i2c_t3::sendTransmission_(i2cStruct*, unsigned char, i2c_stop, unsigned long)+0x122>
    1368:	681a      	ldr	r2, [r3, #0]
    136a:	2101      	movs	r1, #1
    136c:	6091      	str	r1, [r2, #8]
		TCD->DLASTSGA = 0;
    136e:	681b      	ldr	r3, [r3, #0]
    1370:	2200      	movs	r2, #0
    1372:	619a      	str	r2, [r3, #24]
            i2c->activeDMA = I2C_DMA_ADDR;
            i2c->DMA->sourceBuffer(&i2c->txBuffer[2],i2c->txBufferLength-3); // DMA sends all except first/second/last bytes
            i2c->DMA->destination(*(i2c->D));
        }
        // start ISR
        *(i2c->C1) = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_MST | I2C_C1_TX; // enable intr
    1374:	68a3      	ldr	r3, [r4, #8]
    1376:	22f0      	movs	r2, #240	; 0xf0
    1378:	701a      	strb	r2, [r3, #0]
        *(i2c->D) = i2c->txBuffer[0]; // writing first data byte will start ISR
    137a:	6923      	ldr	r3, [r4, #16]
    137c:	f894 213c 	ldrb.w	r2, [r4, #316]	; 0x13c
    1380:	701a      	strb	r2, [r3, #0]
    1382:	e027      	b.n	13d4 <i2c_t3::sendTransmission_(i2cStruct*, unsigned char, i2c_stop, unsigned long)+0x188>
        i2c->currentStop = sendStop;
        i2c->txBufferIndex = 0;
        if(i2c->opMode == I2C_OP_MODE_DMA && i2c->txBufferLength >= 5) // limit transfers less than 5 bytes to ISR method
        {
            // init DMA, let the hack begin
            i2c->activeDMA = I2C_DMA_ADDR;
    1384:	2001      	movs	r0, #1
    1386:	f884 025a 	strb.w	r0, [r4, #602]	; 0x25a
            i2c->DMA->sourceBuffer(&i2c->txBuffer[2],i2c->txBufferLength-3); // DMA sends all except first/second/last bytes
    138a:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
    138e:	f504 719f 	add.w	r1, r4, #318	; 0x13e
    1392:	f8d4 3244 	ldr.w	r3, [r4, #580]	; 0x244
    1396:	3b03      	subs	r3, #3
	// Use a buffer (array of data) as the data source.  Typically a
	// buffer for transmitting data is used.
	void sourceBuffer(volatile const signed char p[], unsigned int len) {
		sourceBuffer((volatile const uint8_t *)p, len); }
	void sourceBuffer(volatile const unsigned char p[], unsigned int len) {
		TCD->SADDR = p;
    1398:	6815      	ldr	r5, [r2, #0]
    139a:	6029      	str	r1, [r5, #0]
		TCD->SOFF = 1;
    139c:	6811      	ldr	r1, [r2, #0]
    139e:	8088      	strh	r0, [r1, #4]
		TCD->ATTR_SRC = 0;
    13a0:	6815      	ldr	r5, [r2, #0]
    13a2:	2100      	movs	r1, #0
    13a4:	71e9      	strb	r1, [r5, #7]
		TCD->NBYTES = 1;
    13a6:	6815      	ldr	r5, [r2, #0]
    13a8:	60a8      	str	r0, [r5, #8]
		TCD->SLAST = -len;
    13aa:	6810      	ldr	r0, [r2, #0]
    13ac:	425d      	negs	r5, r3
    13ae:	60c5      	str	r5, [r0, #12]
		TCD->BITER = len;
    13b0:	6810      	ldr	r0, [r2, #0]
    13b2:	b29b      	uxth	r3, r3
    13b4:	83c3      	strh	r3, [r0, #30]
		TCD->CITER = len;
    13b6:	6812      	ldr	r2, [r2, #0]
    13b8:	82d3      	strh	r3, [r2, #22]
            i2c->DMA->destination(*(i2c->D));
    13ba:	f8d4 3264 	ldr.w	r3, [r4, #612]	; 0x264
    13be:	6922      	ldr	r2, [r4, #16]

	// Use a single variable as the data destination.  Typically a register
	// for transmitting data to one of the hardware peripherals is used.
	void destination(volatile signed char &p) { destination(*(volatile uint8_t *)&p); }
	void destination(volatile unsigned char &p) {
		TCD->DADDR = &p;
    13c0:	6818      	ldr	r0, [r3, #0]
    13c2:	6102      	str	r2, [r0, #16]
		TCD->DOFF = 0;
    13c4:	6818      	ldr	r0, [r3, #0]
    13c6:	8281      	strh	r1, [r0, #20]
		TCD->ATTR_DST = 0;
    13c8:	6818      	ldr	r0, [r3, #0]
    13ca:	7181      	strb	r1, [r0, #6]
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 1;
    13cc:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
    13d0:	d3ca      	bcc.n	1368 <i2c_t3::sendTransmission_(i2cStruct*, unsigned char, i2c_stop, unsigned long)+0x11c>
    13d2:	e7c6      	b.n	1362 <i2c_t3::sendTransmission_(i2cStruct*, unsigned char, i2c_stop, unsigned long)+0x116>
        }
        // start ISR
        *(i2c->C1) = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_MST | I2C_C1_TX; // enable intr
        *(i2c->D) = i2c->txBuffer[0]; // writing first data byte will start ISR
    }
}
    13d4:	b003      	add	sp, #12
    13d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    13da:	bf00      	nop

000013dc <i2c_t3::sendRequest_(i2cStruct*, unsigned char, unsigned char, unsigned int, i2c_stop, unsigned long)>:
//      length = number of bytes requested
//      i2c_stop = I2C_NOSTOP, I2C_STOP
//      timeout = timeout in microseconds (only used for Immediate operation)
//
void i2c_t3::sendRequest_(struct i2cStruct* i2c, uint8_t bus, uint8_t addr, size_t len, i2c_stop sendStop, uint32_t timeout)
{
    13dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    13e0:	b082      	sub	sp, #8
    13e2:	f89d 5020 	ldrb.w	r5, [sp, #32]
    uint8_t status, data, chkTimeout=0, forceImm=0;
    13e6:	2400      	movs	r4, #0
    13e8:	f88d 4007 	strb.w	r4, [sp, #7]

    // exit immediately if request for 0 bytes or request too large
    if(len == 0) return;
    13ec:	2b00      	cmp	r3, #0
    13ee:	f000 816b 	beq.w	16c8 <L_2565_delayMicroseconds+0x17e>
    if(len > I2C_RX_BUFFER_LENGTH) { i2c->currentStatus=I2C_BUF_OVF; return; }
    13f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
    13f6:	d303      	bcc.n	1400 <i2c_t3::sendRequest_(i2cStruct*, unsigned char, unsigned char, unsigned int, i2c_stop, unsigned long)+0x24>
    13f8:	2308      	movs	r3, #8
    13fa:	f880 3251 	strb.w	r3, [r0, #593]	; 0x251
    13fe:	e163      	b.n	16c8 <L_2565_delayMicroseconds+0x17e>

    i2c->reqCount = len; // store request length
    1400:	f8c0 3254 	str.w	r3, [r0, #596]	; 0x254
    i2c->rxBufferIndex = 0; // reset buffer
    1404:	2300      	movs	r3, #0
    1406:	f8c0 3134 	str.w	r3, [r0, #308]	; 0x134
    i2c->rxBufferLength = 0;
    140a:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
    timeout = (timeout == 0) ? i2c->defTimeout : timeout;
    140e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1410:	b913      	cbnz	r3, 1418 <i2c_t3::sendRequest_(i2cStruct*, unsigned char, unsigned char, unsigned int, i2c_stop, unsigned long)+0x3c>
    1412:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
    1416:	9309      	str	r3, [sp, #36]	; 0x24
    1418:	4616      	mov	r6, r2
    141a:	4604      	mov	r4, r0
    // clear the status flags
    #if defined(__MKL26Z64__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) // LC/3.5/3.6
        *(i2c->FLT) |= I2C_FLT_STOPF | I2C_FLT_STARTF;  // clear STOP/START intr
        *(i2c->FLT) &= ~I2C_FLT_SSIE;                   // disable STOP/START intr (not used in Master mode)
    #endif
    *(i2c->S) = I2C_S_IICIF | I2C_S_ARBL; // clear intr, arbl
    141c:	68c3      	ldr	r3, [r0, #12]
    141e:	2212      	movs	r2, #18
    1420:	701a      	strb	r2, [r3, #0]

    // try to take control of the bus
    if(!acquireBus_(i2c, bus, timeout, forceImm)) return;
    1422:	f10d 0307 	add.w	r3, sp, #7
    1426:	9a09      	ldr	r2, [sp, #36]	; 0x24
    1428:	f7ff fe70 	bl	110c <i2c_t3::acquireBus_(i2cStruct*, unsigned char, unsigned long, unsigned char&)>
    142c:	2800      	cmp	r0, #0
    142e:	f000 814b 	beq.w	16c8 <L_2565_delayMicroseconds+0x17e>

    //
    // Immediate mode - blocking
    //
    if(i2c->opMode == I2C_OP_MODE_IMM || forceImm)
    1432:	f894 3248 	ldrb.w	r3, [r4, #584]	; 0x248
    1436:	b123      	cbz	r3, 1442 <i2c_t3::sendRequest_(i2cStruct*, unsigned char, unsigned char, unsigned int, i2c_stop, unsigned long)+0x66>
    1438:	f89d 2007 	ldrb.w	r2, [sp, #7]
    143c:	2a00      	cmp	r2, #0
    143e:	f000 808f 	beq.w	1560 <L_2565_delayMicroseconds+0x16>
class elapsedMicros
{
private:
	unsigned long us;
public:
	elapsedMicros(void) { us = micros(); }
    1442:	f000 ff71 	bl	2328 <micros>
    1446:	4607      	mov	r7, r0
    {
        elapsedMicros deltaT;
        i2c->currentStatus = I2C_SEND_ADDR;
    1448:	2302      	movs	r3, #2
    144a:	f884 3251 	strb.w	r3, [r4, #593]	; 0x251
        i2c->currentStop = sendStop;
    144e:	f884 5250 	strb.w	r5, [r4, #592]	; 0x250

        // Send target address
        *(i2c->D) = (addr << 1) | 1; // address + READ
    1452:	6922      	ldr	r2, [r4, #16]
    1454:	0073      	lsls	r3, r6, #1
    1456:	f043 0301 	orr.w	r3, r3, #1
    145a:	b2db      	uxtb	r3, r3
    145c:	7013      	strb	r3, [r2, #0]
    145e:	68e2      	ldr	r2, [r4, #12]
    1460:	7813      	ldrb	r3, [r2, #0]
    1462:	f013 0f02 	tst.w	r3, #2
    1466:	d0fb      	beq.n	1460 <i2c_t3::sendRequest_(i2cStruct*, unsigned char, unsigned char, unsigned int, i2c_stop, unsigned long)+0x84>
    1468:	2302      	movs	r3, #2
    146a:	7013      	strb	r3, [r2, #0]
        i2c_wait_(i2c);
        status = *(i2c->S);
    146c:	68e2      	ldr	r2, [r4, #12]
    146e:	7813      	ldrb	r3, [r2, #0]
    1470:	b2db      	uxtb	r3, r3

        // check arbitration
        if(status & I2C_S_ARBL)
    1472:	f013 0f10 	tst.w	r3, #16
    1476:	d008      	beq.n	148a <i2c_t3::sendRequest_(i2cStruct*, unsigned char, unsigned char, unsigned int, i2c_stop, unsigned long)+0xae>
        {
            i2c->currentStatus = I2C_ARB_LOST;
    1478:	2307      	movs	r3, #7
    147a:	f884 3251 	strb.w	r3, [r4, #593]	; 0x251
            *(i2c->S) = I2C_S_ARBL; // clear arbl flag
    147e:	2310      	movs	r3, #16
    1480:	7013      	strb	r3, [r2, #0]
            // TODO: this is clearly not right, after ARBL it should drop into IMM slave mode if IAAS=1
            //       Right now Rx message would be ignored regardless of IAAS
            *(i2c->C1) = I2C_C1_IICEN; // change to Rx mode, intr disabled (does this send STOP if ARBL flagged?)
    1482:	68a3      	ldr	r3, [r4, #8]
    1484:	2280      	movs	r2, #128	; 0x80
    1486:	701a      	strb	r2, [r3, #0]
            return;
    1488:	e11e      	b.n	16c8 <L_2565_delayMicroseconds+0x17e>
        }
        // check if slave ACK'd
        else if(status & I2C_S_RXAK)
    148a:	f013 0f01 	tst.w	r3, #1
    148e:	d006      	beq.n	149e <i2c_t3::sendRequest_(i2cStruct*, unsigned char, unsigned char, unsigned int, i2c_stop, unsigned long)+0xc2>
        {
            i2c->currentStatus = I2C_ADDR_NAK; // NAK on Addr
    1490:	2305      	movs	r3, #5
    1492:	f884 3251 	strb.w	r3, [r4, #593]	; 0x251
            *(i2c->C1) = I2C_C1_IICEN; // send STOP, change to Rx mode, intr disabled
    1496:	68a3      	ldr	r3, [r4, #8]
    1498:	2280      	movs	r2, #128	; 0x80
    149a:	701a      	strb	r2, [r3, #0]
            return;
    149c:	e114      	b.n	16c8 <L_2565_delayMicroseconds+0x17e>
        }
        else
        {
            // Slave addr ACK, change to Rx mode
            i2c->currentStatus = I2C_RECEIVING;
    149e:	2303      	movs	r3, #3
    14a0:	f884 3251 	strb.w	r3, [r4, #593]	; 0x251
            if(i2c->reqCount == 1)
    14a4:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
    14a8:	2b01      	cmp	r3, #1
                *(i2c->C1) = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK; // no STOP, Rx, NAK on recv
    14aa:	68a3      	ldr	r3, [r4, #8]
    14ac:	bf0c      	ite	eq
    14ae:	22a8      	moveq	r2, #168	; 0xa8
            else
                *(i2c->C1) = I2C_C1_IICEN | I2C_C1_MST; // no STOP, change to Rx
    14b0:	22a0      	movne	r2, #160	; 0xa0
    14b2:	701a      	strb	r2, [r3, #0]
            data = *(i2c->D); // dummy read
    14b4:	6923      	ldr	r3, [r4, #16]
    14b6:	781b      	ldrb	r3, [r3, #0]
    14b8:	2602      	movs	r6, #2

            // Master receive loop
            while(i2c->rxBufferLength < i2c->reqCount && i2c->currentStatus == I2C_RECEIVING)
            {
                i2c_wait_(i2c);
                chkTimeout = (timeout != 0 && deltaT >= timeout);
    14ba:	2500      	movs	r5, #0
                // check if 2nd to last byte or timeout
                if((i2c->rxBufferLength+2) == i2c->reqCount || (chkTimeout && !i2c->timeoutRxNAK))
                {
                    *(i2c->C1) = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK; // no STOP, Rx, NAK on recv
    14bc:	f04f 08a8 	mov.w	r8, #168	; 0xa8
            else
                *(i2c->C1) = I2C_C1_IICEN | I2C_C1_MST; // no STOP, change to Rx
            data = *(i2c->D); // dummy read

            // Master receive loop
            while(i2c->rxBufferLength < i2c->reqCount && i2c->currentStatus == I2C_RECEIVING)
    14c0:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
    14c4:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
    14c8:	429a      	cmp	r2, r3
    14ca:	f080 80fd 	bcs.w	16c8 <L_2565_delayMicroseconds+0x17e>
    14ce:	f894 3251 	ldrb.w	r3, [r4, #593]	; 0x251
    14d2:	b2db      	uxtb	r3, r3
    14d4:	2b03      	cmp	r3, #3
    14d6:	f040 80f7 	bne.w	16c8 <L_2565_delayMicroseconds+0x17e>
    14da:	68e2      	ldr	r2, [r4, #12]
    14dc:	7813      	ldrb	r3, [r2, #0]
    14de:	f013 0f02 	tst.w	r3, #2
    14e2:	d0fb      	beq.n	14dc <i2c_t3::sendRequest_(i2cStruct*, unsigned char, unsigned char, unsigned int, i2c_stop, unsigned long)+0x100>
    14e4:	7016      	strb	r6, [r2, #0]
            {
                i2c_wait_(i2c);
                chkTimeout = (timeout != 0 && deltaT >= timeout);
    14e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    14e8:	b143      	cbz	r3, 14fc <i2c_t3::sendRequest_(i2cStruct*, unsigned char, unsigned char, unsigned int, i2c_stop, unsigned long)+0x120>
	elapsedMicros(unsigned long val) { us = micros() - val; }
	elapsedMicros(const elapsedMicros &orig) { us = orig.us; }
	operator unsigned long () const { return micros() - us; }
    14ea:	f000 ff1d 	bl	2328 <micros>
    14ee:	1bc0      	subs	r0, r0, r7
    14f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    14f2:	4283      	cmp	r3, r0
    14f4:	bf8c      	ite	hi
    14f6:	2000      	movhi	r0, #0
    14f8:	2001      	movls	r0, #1
    14fa:	e000      	b.n	14fe <i2c_t3::sendRequest_(i2cStruct*, unsigned char, unsigned char, unsigned int, i2c_stop, unsigned long)+0x122>
    14fc:	4628      	mov	r0, r5
                // check if 2nd to last byte or timeout
                if((i2c->rxBufferLength+2) == i2c->reqCount || (chkTimeout && !i2c->timeoutRxNAK))
    14fe:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    1502:	3302      	adds	r3, #2
    1504:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
    1508:	4293      	cmp	r3, r2
    150a:	d074      	beq.n	15f6 <L_2565_delayMicroseconds+0xac>
    150c:	2800      	cmp	r0, #0
    150e:	f000 80c3 	beq.w	1698 <L_2565_delayMicroseconds+0x14e>
    1512:	f894 3259 	ldrb.w	r3, [r4, #601]	; 0x259
    1516:	2b00      	cmp	r3, #0
    1518:	d06d      	beq.n	15f6 <L_2565_delayMicroseconds+0xac>
    151a:	e0a5      	b.n	1668 <L_2565_delayMicroseconds+0x11e>
                {
                    *(i2c->C1) = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK; // no STOP, Rx, NAK on recv
                }
                // if last byte or timeout send STOP
                if((i2c->rxBufferLength+1) >= i2c->reqCount || (chkTimeout && i2c->timeoutRxNAK))
    151c:	2800      	cmp	r0, #0
    151e:	d075      	beq.n	160c <L_2565_delayMicroseconds+0xc2>
    1520:	f894 3259 	ldrb.w	r3, [r4, #601]	; 0x259
    1524:	2b00      	cmp	r3, #0
    1526:	f040 80bf 	bne.w	16a8 <L_2565_delayMicroseconds+0x15e>
    152a:	e06f      	b.n	160c <L_2565_delayMicroseconds+0xc2>
                    *(i2c->C1) = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
                    // grab last data
                    data = *(i2c->D);
                    i2c->rxBuffer[i2c->rxBufferLength++] = data;
                    if(chkTimeout)
                        i2c->currentStatus = I2C_TIMEOUT; // Rx incomplete, mark as timeout
    152c:	2304      	movs	r3, #4
    152e:	f884 3251 	strb.w	r3, [r4, #593]	; 0x251
                    else
                        i2c->currentStatus = I2C_WAITING; // Rx complete, change to waiting state
                    if(i2c->currentStop == I2C_STOP) // NAK then STOP
    1532:	f894 3250 	ldrb.w	r3, [r4, #592]	; 0x250
    1536:	2b01      	cmp	r3, #1
    1538:	d006      	beq.n	1548 <i2c_t3::sendRequest_(i2cStruct*, unsigned char, unsigned char, unsigned int, i2c_stop, unsigned long)+0x16c>
    153a:	e00d      	b.n	1558 <L_2565_delayMicroseconds+0xe>
                    data = *(i2c->D);
                    i2c->rxBuffer[i2c->rxBufferLength++] = data;
                    if(chkTimeout)
                        i2c->currentStatus = I2C_TIMEOUT; // Rx incomplete, mark as timeout
                    else
                        i2c->currentStatus = I2C_WAITING; // Rx complete, change to waiting state
    153c:	f884 5251 	strb.w	r5, [r4, #593]	; 0x251
                    if(i2c->currentStop == I2C_STOP) // NAK then STOP
    1540:	f894 3250 	ldrb.w	r3, [r4, #592]	; 0x250
    1544:	2b01      	cmp	r3, #1
    1546:	d1bb      	bne.n	14c0 <i2c_t3::sendRequest_(i2cStruct*, unsigned char, unsigned char, unsigned int, i2c_stop, unsigned long)+0xe4>
    1548:	2310      	movs	r3, #16

0000154a <L_2565_delayMicroseconds>:
    154a:	3b01      	subs	r3, #1
    154c:	d1fd      	bne.n	154a <L_2565_delayMicroseconds>
                    {
                        delayMicroseconds(1); // empirical patch, lets things settle before issuing STOP
                        *(i2c->C1) = I2C_C1_IICEN; // send STOP, change to Rx mode, intr disabled
    154e:	68a3      	ldr	r3, [r4, #8]
    1550:	2280      	movs	r2, #128	; 0x80
    1552:	701a      	strb	r2, [r3, #0]
                {
                    // grab next data, not last byte, will ACK
                    data = *(i2c->D);
                    i2c->rxBuffer[i2c->rxBufferLength++] = data;
                }
                if(chkTimeout) i2c->timeoutRxNAK = 1; // set flag to indicate NAK sent
    1554:	2800      	cmp	r0, #0
    1556:	d0b3      	beq.n	14c0 <i2c_t3::sendRequest_(i2cStruct*, unsigned char, unsigned char, unsigned int, i2c_stop, unsigned long)+0xe4>
    1558:	2301      	movs	r3, #1
    155a:	f884 3259 	strb.w	r3, [r4, #601]	; 0x259
    155e:	e7ad      	b.n	14bc <i2c_t3::sendRequest_(i2cStruct*, unsigned char, unsigned char, unsigned int, i2c_stop, unsigned long)+0xe0>
        }
    }
    //
    // ISR/DMA mode - non-blocking
    //
    else if(i2c->opMode == I2C_OP_MODE_ISR || i2c->opMode == I2C_OP_MODE_DMA)
    1560:	1e5a      	subs	r2, r3, #1
    1562:	b2d2      	uxtb	r2, r2
    1564:	2a01      	cmp	r2, #1
    1566:	f200 80af 	bhi.w	16c8 <L_2565_delayMicroseconds+0x17e>
    {
        // send 1st data and enable interrupts
        i2c->currentStatus = I2C_SEND_ADDR;
    156a:	2202      	movs	r2, #2
    156c:	f884 2251 	strb.w	r2, [r4, #593]	; 0x251
        i2c->currentStop = sendStop;
    1570:	f884 5250 	strb.w	r5, [r4, #592]	; 0x250
        if(i2c->opMode == I2C_OP_MODE_DMA && i2c->reqCount >= 5) // limit transfers less than 5 bytes to ISR method
    1574:	4293      	cmp	r3, r2
    1576:	d134      	bne.n	15e2 <L_2565_delayMicroseconds+0x98>
    1578:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
    157c:	2b04      	cmp	r3, #4
    157e:	d930      	bls.n	15e2 <L_2565_delayMicroseconds+0x98>
        {
            // init DMA, let the hack begin
            i2c->activeDMA = I2C_DMA_ADDR;
    1580:	2301      	movs	r3, #1
    1582:	f884 325a 	strb.w	r3, [r4, #602]	; 0x25a
            i2c->DMA->source(*(i2c->D));
    1586:	f8d4 3264 	ldr.w	r3, [r4, #612]	; 0x264
    158a:	6922      	ldr	r2, [r4, #16]

	// Use a single variable as the data source.  Typically a register
	// for receiving data from one of the hardware peripherals is used.
	void source(volatile const signed char &p) { source(*(volatile const uint8_t *)&p); }
	void source(volatile const unsigned char &p) {
		TCD->SADDR = &p;
    158c:	6819      	ldr	r1, [r3, #0]
    158e:	600a      	str	r2, [r1, #0]
		TCD->SOFF = 0;
    1590:	6818      	ldr	r0, [r3, #0]
    1592:	2100      	movs	r1, #0
    1594:	8081      	strh	r1, [r0, #4]
		TCD->ATTR_SRC = 0;
    1596:	6818      	ldr	r0, [r3, #0]
    1598:	71c1      	strb	r1, [r0, #7]
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 1;
    159a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
    159e:	d302      	bcc.n	15a6 <L_2565_delayMicroseconds+0x5c>
    15a0:	681a      	ldr	r2, [r3, #0]
    15a2:	6892      	ldr	r2, [r2, #8]
    15a4:	b912      	cbnz	r2, 15ac <L_2565_delayMicroseconds+0x62>
    15a6:	681a      	ldr	r2, [r3, #0]
    15a8:	2101      	movs	r1, #1
    15aa:	6091      	str	r1, [r2, #8]
		TCD->SLAST = 0;
    15ac:	681b      	ldr	r3, [r3, #0]
    15ae:	2000      	movs	r0, #0
    15b0:	60d8      	str	r0, [r3, #12]
            i2c->DMA->destinationBuffer(&i2c->rxBuffer[0],i2c->reqCount-1); // DMA gets all except last byte
    15b2:	f8d4 2264 	ldr.w	r2, [r4, #612]	; 0x264
    15b6:	f104 0130 	add.w	r1, r4, #48	; 0x30
    15ba:	f8d4 3254 	ldr.w	r3, [r4, #596]	; 0x254
    15be:	3b01      	subs	r3, #1
	// Use a buffer (array of data) as the data destination.  Typically a
	// buffer for receiving data is used.
	void destinationBuffer(volatile signed char p[], unsigned int len) {
		destinationBuffer((volatile uint8_t *)p, len); }
	void destinationBuffer(volatile unsigned char p[], unsigned int len) {
		TCD->DADDR = p;
    15c0:	6815      	ldr	r5, [r2, #0]
    15c2:	6129      	str	r1, [r5, #16]
		TCD->DOFF = 1;
    15c4:	6815      	ldr	r5, [r2, #0]
    15c6:	2101      	movs	r1, #1
    15c8:	82a9      	strh	r1, [r5, #20]
		TCD->ATTR_DST = 0;
    15ca:	6815      	ldr	r5, [r2, #0]
    15cc:	71a8      	strb	r0, [r5, #6]
		TCD->NBYTES = 1;
    15ce:	6810      	ldr	r0, [r2, #0]
    15d0:	6081      	str	r1, [r0, #8]
		TCD->DLASTSGA = -len;
    15d2:	6811      	ldr	r1, [r2, #0]
    15d4:	4258      	negs	r0, r3
    15d6:	6188      	str	r0, [r1, #24]
		TCD->BITER = len;
    15d8:	6811      	ldr	r1, [r2, #0]
    15da:	b29b      	uxth	r3, r3
    15dc:	83cb      	strh	r3, [r1, #30]
		TCD->CITER = len;
    15de:	6812      	ldr	r2, [r2, #0]
    15e0:	82d3      	strh	r3, [r2, #22]
        }
        // start ISR
        *(i2c->C1) = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_MST | I2C_C1_TX; // enable intr
    15e2:	68a3      	ldr	r3, [r4, #8]
    15e4:	22f0      	movs	r2, #240	; 0xf0
    15e6:	701a      	strb	r2, [r3, #0]
        *(i2c->D) = (addr << 1) | 1; // address + READ
    15e8:	6922      	ldr	r2, [r4, #16]
    15ea:	0073      	lsls	r3, r6, #1
    15ec:	f043 0301 	orr.w	r3, r3, #1
    15f0:	b2db      	uxtb	r3, r3
    15f2:	7013      	strb	r3, [r2, #0]
    15f4:	e068      	b.n	16c8 <L_2565_delayMicroseconds+0x17e>
                i2c_wait_(i2c);
                chkTimeout = (timeout != 0 && deltaT >= timeout);
                // check if 2nd to last byte or timeout
                if((i2c->rxBufferLength+2) == i2c->reqCount || (chkTimeout && !i2c->timeoutRxNAK))
                {
                    *(i2c->C1) = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK; // no STOP, Rx, NAK on recv
    15f6:	68a3      	ldr	r3, [r4, #8]
    15f8:	f883 8000 	strb.w	r8, [r3]
                }
                // if last byte or timeout send STOP
                if((i2c->rxBufferLength+1) >= i2c->reqCount || (chkTimeout && i2c->timeoutRxNAK))
    15fc:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    1600:	3301      	adds	r3, #1
    1602:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
    1606:	4293      	cmp	r3, r2
    1608:	d20b      	bcs.n	1622 <L_2565_delayMicroseconds+0xd8>
    160a:	e787      	b.n	151c <i2c_t3::sendRequest_(i2cStruct*, unsigned char, unsigned char, unsigned int, i2c_stop, unsigned long)+0x140>
                    // else NAK no STOP
                }
                else
                {
                    // grab next data, not last byte, will ACK
                    data = *(i2c->D);
    160c:	6923      	ldr	r3, [r4, #16]
    160e:	781a      	ldrb	r2, [r3, #0]
                    i2c->rxBuffer[i2c->rxBufferLength++] = data;
    1610:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    1614:	1c59      	adds	r1, r3, #1
    1616:	f8c4 1138 	str.w	r1, [r4, #312]	; 0x138
    161a:	4423      	add	r3, r4
    161c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    1620:	e798      	b.n	1554 <L_2565_delayMicroseconds+0xa>
                    *(i2c->C1) = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK; // no STOP, Rx, NAK on recv
                }
                // if last byte or timeout send STOP
                if((i2c->rxBufferLength+1) >= i2c->reqCount || (chkTimeout && i2c->timeoutRxNAK))
                {
                    i2c->timeoutRxNAK = 0; // clear flag
    1622:	f884 5259 	strb.w	r5, [r4, #601]	; 0x259
                    // change to Tx mode
                    *(i2c->C1) = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    1626:	68a3      	ldr	r3, [r4, #8]
    1628:	22b0      	movs	r2, #176	; 0xb0
    162a:	701a      	strb	r2, [r3, #0]
                    // grab last data
                    data = *(i2c->D);
    162c:	6923      	ldr	r3, [r4, #16]
    162e:	781a      	ldrb	r2, [r3, #0]
                    i2c->rxBuffer[i2c->rxBufferLength++] = data;
    1630:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    1634:	1c59      	adds	r1, r3, #1
    1636:	f8c4 1138 	str.w	r1, [r4, #312]	; 0x138
    163a:	4423      	add	r3, r4
    163c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                    if(chkTimeout)
    1640:	2800      	cmp	r0, #0
    1642:	f43f af7b 	beq.w	153c <i2c_t3::sendRequest_(i2cStruct*, unsigned char, unsigned char, unsigned int, i2c_stop, unsigned long)+0x160>
    1646:	e771      	b.n	152c <i2c_t3::sendRequest_(i2cStruct*, unsigned char, unsigned char, unsigned int, i2c_stop, unsigned long)+0x150>
                    *(i2c->C1) = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK; // no STOP, Rx, NAK on recv
                }
                // if last byte or timeout send STOP
                if((i2c->rxBufferLength+1) >= i2c->reqCount || (chkTimeout && i2c->timeoutRxNAK))
                {
                    i2c->timeoutRxNAK = 0; // clear flag
    1648:	f884 5259 	strb.w	r5, [r4, #601]	; 0x259
                    // change to Tx mode
                    *(i2c->C1) = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    164c:	68a3      	ldr	r3, [r4, #8]
    164e:	22b0      	movs	r2, #176	; 0xb0
    1650:	701a      	strb	r2, [r3, #0]
                    // grab last data
                    data = *(i2c->D);
    1652:	6923      	ldr	r3, [r4, #16]
    1654:	781a      	ldrb	r2, [r3, #0]
                    i2c->rxBuffer[i2c->rxBufferLength++] = data;
    1656:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    165a:	1c59      	adds	r1, r3, #1
    165c:	f8c4 1138 	str.w	r1, [r4, #312]	; 0x138
    1660:	4423      	add	r3, r4
    1662:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    1666:	e761      	b.n	152c <i2c_t3::sendRequest_(i2cStruct*, unsigned char, unsigned char, unsigned int, i2c_stop, unsigned long)+0x150>
                if((i2c->rxBufferLength+2) == i2c->reqCount || (chkTimeout && !i2c->timeoutRxNAK))
                {
                    *(i2c->C1) = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK; // no STOP, Rx, NAK on recv
                }
                // if last byte or timeout send STOP
                if((i2c->rxBufferLength+1) >= i2c->reqCount || (chkTimeout && i2c->timeoutRxNAK))
    1668:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    166c:	3301      	adds	r3, #1
    166e:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
    1672:	4293      	cmp	r3, r2
    1674:	d2e8      	bcs.n	1648 <L_2565_delayMicroseconds+0xfe>
    1676:	e751      	b.n	151c <i2c_t3::sendRequest_(i2cStruct*, unsigned char, unsigned char, unsigned int, i2c_stop, unsigned long)+0x140>
                {
                    i2c->timeoutRxNAK = 0; // clear flag
    1678:	f884 5259 	strb.w	r5, [r4, #601]	; 0x259
                    // change to Tx mode
                    *(i2c->C1) = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    167c:	68a3      	ldr	r3, [r4, #8]
    167e:	22b0      	movs	r2, #176	; 0xb0
    1680:	701a      	strb	r2, [r3, #0]
                    // grab last data
                    data = *(i2c->D);
    1682:	6923      	ldr	r3, [r4, #16]
    1684:	781a      	ldrb	r2, [r3, #0]
                    i2c->rxBuffer[i2c->rxBufferLength++] = data;
    1686:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    168a:	1c59      	adds	r1, r3, #1
    168c:	f8c4 1138 	str.w	r1, [r4, #312]	; 0x138
    1690:	4423      	add	r3, r4
    1692:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    1696:	e751      	b.n	153c <i2c_t3::sendRequest_(i2cStruct*, unsigned char, unsigned char, unsigned int, i2c_stop, unsigned long)+0x160>
                if((i2c->rxBufferLength+2) == i2c->reqCount || (chkTimeout && !i2c->timeoutRxNAK))
                {
                    *(i2c->C1) = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK; // no STOP, Rx, NAK on recv
                }
                // if last byte or timeout send STOP
                if((i2c->rxBufferLength+1) >= i2c->reqCount || (chkTimeout && i2c->timeoutRxNAK))
    1698:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    169c:	3301      	adds	r3, #1
    169e:	f8d4 2254 	ldr.w	r2, [r4, #596]	; 0x254
    16a2:	4293      	cmp	r3, r2
    16a4:	d2e8      	bcs.n	1678 <L_2565_delayMicroseconds+0x12e>
    16a6:	e739      	b.n	151c <i2c_t3::sendRequest_(i2cStruct*, unsigned char, unsigned char, unsigned int, i2c_stop, unsigned long)+0x140>
                {
                    i2c->timeoutRxNAK = 0; // clear flag
    16a8:	f884 5259 	strb.w	r5, [r4, #601]	; 0x259
                    // change to Tx mode
                    *(i2c->C1) = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    16ac:	68a3      	ldr	r3, [r4, #8]
    16ae:	22b0      	movs	r2, #176	; 0xb0
    16b0:	701a      	strb	r2, [r3, #0]
                    // grab last data
                    data = *(i2c->D);
    16b2:	6923      	ldr	r3, [r4, #16]
    16b4:	781a      	ldrb	r2, [r3, #0]
                    i2c->rxBuffer[i2c->rxBufferLength++] = data;
    16b6:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
    16ba:	1c59      	adds	r1, r3, #1
    16bc:	f8c4 1138 	str.w	r1, [r4, #312]	; 0x138
    16c0:	4423      	add	r3, r4
    16c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    16c6:	e731      	b.n	152c <i2c_t3::sendRequest_(i2cStruct*, unsigned char, unsigned char, unsigned int, i2c_stop, unsigned long)+0x150>
        }
        // start ISR
        *(i2c->C1) = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_MST | I2C_C1_TX; // enable intr
        *(i2c->D) = (addr << 1) | 1; // address + READ
    }
}
    16c8:	b002      	add	sp, #8
    16ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    16ce:	bf00      	nop

000016d0 <i2c_t3::getError()>:
// return: 0=success, 1=data too long, 2=recv addr NACK, 3=recv data NACK, 4=other error (timeout, arb lost)
//
uint8_t i2c_t3::getError(void)
{
    // convert status to Arduino return values (give these a higher priority than buf overflow error)
    switch(i2c->currentStatus)
    16d0:	6903      	ldr	r3, [r0, #16]
    16d2:	f893 3251 	ldrb.w	r3, [r3, #593]	; 0x251
    16d6:	3b04      	subs	r3, #4
    16d8:	2b04      	cmp	r3, #4
    16da:	d80c      	bhi.n	16f6 <i2c_t3::getError()+0x26>
    16dc:	e8df f003 	tbb	[pc, r3]
    16e0:	07050309 	.word	0x07050309
    16e4:	10          	.byte	0x10
    16e5:	00          	.byte	0x00
    {
    case I2C_BUF_OVF:  return 1;
    case I2C_ADDR_NAK: return 2;
    16e6:	2002      	movs	r0, #2
    16e8:	4770      	bx	lr
    case I2C_DATA_NAK: return 3;
    16ea:	2003      	movs	r0, #3
    16ec:	4770      	bx	lr
    case I2C_ARB_LOST: return 4;
    16ee:	2004      	movs	r0, #4
    16f0:	4770      	bx	lr
    case I2C_TIMEOUT:  return 4;
    16f2:	2004      	movs	r0, #4
    16f4:	4770      	bx	lr
uint8_t i2c_t3::getError(void)
{
    // convert status to Arduino return values (give these a higher priority than buf overflow error)
    switch(i2c->currentStatus)
    {
    case I2C_BUF_OVF:  return 1;
    16f6:	7900      	ldrb	r0, [r0, #4]
    16f8:	3000      	adds	r0, #0
    16fa:	bf18      	it	ne
    16fc:	2001      	movne	r0, #1
    16fe:	4770      	bx	lr
    1700:	2001      	movs	r0, #1
    case I2C_TIMEOUT:  return 4;
    default: break;
    }
    if(getWriteError()) return 1; // if write_error was set then flag as buffer overflow
    return 0; // no errors
}
    1702:	4770      	bx	lr

00001704 <i2c_t3::done_(i2cStruct*)>:
// Done Check - returns simple complete/not-complete value to indicate I2C status
// return: 1=Tx/Rx complete (with or without errors), 0=still running
//
uint8_t i2c_t3::done_(struct i2cStruct* i2c)
{
    return (i2c->currentStatus==I2C_WAITING ||
    1704:	f890 3251 	ldrb.w	r3, [r0, #593]	; 0x251
            i2c->currentStatus==I2C_ADDR_NAK ||
            i2c->currentStatus==I2C_DATA_NAK ||
            i2c->currentStatus==I2C_ARB_LOST ||
            i2c->currentStatus==I2C_TIMEOUT ||
    1708:	f013 0fff 	tst.w	r3, #255	; 0xff
    170c:	d01b      	beq.n	1746 <i2c_t3::done_(i2cStruct*)+0x42>
// return: 1=Tx/Rx complete (with or without errors), 0=still running
//
uint8_t i2c_t3::done_(struct i2cStruct* i2c)
{
    return (i2c->currentStatus==I2C_WAITING ||
            i2c->currentStatus==I2C_ADDR_NAK ||
    170e:	f890 3251 	ldrb.w	r3, [r0, #593]	; 0x251
    1712:	b2db      	uxtb	r3, r3
// Done Check - returns simple complete/not-complete value to indicate I2C status
// return: 1=Tx/Rx complete (with or without errors), 0=still running
//
uint8_t i2c_t3::done_(struct i2cStruct* i2c)
{
    return (i2c->currentStatus==I2C_WAITING ||
    1714:	2b05      	cmp	r3, #5
    1716:	d018      	beq.n	174a <i2c_t3::done_(i2cStruct*)+0x46>
            i2c->currentStatus==I2C_ADDR_NAK ||
            i2c->currentStatus==I2C_DATA_NAK ||
    1718:	f890 3251 	ldrb.w	r3, [r0, #593]	; 0x251
    171c:	b2db      	uxtb	r3, r3
// return: 1=Tx/Rx complete (with or without errors), 0=still running
//
uint8_t i2c_t3::done_(struct i2cStruct* i2c)
{
    return (i2c->currentStatus==I2C_WAITING ||
            i2c->currentStatus==I2C_ADDR_NAK ||
    171e:	2b06      	cmp	r3, #6
    1720:	d015      	beq.n	174e <i2c_t3::done_(i2cStruct*)+0x4a>
            i2c->currentStatus==I2C_DATA_NAK ||
            i2c->currentStatus==I2C_ARB_LOST ||
    1722:	f890 3251 	ldrb.w	r3, [r0, #593]	; 0x251
    1726:	b2db      	uxtb	r3, r3
//
uint8_t i2c_t3::done_(struct i2cStruct* i2c)
{
    return (i2c->currentStatus==I2C_WAITING ||
            i2c->currentStatus==I2C_ADDR_NAK ||
            i2c->currentStatus==I2C_DATA_NAK ||
    1728:	2b07      	cmp	r3, #7
    172a:	d012      	beq.n	1752 <i2c_t3::done_(i2cStruct*)+0x4e>
            i2c->currentStatus==I2C_ARB_LOST ||
            i2c->currentStatus==I2C_TIMEOUT ||
    172c:	f890 3251 	ldrb.w	r3, [r0, #593]	; 0x251
    1730:	b2db      	uxtb	r3, r3
uint8_t i2c_t3::done_(struct i2cStruct* i2c)
{
    return (i2c->currentStatus==I2C_WAITING ||
            i2c->currentStatus==I2C_ADDR_NAK ||
            i2c->currentStatus==I2C_DATA_NAK ||
            i2c->currentStatus==I2C_ARB_LOST ||
    1732:	2b04      	cmp	r3, #4
    1734:	d00f      	beq.n	1756 <i2c_t3::done_(i2cStruct*)+0x52>
            i2c->currentStatus==I2C_TIMEOUT ||
            i2c->currentStatus==I2C_BUF_OVF);
    1736:	f890 0251 	ldrb.w	r0, [r0, #593]	; 0x251
    173a:	b2c0      	uxtb	r0, r0
{
    return (i2c->currentStatus==I2C_WAITING ||
            i2c->currentStatus==I2C_ADDR_NAK ||
            i2c->currentStatus==I2C_DATA_NAK ||
            i2c->currentStatus==I2C_ARB_LOST ||
            i2c->currentStatus==I2C_TIMEOUT ||
    173c:	2808      	cmp	r0, #8
    173e:	bf14      	ite	ne
    1740:	2000      	movne	r0, #0
    1742:	2001      	moveq	r0, #1
    1744:	4770      	bx	lr
    1746:	2001      	movs	r0, #1
    1748:	4770      	bx	lr
    174a:	2001      	movs	r0, #1
    174c:	4770      	bx	lr
    174e:	2001      	movs	r0, #1
    1750:	4770      	bx	lr
    1752:	2001      	movs	r0, #1
    1754:	4770      	bx	lr
    1756:	2001      	movs	r0, #1
            i2c->currentStatus==I2C_BUF_OVF);
}
    1758:	4770      	bx	lr
    175a:	bf00      	nop

0000175c <i2c_t3::finish_(i2cStruct*, unsigned char, unsigned long)>:
// return: 1=success (Tx or Rx completed, no error), 0=fail (NAK, timeout or Arb Lost)
// parameters:
//      timeout = timeout in microseconds
//
uint8_t i2c_t3::finish_(struct i2cStruct* i2c, uint8_t bus, uint32_t timeout)
{
    175c:	b570      	push	{r4, r5, r6, lr}
    175e:	4604      	mov	r4, r0
    1760:	4615      	mov	r5, r2
class elapsedMicros
{
private:
	unsigned long us;
public:
	elapsedMicros(void) { us = micros(); }
    1762:	f000 fde1 	bl	2328 <micros>
    elapsedMicros deltaT;

    // update timeout
    timeout = (timeout == 0) ? i2c->defTimeout : timeout;
    1766:	b90d      	cbnz	r5, 176c <i2c_t3::finish_(i2cStruct*, unsigned char, unsigned long)+0x10>
    1768:	f8d4 5268 	ldr.w	r5, [r4, #616]	; 0x268
	elapsedMicros(unsigned long val) { us = micros() - val; }
	elapsedMicros(const elapsedMicros &orig) { us = orig.us; }
	operator unsigned long () const { return micros() - us; }
	elapsedMicros & operator = (const elapsedMicros &rhs) { us = rhs.us; return *this; }
	elapsedMicros & operator = (unsigned long val) { us = micros() - val; return *this; }
    176c:	f000 fddc 	bl	2328 <micros>
    1770:	4606      	mov	r6, r0

    // wait for completion or timeout
    deltaT = 0;
    while(!done_(i2c) && (timeout == 0 || deltaT < timeout));
    1772:	4620      	mov	r0, r4
    1774:	f7ff ffc6 	bl	1704 <i2c_t3::done_(i2cStruct*)>
    1778:	b938      	cbnz	r0, 178a <i2c_t3::finish_(i2cStruct*, unsigned char, unsigned long)+0x2e>
    177a:	2d00      	cmp	r5, #0
    177c:	d0f9      	beq.n	1772 <i2c_t3::finish_(i2cStruct*, unsigned char, unsigned long)+0x16>
	unsigned long us;
public:
	elapsedMicros(void) { us = micros(); }
	elapsedMicros(unsigned long val) { us = micros() - val; }
	elapsedMicros(const elapsedMicros &orig) { us = orig.us; }
	operator unsigned long () const { return micros() - us; }
    177e:	f000 fdd3 	bl	2328 <micros>
    1782:	1b80      	subs	r0, r0, r6
    1784:	4285      	cmp	r5, r0
    1786:	d8f4      	bhi.n	1772 <i2c_t3::finish_(i2cStruct*, unsigned char, unsigned long)+0x16>
    1788:	e000      	b.n	178c <i2c_t3::finish_(i2cStruct*, unsigned char, unsigned long)+0x30>

    // DMA mode and timeout
    if(timeout != 0 && deltaT >= timeout && i2c->opMode == I2C_OP_MODE_DMA && i2c->activeDMA != I2C_DMA_OFF)
    178a:	b1ad      	cbz	r5, 17b8 <i2c_t3::finish_(i2cStruct*, unsigned char, unsigned long)+0x5c>
    178c:	f000 fdcc 	bl	2328 <micros>
    1790:	1b80      	subs	r0, r0, r6
    1792:	4285      	cmp	r5, r0
    1794:	d810      	bhi.n	17b8 <i2c_t3::finish_(i2cStruct*, unsigned char, unsigned long)+0x5c>
    1796:	f894 3248 	ldrb.w	r3, [r4, #584]	; 0x248
    179a:	2b02      	cmp	r3, #2
    179c:	d10c      	bne.n	17b8 <i2c_t3::finish_(i2cStruct*, unsigned char, unsigned long)+0x5c>
    179e:	f894 325a 	ldrb.w	r3, [r4, #602]	; 0x25a
    17a2:	f013 0fff 	tst.w	r3, #255	; 0xff
    17a6:	d007      	beq.n	17b8 <i2c_t3::finish_(i2cStruct*, unsigned char, unsigned long)+0x5c>
    {
        // If DMA mode times out, then wait for transfer to end then mark it as timeout.
        // This is done this way because abruptly ending the DMA seems to cause
        // the I2C_S_BUSY flag to get stuck, and I cannot find a reliable way to clear it.
        while(!done_(i2c));
    17a8:	4620      	mov	r0, r4
    17aa:	f7ff ffab 	bl	1704 <i2c_t3::done_(i2cStruct*)>
    17ae:	2800      	cmp	r0, #0
    17b0:	d0fa      	beq.n	17a8 <i2c_t3::finish_(i2cStruct*, unsigned char, unsigned long)+0x4c>
        i2c->currentStatus = I2C_TIMEOUT;
    17b2:	2304      	movs	r3, #4
    17b4:	f884 3251 	strb.w	r3, [r4, #593]	; 0x251
    }

    // check exit status, if still Tx/Rx then timeout occurred
    if(i2c->currentStatus == I2C_SENDING ||
    17b8:	f894 3251 	ldrb.w	r3, [r4, #593]	; 0x251
    17bc:	b2db      	uxtb	r3, r3
       i2c->currentStatus == I2C_SEND_ADDR ||
    17be:	2b01      	cmp	r3, #1
    17c0:	d009      	beq.n	17d6 <i2c_t3::finish_(i2cStruct*, unsigned char, unsigned long)+0x7a>
    17c2:	f894 3251 	ldrb.w	r3, [r4, #593]	; 0x251
    17c6:	b2db      	uxtb	r3, r3
        while(!done_(i2c));
        i2c->currentStatus = I2C_TIMEOUT;
    }

    // check exit status, if still Tx/Rx then timeout occurred
    if(i2c->currentStatus == I2C_SENDING ||
    17c8:	2b02      	cmp	r3, #2
    17ca:	d004      	beq.n	17d6 <i2c_t3::finish_(i2cStruct*, unsigned char, unsigned long)+0x7a>
       i2c->currentStatus == I2C_SEND_ADDR ||
       i2c->currentStatus == I2C_RECEIVING)
    17cc:	f894 3251 	ldrb.w	r3, [r4, #593]	; 0x251
    17d0:	b2db      	uxtb	r3, r3
        while(!done_(i2c));
        i2c->currentStatus = I2C_TIMEOUT;
    }

    // check exit status, if still Tx/Rx then timeout occurred
    if(i2c->currentStatus == I2C_SENDING ||
    17d2:	2b03      	cmp	r3, #3
    17d4:	d102      	bne.n	17dc <i2c_t3::finish_(i2cStruct*, unsigned char, unsigned long)+0x80>
       i2c->currentStatus == I2C_SEND_ADDR ||
       i2c->currentStatus == I2C_RECEIVING)
        i2c->currentStatus = I2C_TIMEOUT; // set to timeout state
    17d6:	2304      	movs	r3, #4
    17d8:	f884 3251 	strb.w	r3, [r4, #593]	; 0x251
    17dc:	2340      	movs	r3, #64	; 0x40

000017de <L_3131_delayMicroseconds>:
    17de:	3b01      	subs	r3, #1
    17e0:	d1fd      	bne.n	17de <L_3131_delayMicroseconds>

    // delay to allow bus to settle (eg. allow STOP to complete and be recognized,
    //                               not just on our side, but on slave side also)
    delayMicroseconds(4);
    if(i2c->currentStatus == I2C_WAITING) return 1;
    17e2:	f894 3251 	ldrb.w	r3, [r4, #593]	; 0x251
    17e6:	f013 0fff 	tst.w	r3, #255	; 0xff
    return 0;
}
    17ea:	bf0c      	ite	eq
    17ec:	2001      	moveq	r0, #1
    17ee:	2000      	movne	r0, #0
    17f0:	bd70      	pop	{r4, r5, r6, pc}
    17f2:	bf00      	nop

000017f4 <i2c_t3::endTransmission(i2cStruct*, unsigned char, i2c_stop, unsigned long)>:
// parameters:
//      i2c_stop = I2C_NOSTOP, I2C_STOP
//      timeout = timeout in microseconds
//
uint8_t i2c_t3::endTransmission(struct i2cStruct* i2c, uint8_t bus, i2c_stop sendStop, uint32_t timeout)
{
    17f4:	b570      	push	{r4, r5, r6, lr}
    17f6:	4606      	mov	r6, r0
    17f8:	460c      	mov	r4, r1
    17fa:	4615      	mov	r5, r2
    17fc:	461a      	mov	r2, r3
    sendTransmission_(i2c, bus, sendStop, timeout);
    17fe:	9b04      	ldr	r3, [sp, #16]
    1800:	4629      	mov	r1, r5
    1802:	4620      	mov	r0, r4
    1804:	f7ff fd22 	bl	124c <i2c_t3::sendTransmission_(i2cStruct*, unsigned char, i2c_stop, unsigned long)>

    // wait for completion or timeout
    finish_(i2c, bus, timeout);
    1808:	9a04      	ldr	r2, [sp, #16]
    180a:	4629      	mov	r1, r5
    180c:	4620      	mov	r0, r4
    180e:	f7ff ffa5 	bl	175c <i2c_t3::finish_(i2cStruct*, unsigned char, unsigned long)>

    return getError();
    1812:	4630      	mov	r0, r6
    1814:	f7ff ff5c 	bl	16d0 <i2c_t3::getError()>
}
    1818:	bd70      	pop	{r4, r5, r6, pc}
    181a:	bf00      	nop

0000181c <i2c_t3::requestFrom_(i2cStruct*, unsigned char, unsigned char, unsigned int, i2c_stop, unsigned long)>:
//      timeout = timeout in microseconds
//
size_t i2c_t3::requestFrom_(struct i2cStruct* i2c, uint8_t bus, uint8_t addr, size_t len, i2c_stop sendStop, uint32_t timeout)
{
    // exit immediately if request for 0 bytes
    if(len == 0) return 0;
    181c:	b1a3      	cbz	r3, 1848 <i2c_t3::requestFrom_(i2cStruct*, unsigned char, unsigned char, unsigned int, i2c_stop, unsigned long)+0x2c>
//      length = number of bytes requested
//      i2c_stop = I2C_NOSTOP, I2C_STOP
//      timeout = timeout in microseconds
//
size_t i2c_t3::requestFrom_(struct i2cStruct* i2c, uint8_t bus, uint8_t addr, size_t len, i2c_stop sendStop, uint32_t timeout)
{
    181e:	b530      	push	{r4, r5, lr}
    1820:	b083      	sub	sp, #12
    1822:	460d      	mov	r5, r1
    1824:	4604      	mov	r4, r0
    // exit immediately if request for 0 bytes
    if(len == 0) return 0;

    sendRequest_(i2c, bus, addr, len, sendStop, timeout);
    1826:	9907      	ldr	r1, [sp, #28]
    1828:	9101      	str	r1, [sp, #4]
    182a:	f89d 1018 	ldrb.w	r1, [sp, #24]
    182e:	9100      	str	r1, [sp, #0]
    1830:	4629      	mov	r1, r5
    1832:	f7ff fdd3 	bl	13dc <i2c_t3::sendRequest_(i2cStruct*, unsigned char, unsigned char, unsigned int, i2c_stop, unsigned long)>

    // wait for completion or timeout
    if(finish_(i2c, bus, timeout))
    1836:	9a07      	ldr	r2, [sp, #28]
    1838:	4629      	mov	r1, r5
    183a:	4620      	mov	r0, r4
    183c:	f7ff ff8e 	bl	175c <i2c_t3::finish_(i2cStruct*, unsigned char, unsigned long)>
    1840:	b120      	cbz	r0, 184c <i2c_t3::requestFrom_(i2cStruct*, unsigned char, unsigned char, unsigned int, i2c_stop, unsigned long)+0x30>
        return i2c->rxBufferLength;
    1842:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    1846:	e002      	b.n	184e <i2c_t3::requestFrom_(i2cStruct*, unsigned char, unsigned char, unsigned int, i2c_stop, unsigned long)+0x32>
//      timeout = timeout in microseconds
//
size_t i2c_t3::requestFrom_(struct i2cStruct* i2c, uint8_t bus, uint8_t addr, size_t len, i2c_stop sendStop, uint32_t timeout)
{
    // exit immediately if request for 0 bytes
    if(len == 0) return 0;
    1848:	2000      	movs	r0, #0
    // wait for completion or timeout
    if(finish_(i2c, bus, timeout))
        return i2c->rxBufferLength;
    else
        return 0; // NAK, timeout or bus error
}
    184a:	4770      	bx	lr

    // wait for completion or timeout
    if(finish_(i2c, bus, timeout))
        return i2c->rxBufferLength;
    else
        return 0; // NAK, timeout or bus error
    184c:	2000      	movs	r0, #0
}
    184e:	b003      	add	sp, #12
    1850:	bd30      	pop	{r4, r5, pc}
    1852:	bf00      	nop

00001854 <i2c_t3::read_(i2cStruct*)>:
// Read - returns next data byte (signed int) from Rx buffer
// return: data, -1 if buffer empty
//
int i2c_t3::read_(struct i2cStruct* i2c)
{
    if(i2c->rxBufferIndex >= i2c->rxBufferLength) return -1;
    1854:	f8d0 2134 	ldr.w	r2, [r0, #308]	; 0x134
    1858:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
    185c:	429a      	cmp	r2, r3
    185e:	d208      	bcs.n	1872 <i2c_t3::read_(i2cStruct*)+0x1e>
    return i2c->rxBuffer[i2c->rxBufferIndex++];
    1860:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
    1864:	1c5a      	adds	r2, r3, #1
    1866:	f8c0 2134 	str.w	r2, [r0, #308]	; 0x134
    186a:	4418      	add	r0, r3
    186c:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    1870:	4770      	bx	lr
// Read - returns next data byte (signed int) from Rx buffer
// return: data, -1 if buffer empty
//
int i2c_t3::read_(struct i2cStruct* i2c)
{
    if(i2c->rxBufferIndex >= i2c->rxBufferLength) return -1;
    1872:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return i2c->rxBuffer[i2c->rxBufferIndex++];
}
    1876:	4770      	bx	lr

00001878 <i2c_t3::read()>:
    static int read_(struct i2cStruct* i2c);
    //
    // Read - returns next data byte (signed int) from Rx buffer
    // return: data, -1 if buffer empty
    //
    inline int read(void) { return read_(i2c); }
    1878:	b508      	push	{r3, lr}
    187a:	6900      	ldr	r0, [r0, #16]
    187c:	f7ff ffea 	bl	1854 <i2c_t3::read_(i2cStruct*)>
    1880:	bd08      	pop	{r3, pc}
    1882:	bf00      	nop

00001884 <i2c_t3::peek_(i2cStruct*)>:
// Peek - returns next data byte (signed int) from Rx buffer without removing it from Rx buffer
// return: data, -1 if buffer empty
//
int i2c_t3::peek_(struct i2cStruct* i2c)
{
    if(i2c->rxBufferIndex >= i2c->rxBufferLength) return -1;
    1884:	f8d0 2134 	ldr.w	r2, [r0, #308]	; 0x134
    1888:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
    188c:	429a      	cmp	r2, r3
    return i2c->rxBuffer[i2c->rxBufferIndex];
    188e:	bf3d      	ittte	cc
    1890:	f8d0 3134 	ldrcc.w	r3, [r0, #308]	; 0x134
    1894:	18c0      	addcc	r0, r0, r3
    1896:	f890 0030 	ldrbcc.w	r0, [r0, #48]	; 0x30
// Peek - returns next data byte (signed int) from Rx buffer without removing it from Rx buffer
// return: data, -1 if buffer empty
//
int i2c_t3::peek_(struct i2cStruct* i2c)
{
    if(i2c->rxBufferIndex >= i2c->rxBufferLength) return -1;
    189a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
    return i2c->rxBuffer[i2c->rxBufferIndex];
}
    189e:	4770      	bx	lr

000018a0 <i2c_t3::peek()>:
    static int peek_(struct i2cStruct* i2c);
    //
    // Peek - returns next data byte (signed int) from Rx buffer without removing it from Rx buffer
    // return: data, -1 if buffer empty
    //
    inline int peek(void) { return peek_(i2c); }
    18a0:	b508      	push	{r3, lr}
    18a2:	6900      	ldr	r0, [r0, #16]
    18a4:	f7ff ffee 	bl	1884 <i2c_t3::peek_(i2cStruct*)>
    18a8:	bd08      	pop	{r3, pc}
    18aa:	bf00      	nop

000018ac <i2c_t3::readByte_(i2cStruct*)>:
// Read Byte - returns next data byte (uint8_t) from Rx buffer
// return: data, 0 if buffer empty
//
uint8_t i2c_t3::readByte_(struct i2cStruct* i2c)
{
    if(i2c->rxBufferIndex >= i2c->rxBufferLength) return 0;
    18ac:	f8d0 2134 	ldr.w	r2, [r0, #308]	; 0x134
    18b0:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
    18b4:	429a      	cmp	r2, r3
    18b6:	d208      	bcs.n	18ca <i2c_t3::readByte_(i2cStruct*)+0x1e>
    return i2c->rxBuffer[i2c->rxBufferIndex++];
    18b8:	f8d0 3134 	ldr.w	r3, [r0, #308]	; 0x134
    18bc:	1c5a      	adds	r2, r3, #1
    18be:	f8c0 2134 	str.w	r2, [r0, #308]	; 0x134
    18c2:	4418      	add	r0, r3
    18c4:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    18c8:	4770      	bx	lr
// Read Byte - returns next data byte (uint8_t) from Rx buffer
// return: data, 0 if buffer empty
//
uint8_t i2c_t3::readByte_(struct i2cStruct* i2c)
{
    if(i2c->rxBufferIndex >= i2c->rxBufferLength) return 0;
    18ca:	2000      	movs	r0, #0
    return i2c->rxBuffer[i2c->rxBufferIndex++];
}
    18cc:	4770      	bx	lr
    18ce:	bf00      	nop

000018d0 <i2c_isr_handler>:

//
// I2C ISR base handler
//
void i2c_isr_handler(struct i2cStruct* i2c, uint8_t bus)
{
    18d0:	b538      	push	{r3, r4, r5, lr}
    uint8_t status, c1, data;

    status = *(i2c->S);
    18d2:	68c2      	ldr	r2, [r0, #12]
    18d4:	7815      	ldrb	r5, [r2, #0]
    18d6:	b2ed      	uxtb	r5, r5
    c1 = *(i2c->C1);
    18d8:	6881      	ldr	r1, [r0, #8]
    18da:	780b      	ldrb	r3, [r1, #0]
    18dc:	b2db      	uxtb	r3, r3
    #if defined(__MKL26Z64__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) // LC/3.5/3.6
        uint8_t flt = *(i2c->FLT);  // store flags
    #endif

    if(c1 & I2C_C1_MST)
    18de:	f013 0f20 	tst.w	r3, #32
    18e2:	f000 81c1 	beq.w	1c68 <L_4039_delayMicroseconds+0x26>
    {
        //
        // Master Mode
        //
        if(c1 & I2C_C1_TX)
    18e6:	f013 0f10 	tst.w	r3, #16
    18ea:	f000 8105 	beq.w	1af8 <i2c_isr_handler+0x228>
        {
            if(i2c->activeDMA == I2C_DMA_BULK || i2c->activeDMA == I2C_DMA_LAST)
    18ee:	f890 325a 	ldrb.w	r3, [r0, #602]	; 0x25a
    18f2:	b2db      	uxtb	r3, r3
    18f4:	2b02      	cmp	r3, #2
    18f6:	d004      	beq.n	1902 <i2c_isr_handler+0x32>
    18f8:	f890 325a 	ldrb.w	r3, [r0, #602]	; 0x25a
    18fc:	b2db      	uxtb	r3, r3
    18fe:	2b03      	cmp	r3, #3
    1900:	d14c      	bne.n	199c <i2c_isr_handler+0xcc>
            {
                if(i2c->DMA->complete() && i2c->activeDMA == I2C_DMA_BULK)
    1902:	f8d0 1264 	ldr.w	r1, [r0, #612]	; 0x264
	/***************************************/
	/**    Status                         **/
	/***************************************/

	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
    1906:	680b      	ldr	r3, [r1, #0]
    1908:	8b9b      	ldrh	r3, [r3, #28]
    190a:	f003 0380 	and.w	r3, r3, #128	; 0x80
    190e:	b29b      	uxth	r3, r3
    1910:	2b00      	cmp	r3, #0
    1912:	f000 8284 	beq.w	1e1e <L_4039_delayMicroseconds+0x1dc>
    1916:	f890 325a 	ldrb.w	r3, [r0, #602]	; 0x25a
    191a:	b2db      	uxtb	r3, r3
    191c:	2b02      	cmp	r3, #2
    191e:	f040 827e 	bne.w	1e1e <L_4039_delayMicroseconds+0x1dc>
    1922:	e272      	b.n	1e0a <L_4039_delayMicroseconds+0x1c8>
                    i2c->activeDMA = I2C_DMA_LAST;
                }
                else if(i2c->activeDMA == I2C_DMA_LAST)
                {
                    // wait for TCF
                    while(!(*(i2c->S) & I2C_S_TCF));
    1924:	7813      	ldrb	r3, [r2, #0]
    1926:	f013 0f80 	tst.w	r3, #128	; 0x80
    192a:	d0fb      	beq.n	1924 <i2c_isr_handler+0x54>
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    192c:	790a      	ldrb	r2, [r1, #4]
    192e:	4bb5      	ldr	r3, [pc, #724]	; (1c04 <L_3900_delayMicroseconds+0x8c>)
    1930:	701a      	strb	r2, [r3, #0]
                    // clear DMA, only do this after TCF
                    i2c->DMA->clearComplete();
                    // re-engage ISR for last byte
                    i2c->activeDMA = I2C_DMA_OFF;
    1932:	2300      	movs	r3, #0
    1934:	f880 325a 	strb.w	r3, [r0, #602]	; 0x25a
                    i2c->txBufferIndex = i2c->txBufferLength-1;
    1938:	f8d0 3244 	ldr.w	r3, [r0, #580]	; 0x244
    193c:	3b01      	subs	r3, #1
    193e:	f8c0 3240 	str.w	r3, [r0, #576]	; 0x240
                    *(i2c->D) = i2c->txBuffer[i2c->txBufferIndex];
    1942:	6902      	ldr	r2, [r0, #16]
    1944:	f8d0 3240 	ldr.w	r3, [r0, #576]	; 0x240
    1948:	4403      	add	r3, r0
    194a:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
    194e:	7013      	strb	r3, [r2, #0]
    1950:	e020      	b.n	1994 <i2c_isr_handler+0xc4>
	}
	bool error(void) {
		if (DMA_ERR & (1<<channel)) return true;
    1952:	4bad      	ldr	r3, [pc, #692]	; (1c08 <L_3900_delayMicroseconds+0x90>)
    1954:	681c      	ldr	r4, [r3, #0]
    1956:	790a      	ldrb	r2, [r1, #4]
                }
                else if(i2c->DMA->error())
    1958:	2301      	movs	r3, #1
    195a:	4093      	lsls	r3, r2
    195c:	4223      	tst	r3, r4
    195e:	d019      	beq.n	1994 <i2c_isr_handler+0xc4>
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    1960:	4baa      	ldr	r3, [pc, #680]	; (1c0c <L_3900_delayMicroseconds+0x94>)
    1962:	701a      	strb	r2, [r3, #0]
	bool error(void) {
		if (DMA_ERR & (1<<channel)) return true;
		return false;
	}
	void clearError(void) {
		DMA_CERR = channel;
    1964:	f8d0 3264 	ldr.w	r3, [r0, #612]	; 0x264
    1968:	791a      	ldrb	r2, [r3, #4]
    196a:	4ba9      	ldr	r3, [pc, #676]	; (1c10 <L_3900_delayMicroseconds+0x98>)
    196c:	701a      	strb	r2, [r3, #0]
                {
                    i2c->DMA->clearInterrupt();
                    i2c->DMA->clearError();
                    i2c->activeDMA = I2C_DMA_OFF;
    196e:	2300      	movs	r3, #0
    1970:	f880 325a 	strb.w	r3, [r0, #602]	; 0x25a
                    // check arbitration
                    if(status & I2C_S_ARBL)
    1974:	f015 0f10 	tst.w	r5, #16
    1978:	d00c      	beq.n	1994 <i2c_isr_handler+0xc4>
                    {
                        // Arbitration Lost
                        i2c->currentStatus = I2C_ARB_LOST;
    197a:	2307      	movs	r3, #7
    197c:	f880 3251 	strb.w	r3, [r0, #593]	; 0x251
                        *(i2c->S) = I2C_S_ARBL | I2C_S_IICIF; // clear arbl flag and intr
    1980:	68c3      	ldr	r3, [r0, #12]
    1982:	2212      	movs	r2, #18
    1984:	701a      	strb	r2, [r3, #0]
                        *(i2c->C1) = I2C_C1_IICEN; // change to Rx mode, intr disabled (does this send STOP if ARBL flagged?), DMA disabled
    1986:	6883      	ldr	r3, [r0, #8]
    1988:	2280      	movs	r2, #128	; 0x80
    198a:	701a      	strb	r2, [r3, #0]
                        i2c->txBufferIndex = 0; // reset Tx buffer index to prepare for resend
    198c:	2300      	movs	r3, #0
    198e:	f8c0 3240 	str.w	r3, [r0, #576]	; 0x240
                        return; // TODO does this need to check IAAS and drop to Slave Rx? if so set Rx + dummy read. not sure if this would work for DMA
    1992:	bd38      	pop	{r3, r4, r5, pc}
                    }
                }
                *(i2c->S) = I2C_S_IICIF; // clear intr
    1994:	68c3      	ldr	r3, [r0, #12]
    1996:	2202      	movs	r2, #2
    1998:	701a      	strb	r2, [r3, #0]
                return;
    199a:	bd38      	pop	{r3, r4, r5, pc}
            } // end DMA Tx
            else
            {
                // Continue Master Transmit
                // check if Master Tx or Rx
                if(i2c->currentStatus == I2C_SENDING)
    199c:	f890 3251 	ldrb.w	r3, [r0, #593]	; 0x251
    19a0:	b2db      	uxtb	r3, r3
    19a2:	2b01      	cmp	r3, #1
    19a4:	d156      	bne.n	1a54 <i2c_isr_handler+0x184>
                {
                    // check arbitration
                    if(status & I2C_S_ARBL)
    19a6:	f015 0f10 	tst.w	r5, #16
    19aa:	d00d      	beq.n	19c8 <i2c_isr_handler+0xf8>
                    {
                        // Arbitration Lost
                        i2c->activeDMA = I2C_DMA_OFF; // clear pending DMA (if happens on address byte)
    19ac:	2300      	movs	r3, #0
    19ae:	f880 325a 	strb.w	r3, [r0, #602]	; 0x25a
                        i2c->currentStatus = I2C_ARB_LOST;
    19b2:	2107      	movs	r1, #7
    19b4:	f880 1251 	strb.w	r1, [r0, #593]	; 0x251
                        *(i2c->S) = I2C_S_ARBL | I2C_S_IICIF; // clear arbl flag and intr
    19b8:	2112      	movs	r1, #18
    19ba:	7011      	strb	r1, [r2, #0]
                        *(i2c->C1) = I2C_C1_IICEN; // change to Rx mode, intr disabled (does this send STOP if ARBL flagged?)
    19bc:	6882      	ldr	r2, [r0, #8]
    19be:	2180      	movs	r1, #128	; 0x80
    19c0:	7011      	strb	r1, [r2, #0]
                        i2c->txBufferIndex = 0; // reset Tx buffer index to prepare for resend
    19c2:	f8c0 3240 	str.w	r3, [r0, #576]	; 0x240
                        return; // does this need to check IAAS and drop to Slave Rx? if so set Rx + dummy read.
    19c6:	bd38      	pop	{r3, r4, r5, pc}
                    }
                    // check if slave ACK'd
                    else if(status & I2C_S_RXAK)
    19c8:	f015 0f01 	tst.w	r5, #1
    19cc:	d00f      	beq.n	19ee <i2c_isr_handler+0x11e>
                    {
                        i2c->activeDMA = I2C_DMA_OFF; // clear pending DMA (if happens on address byte)
    19ce:	2300      	movs	r3, #0
    19d0:	f880 325a 	strb.w	r3, [r0, #602]	; 0x25a
                        if(i2c->txBufferIndex == 0)
    19d4:	f8d0 3240 	ldr.w	r3, [r0, #576]	; 0x240
    19d8:	b91b      	cbnz	r3, 19e2 <i2c_isr_handler+0x112>
                            i2c->currentStatus = I2C_ADDR_NAK; // NAK on Addr
    19da:	2305      	movs	r3, #5
    19dc:	f880 3251 	strb.w	r3, [r0, #593]	; 0x251
    19e0:	e002      	b.n	19e8 <i2c_isr_handler+0x118>
                        else
                            i2c->currentStatus = I2C_DATA_NAK; // NAK on Data
    19e2:	2306      	movs	r3, #6
    19e4:	f880 3251 	strb.w	r3, [r0, #593]	; 0x251
                        // send STOP, change to Rx mode, intr disabled
                        // note: Slave NAK is an error, so send STOP regardless of setting
                        *(i2c->C1) = I2C_C1_IICEN;
    19e8:	2380      	movs	r3, #128	; 0x80
    19ea:	700b      	strb	r3, [r1, #0]
    19ec:	e02e      	b.n	1a4c <i2c_isr_handler+0x17c>
                    }
                    else
                    {
                        // check if last byte transmitted
                        if(++i2c->txBufferIndex >= i2c->txBufferLength)
    19ee:	f8d0 3240 	ldr.w	r3, [r0, #576]	; 0x240
    19f2:	3301      	adds	r3, #1
    19f4:	f8c0 3240 	str.w	r3, [r0, #576]	; 0x240
    19f8:	f8d0 2244 	ldr.w	r2, [r0, #580]	; 0x244
    19fc:	4293      	cmp	r3, r2
    19fe:	d30a      	bcc.n	1a16 <i2c_isr_handler+0x146>
                        {
                            // Tx complete, change to waiting state
                            i2c->currentStatus = I2C_WAITING;
    1a00:	2300      	movs	r3, #0
    1a02:	f880 3251 	strb.w	r3, [r0, #593]	; 0x251
                            // send STOP if configured
                            if(i2c->currentStop == I2C_STOP)
    1a06:	f890 3250 	ldrb.w	r3, [r0, #592]	; 0x250
    1a0a:	2b01      	cmp	r3, #1
                                *(i2c->C1) = I2C_C1_IICEN; // send STOP, change to Rx mode, intr disabled
    1a0c:	bf0c      	ite	eq
    1a0e:	2380      	moveq	r3, #128	; 0x80
                            else
                                *(i2c->C1) = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX; // no STOP, stay in Tx mode, intr disabled
    1a10:	23b0      	movne	r3, #176	; 0xb0
    1a12:	700b      	strb	r3, [r1, #0]
    1a14:	e01a      	b.n	1a4c <i2c_isr_handler+0x17c>
                        }
                        else if(i2c->activeDMA == I2C_DMA_ADDR)
    1a16:	f890 325a 	ldrb.w	r3, [r0, #602]	; 0x25a
    1a1a:	b2db      	uxtb	r3, r3
    1a1c:	2b01      	cmp	r3, #1
    1a1e:	d10e      	bne.n	1a3e <i2c_isr_handler+0x16e>
                        {
                            // Start DMA
                            i2c->activeDMA = I2C_DMA_BULK;
    1a20:	2302      	movs	r3, #2
    1a22:	f880 325a 	strb.w	r3, [r0, #602]	; 0x25a
                            *(i2c->C1) = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_MST | I2C_C1_TX | I2C_C1_DMAEN; // intr en, Tx mode, DMA en
    1a26:	23f1      	movs	r3, #241	; 0xf1
    1a28:	700b      	strb	r3, [r1, #0]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    1a2a:	f8d0 3264 	ldr.w	r3, [r0, #612]	; 0x264
    1a2e:	791a      	ldrb	r2, [r3, #4]
    1a30:	4b78      	ldr	r3, [pc, #480]	; (1c14 <L_3900_delayMicroseconds+0x9c>)
    1a32:	701a      	strb	r2, [r3, #0]
                            i2c->DMA->enable();
                            *(i2c->D) = i2c->txBuffer[1]; // DMA will start on next request
    1a34:	6903      	ldr	r3, [r0, #16]
    1a36:	f890 213d 	ldrb.w	r2, [r0, #317]	; 0x13d
    1a3a:	701a      	strb	r2, [r3, #0]
    1a3c:	e006      	b.n	1a4c <i2c_isr_handler+0x17c>
                        }
                        else
                        {
                            // ISR transmit next byte
                            *(i2c->D) = i2c->txBuffer[i2c->txBufferIndex];
    1a3e:	6902      	ldr	r2, [r0, #16]
    1a40:	f8d0 3240 	ldr.w	r3, [r0, #576]	; 0x240
    1a44:	4403      	add	r3, r0
    1a46:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
    1a4a:	7013      	strb	r3, [r2, #0]
                        }
                    }
                    *(i2c->S) = I2C_S_IICIF; // clear intr
    1a4c:	68c3      	ldr	r3, [r0, #12]
    1a4e:	2202      	movs	r2, #2
    1a50:	701a      	strb	r2, [r3, #0]
                    return;
    1a52:	bd38      	pop	{r3, r4, r5, pc}
                }
                else if(i2c->currentStatus == I2C_SEND_ADDR)
    1a54:	f890 3251 	ldrb.w	r3, [r0, #593]	; 0x251
    1a58:	b2db      	uxtb	r3, r3
    1a5a:	2b02      	cmp	r3, #2
    1a5c:	d136      	bne.n	1acc <i2c_isr_handler+0x1fc>
                {
                    // Master Receive, addr sent
                    if(status & I2C_S_ARBL)
    1a5e:	f015 0f10 	tst.w	r5, #16
    1a62:	d008      	beq.n	1a76 <i2c_isr_handler+0x1a6>
                    {
                        // Arbitration Lost
                        i2c->currentStatus = I2C_ARB_LOST;
    1a64:	2307      	movs	r3, #7
    1a66:	f880 3251 	strb.w	r3, [r0, #593]	; 0x251
                        *(i2c->S) = I2C_S_ARBL | I2C_S_IICIF; // clear arbl flag and intr
    1a6a:	2312      	movs	r3, #18
    1a6c:	7013      	strb	r3, [r2, #0]
                        *(i2c->C1) = I2C_C1_IICEN; // change to Rx mode, intr disabled (does this send STOP if ARBL flagged?)
    1a6e:	6883      	ldr	r3, [r0, #8]
    1a70:	2280      	movs	r2, #128	; 0x80
    1a72:	701a      	strb	r2, [r3, #0]
                        return; // TODO does this need to check IAAS and drop to Slave Rx? if so set Rx + dummy read. not sure if this would work for DMA
    1a74:	bd38      	pop	{r3, r4, r5, pc}
                    }
                    else if(status & I2C_S_RXAK)
    1a76:	f015 0f01 	tst.w	r5, #1
    1a7a:	d005      	beq.n	1a88 <i2c_isr_handler+0x1b8>
                    {
                        // Slave addr NAK
                        i2c->currentStatus = I2C_ADDR_NAK; // NAK on Addr
    1a7c:	2305      	movs	r3, #5
    1a7e:	f880 3251 	strb.w	r3, [r0, #593]	; 0x251
                        // send STOP, change to Rx mode, intr disabled
                        *(i2c->C1) = I2C_C1_IICEN;
    1a82:	2380      	movs	r3, #128	; 0x80
    1a84:	700b      	strb	r3, [r1, #0]
    1a86:	e01d      	b.n	1ac4 <i2c_isr_handler+0x1f4>
                    }
                    else if(i2c->activeDMA == I2C_DMA_ADDR)
    1a88:	f890 325a 	ldrb.w	r3, [r0, #602]	; 0x25a
    1a8c:	b2db      	uxtb	r3, r3
    1a8e:	2b01      	cmp	r3, #1
    1a90:	d10c      	bne.n	1aac <i2c_isr_handler+0x1dc>
                    {
                        // Start DMA
                        i2c->activeDMA = I2C_DMA_BULK;
    1a92:	2302      	movs	r3, #2
    1a94:	f880 325a 	strb.w	r3, [r0, #602]	; 0x25a
                        *(i2c->C1) = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_MST | I2C_C1_DMAEN; // intr en, no STOP, change to Rx, DMA en
    1a98:	23e1      	movs	r3, #225	; 0xe1
    1a9a:	700b      	strb	r3, [r1, #0]
    1a9c:	f8d0 3264 	ldr.w	r3, [r0, #612]	; 0x264
    1aa0:	791a      	ldrb	r2, [r3, #4]
    1aa2:	4b5c      	ldr	r3, [pc, #368]	; (1c14 <L_3900_delayMicroseconds+0x9c>)
    1aa4:	701a      	strb	r2, [r3, #0]
                        i2c->DMA->enable();
                        data = *(i2c->D); // dummy read
    1aa6:	6903      	ldr	r3, [r0, #16]
    1aa8:	781b      	ldrb	r3, [r3, #0]
    1aaa:	e00b      	b.n	1ac4 <i2c_isr_handler+0x1f4>
                    }
                    else
                    {
                        // Slave addr ACK, change to Rx mode
                        i2c->currentStatus = I2C_RECEIVING;
    1aac:	2303      	movs	r3, #3
    1aae:	f880 3251 	strb.w	r3, [r0, #593]	; 0x251
                        if(i2c->reqCount == 1)
    1ab2:	f8d0 3254 	ldr.w	r3, [r0, #596]	; 0x254
    1ab6:	2b01      	cmp	r3, #1
                            *(i2c->C1) = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_MST | I2C_C1_TXAK; // no STOP, Rx, NAK on recv
    1ab8:	bf0c      	ite	eq
    1aba:	23e8      	moveq	r3, #232	; 0xe8
                        else
                            *(i2c->C1) = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_MST; // no STOP, change to Rx
    1abc:	23e0      	movne	r3, #224	; 0xe0
    1abe:	700b      	strb	r3, [r1, #0]
                        data = *(i2c->D); // dummy read
    1ac0:	6903      	ldr	r3, [r0, #16]
    1ac2:	781b      	ldrb	r3, [r3, #0]
                    }
                    *(i2c->S) = I2C_S_IICIF; // clear intr
    1ac4:	68c3      	ldr	r3, [r0, #12]
    1ac6:	2202      	movs	r2, #2
    1ac8:	701a      	strb	r2, [r3, #0]
                    return;
    1aca:	bd38      	pop	{r3, r4, r5, pc}
                }
                else if(i2c->currentStatus == I2C_TIMEOUT)
    1acc:	f890 3251 	ldrb.w	r3, [r0, #593]	; 0x251
    1ad0:	b2db      	uxtb	r3, r3
    1ad2:	2b04      	cmp	r3, #4
    1ad4:	d10a      	bne.n	1aec <i2c_isr_handler+0x21c>
                {
                    // send STOP if configured
                    if(i2c->currentStop == I2C_STOP)
    1ad6:	f890 3250 	ldrb.w	r3, [r0, #592]	; 0x250
    1ada:	2b01      	cmp	r3, #1
                    {
                        // send STOP, change to Rx mode, intr disabled
                        *(i2c->C1) = I2C_C1_IICEN;
    1adc:	bf0c      	ite	eq
    1ade:	2380      	moveq	r3, #128	; 0x80
                    }
                    else
                    {
                        // no STOP, stay in Tx mode, intr disabled
                        *(i2c->C1) = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    1ae0:	23b0      	movne	r3, #176	; 0xb0
    1ae2:	700b      	strb	r3, [r1, #0]
                    }
                    *(i2c->S) = I2C_S_IICIF; // clear intr
    1ae4:	68c3      	ldr	r3, [r0, #12]
    1ae6:	2202      	movs	r2, #2
    1ae8:	701a      	strb	r2, [r3, #0]
                    return;
    1aea:	bd38      	pop	{r3, r4, r5, pc}
                }
                else
                {
                    // Should not be in Tx mode if not sending
                    // send STOP, change to Rx mode, intr disabled
                    *(i2c->C1) = I2C_C1_IICEN;
    1aec:	2380      	movs	r3, #128	; 0x80
    1aee:	700b      	strb	r3, [r1, #0]
                    *(i2c->S) = I2C_S_IICIF; // clear intr
    1af0:	68c3      	ldr	r3, [r0, #12]
    1af2:	2202      	movs	r2, #2
    1af4:	701a      	strb	r2, [r3, #0]
                    return;
    1af6:	bd38      	pop	{r3, r4, r5, pc}
        }
        else
        {
            // Continue Master Receive
            //
            if(i2c->activeDMA == I2C_DMA_BULK || i2c->activeDMA == I2C_DMA_LAST)
    1af8:	f890 325a 	ldrb.w	r3, [r0, #602]	; 0x25a
    1afc:	b2db      	uxtb	r3, r3
    1afe:	2b02      	cmp	r3, #2
    1b00:	d004      	beq.n	1b0c <i2c_isr_handler+0x23c>
    1b02:	f890 325a 	ldrb.w	r3, [r0, #602]	; 0x25a
    1b06:	b2db      	uxtb	r3, r3
    1b08:	2b03      	cmp	r3, #3
    1b0a:	d155      	bne.n	1bb8 <L_3900_delayMicroseconds+0x40>
            {
                if(i2c->DMA->complete() && i2c->activeDMA == I2C_DMA_BULK) // 2nd to last byte
    1b0c:	f8d0 2264 	ldr.w	r2, [r0, #612]	; 0x264
	/***************************************/
	/**    Status                         **/
	/***************************************/

	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
    1b10:	6813      	ldr	r3, [r2, #0]
    1b12:	8b9b      	ldrh	r3, [r3, #28]
    1b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
    1b18:	b29b      	uxth	r3, r3
    1b1a:	2b00      	cmp	r3, #0
    1b1c:	f000 8190 	beq.w	1e40 <L_4039_delayMicroseconds+0x1fe>
    1b20:	f890 325a 	ldrb.w	r3, [r0, #602]	; 0x25a
    1b24:	b2db      	uxtb	r3, r3
    1b26:	2b02      	cmp	r3, #2
    1b28:	f040 818a 	bne.w	1e40 <L_4039_delayMicroseconds+0x1fe>
    1b2c:	e17e      	b.n	1e2c <L_4039_delayMicroseconds+0x1ea>
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    1b2e:	7912      	ldrb	r2, [r2, #4]
    1b30:	4b34      	ldr	r3, [pc, #208]	; (1c04 <L_3900_delayMicroseconds+0x8c>)
    1b32:	701a      	strb	r2, [r3, #0]
                }
                else if(i2c->activeDMA == I2C_DMA_LAST) // last byte
                {
                    // clear DMA
                    i2c->DMA->clearComplete();
                    i2c->activeDMA = I2C_DMA_OFF;
    1b34:	2300      	movs	r3, #0
    1b36:	f880 325a 	strb.w	r3, [r0, #602]	; 0x25a
                    if(i2c->currentStatus != I2C_TIMEOUT)
    1b3a:	f890 3251 	ldrb.w	r3, [r0, #593]	; 0x251
    1b3e:	b2db      	uxtb	r3, r3
    1b40:	2b04      	cmp	r3, #4
                        i2c->currentStatus = I2C_WAITING; // Rx complete, change to waiting state
    1b42:	bf1c      	itt	ne
    1b44:	2300      	movne	r3, #0
    1b46:	f880 3251 	strbne.w	r3, [r0, #593]	; 0x251
                    // change to Tx mode
                    *(i2c->C1) = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    1b4a:	6883      	ldr	r3, [r0, #8]
    1b4c:	22b0      	movs	r2, #176	; 0xb0
    1b4e:	701a      	strb	r2, [r3, #0]
                    // grab last data
                    i2c->rxBufferLength = i2c->reqCount-1;
    1b50:	f8d0 3254 	ldr.w	r3, [r0, #596]	; 0x254
    1b54:	3b01      	subs	r3, #1
    1b56:	f8c0 3138 	str.w	r3, [r0, #312]	; 0x138
                    i2c->rxBuffer[i2c->rxBufferLength++] = *(i2c->D);
    1b5a:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
    1b5e:	1c5a      	adds	r2, r3, #1
    1b60:	f8c0 2138 	str.w	r2, [r0, #312]	; 0x138
    1b64:	6902      	ldr	r2, [r0, #16]
    1b66:	7812      	ldrb	r2, [r2, #0]
    1b68:	4403      	add	r3, r0
    1b6a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                    if(i2c->currentStop == I2C_STOP) // NAK then STOP
    1b6e:	f890 3250 	ldrb.w	r3, [r0, #592]	; 0x250
    1b72:	2b01      	cmp	r3, #1
    1b74:	d11c      	bne.n	1bb0 <L_3900_delayMicroseconds+0x38>
    1b76:	2310      	movs	r3, #16

00001b78 <L_3900_delayMicroseconds>:
    1b78:	3b01      	subs	r3, #1
    1b7a:	d1fd      	bne.n	1b78 <L_3900_delayMicroseconds>
                    {
                        delayMicroseconds(1); // empirical patch, lets things settle before issuing STOP
                        *(i2c->C1) = I2C_C1_IICEN; // send STOP, change to Rx mode, intr disabled
    1b7c:	6883      	ldr	r3, [r0, #8]
    1b7e:	2280      	movs	r2, #128	; 0x80
    1b80:	701a      	strb	r2, [r3, #0]
    1b82:	e015      	b.n	1bb0 <L_3900_delayMicroseconds+0x38>
	}
	bool error(void) {
		if (DMA_ERR & (1<<channel)) return true;
    1b84:	4b20      	ldr	r3, [pc, #128]	; (1c08 <L_3900_delayMicroseconds+0x90>)
    1b86:	6819      	ldr	r1, [r3, #0]
    1b88:	7912      	ldrb	r2, [r2, #4]
                    }
                    // else NAK no STOP
                }
                else if(i2c->DMA->error()) // not sure what would cause this...
    1b8a:	2301      	movs	r3, #1
    1b8c:	4093      	lsls	r3, r2
    1b8e:	420b      	tst	r3, r1
    1b90:	d00e      	beq.n	1bb0 <L_3900_delayMicroseconds+0x38>
		return false;
	}
	void clearError(void) {
		DMA_CERR = channel;
    1b92:	4b1f      	ldr	r3, [pc, #124]	; (1c10 <L_3900_delayMicroseconds+0x98>)
    1b94:	701a      	strb	r2, [r3, #0]
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    1b96:	f8d0 3264 	ldr.w	r3, [r0, #612]	; 0x264
    1b9a:	791a      	ldrb	r2, [r3, #4]
    1b9c:	4b1b      	ldr	r3, [pc, #108]	; (1c0c <L_3900_delayMicroseconds+0x94>)
    1b9e:	701a      	strb	r2, [r3, #0]
                {
                    i2c->DMA->clearError();
                    i2c->DMA->clearInterrupt();
                    i2c->activeDMA = I2C_DMA_OFF;
    1ba0:	2300      	movs	r3, #0
    1ba2:	f880 325a 	strb.w	r3, [r0, #602]	; 0x25a
                    i2c->currentStatus = I2C_WAITING;
    1ba6:	f880 3251 	strb.w	r3, [r0, #593]	; 0x251
                    *(i2c->C1) = I2C_C1_IICEN; // change to Rx mode, intr disabled, DMA disabled
    1baa:	6883      	ldr	r3, [r0, #8]
    1bac:	2280      	movs	r2, #128	; 0x80
    1bae:	701a      	strb	r2, [r3, #0]
                }
                *(i2c->S) = I2C_S_IICIF; // clear intr
    1bb0:	68c3      	ldr	r3, [r0, #12]
    1bb2:	2202      	movs	r2, #2
    1bb4:	701a      	strb	r2, [r3, #0]
                return;
    1bb6:	bd38      	pop	{r3, r4, r5, pc}
            }
            else
            {
                // check if 2nd to last byte or timeout
                if((i2c->rxBufferLength+2) == i2c->reqCount || (i2c->currentStatus == I2C_TIMEOUT && !i2c->timeoutRxNAK))
    1bb8:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
    1bbc:	3302      	adds	r3, #2
    1bbe:	f8d0 2254 	ldr.w	r2, [r0, #596]	; 0x254
    1bc2:	4293      	cmp	r3, r2
    1bc4:	f000 8143 	beq.w	1e4e <L_4039_delayMicroseconds+0x20c>
    1bc8:	f890 3251 	ldrb.w	r3, [r0, #593]	; 0x251
    1bcc:	b2db      	uxtb	r3, r3
    1bce:	2b04      	cmp	r3, #4
    1bd0:	d104      	bne.n	1bdc <L_3900_delayMicroseconds+0x64>
    1bd2:	f890 3259 	ldrb.w	r3, [r0, #601]	; 0x259
    1bd6:	2b00      	cmp	r3, #0
    1bd8:	f000 8139 	beq.w	1e4e <L_4039_delayMicroseconds+0x20c>
                {
                    *(i2c->C1) = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_MST | I2C_C1_TXAK; // no STOP, Rx, NAK on recv
                }
                // if last byte or timeout send STOP
                if((i2c->rxBufferLength+1) >= i2c->reqCount || (i2c->currentStatus == I2C_TIMEOUT && i2c->timeoutRxNAK))
    1bdc:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
    1be0:	3301      	adds	r3, #1
    1be2:	f8d0 2254 	ldr.w	r2, [r0, #596]	; 0x254
    1be6:	4293      	cmp	r3, r2
    1be8:	f080 813f 	bcs.w	1e6a <L_4039_delayMicroseconds+0x228>
    1bec:	f890 3251 	ldrb.w	r3, [r0, #593]	; 0x251
    1bf0:	b2db      	uxtb	r3, r3
    1bf2:	2b04      	cmp	r3, #4
    1bf4:	f040 812e 	bne.w	1e54 <L_4039_delayMicroseconds+0x212>
    1bf8:	f890 3259 	ldrb.w	r3, [r0, #601]	; 0x259
    1bfc:	2b00      	cmp	r3, #0
    1bfe:	f040 8134 	bne.w	1e6a <L_4039_delayMicroseconds+0x228>
    1c02:	e127      	b.n	1e54 <L_4039_delayMicroseconds+0x212>
    1c04:	4000801c 	.word	0x4000801c
    1c08:	4000802c 	.word	0x4000802c
    1c0c:	4000801f 	.word	0x4000801f
    1c10:	4000801e 	.word	0x4000801e
    1c14:	4000801b 	.word	0x4000801b
                {
                    i2c->timeoutRxNAK = 0; // clear flag
                    if(i2c->currentStatus != I2C_TIMEOUT)
                        i2c->currentStatus = I2C_WAITING; // Rx complete, change to waiting state
    1c18:	2300      	movs	r3, #0
    1c1a:	f880 3251 	strb.w	r3, [r0, #593]	; 0x251
                    // change to Tx mode
                    *(i2c->C1) = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    1c1e:	6883      	ldr	r3, [r0, #8]
    1c20:	22b0      	movs	r2, #176	; 0xb0
    1c22:	701a      	strb	r2, [r3, #0]
                    // grab last data
                    i2c->rxBuffer[i2c->rxBufferLength++] = *(i2c->D);
    1c24:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
    1c28:	1c5a      	adds	r2, r3, #1
    1c2a:	f8c0 2138 	str.w	r2, [r0, #312]	; 0x138
    1c2e:	6902      	ldr	r2, [r0, #16]
    1c30:	7812      	ldrb	r2, [r2, #0]
    1c32:	4403      	add	r3, r0
    1c34:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                    if(i2c->currentStop == I2C_STOP) // NAK then STOP
    1c38:	f890 3250 	ldrb.w	r3, [r0, #592]	; 0x250
    1c3c:	2b01      	cmp	r3, #1
    1c3e:	d105      	bne.n	1c4c <L_4039_delayMicroseconds+0xa>
    1c40:	2310      	movs	r3, #16

00001c42 <L_4039_delayMicroseconds>:
    1c42:	3b01      	subs	r3, #1
    1c44:	d1fd      	bne.n	1c42 <L_4039_delayMicroseconds>
                    {
                        delayMicroseconds(1); // empirical patch, lets things settle before issuing STOP
                        *(i2c->C1) = I2C_C1_IICEN; // send STOP, change to Rx mode, intr disabled
    1c46:	6883      	ldr	r3, [r0, #8]
    1c48:	2280      	movs	r2, #128	; 0x80
    1c4a:	701a      	strb	r2, [r3, #0]
                else
                {
                    // grab next data, not last byte, will ACK
                    i2c->rxBuffer[i2c->rxBufferLength++] = *(i2c->D);
                }
                if(i2c->currentStatus == I2C_TIMEOUT && !i2c->timeoutRxNAK)
    1c4c:	f890 3251 	ldrb.w	r3, [r0, #593]	; 0x251
    1c50:	b2db      	uxtb	r3, r3
    1c52:	2b04      	cmp	r3, #4
    1c54:	d104      	bne.n	1c60 <L_4039_delayMicroseconds+0x1e>
    1c56:	f890 3259 	ldrb.w	r3, [r0, #601]	; 0x259
    1c5a:	2b00      	cmp	r3, #0
    1c5c:	f000 810f 	beq.w	1e7e <L_4039_delayMicroseconds+0x23c>
                    i2c->timeoutRxNAK = 1; // set flag to indicate NAK sent
                *(i2c->S) = I2C_S_IICIF; // clear intr
    1c60:	68c3      	ldr	r3, [r0, #12]
    1c62:	2202      	movs	r2, #2
    1c64:	701a      	strb	r2, [r3, #0]
                return;
    1c66:	bd38      	pop	{r3, r4, r5, pc}
    1c68:	4604      	mov	r4, r0
    else
    {
        //
        // Slave Mode
        //
        if(status & I2C_S_ARBL)
    1c6a:	f015 0f10 	tst.w	r5, #16
    1c6e:	d008      	beq.n	1c82 <L_4039_delayMicroseconds+0x40>
        {
            // Arbitration Lost
            *(i2c->S) = I2C_S_ARBL; // clear arbl flag
    1c70:	2310      	movs	r3, #16
    1c72:	7013      	strb	r3, [r2, #0]
            if(!(status & I2C_S_IAAS))
    1c74:	f015 0f40 	tst.w	r5, #64	; 0x40
    1c78:	d106      	bne.n	1c88 <L_4039_delayMicroseconds+0x46>
            {
                #if defined(__MKL26Z64__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) // LC/3.5/3.6
                    *(i2c->FLT) = flt;   // clear STOP/START intr
                #endif
                *(i2c->S) = I2C_S_IICIF; // clear intr
    1c7a:	68c3      	ldr	r3, [r0, #12]
    1c7c:	2202      	movs	r2, #2
    1c7e:	701a      	strb	r2, [r3, #0]
                return;
    1c80:	bd38      	pop	{r3, r4, r5, pc}
            }
        }
        if(status & I2C_S_IAAS)
    1c82:	f015 0f40 	tst.w	r5, #64	; 0x40
    1c86:	d060      	beq.n	1d4a <L_4039_delayMicroseconds+0x108>
        {
            // If in Slave Rx already, then RepSTART occured, run callback
            if(i2c->currentStatus == I2C_SLAVE_RX && i2c->user_onReceive != nullptr)
    1c88:	f894 3251 	ldrb.w	r3, [r4, #593]	; 0x251
    1c8c:	b2db      	uxtb	r3, r3
    1c8e:	2b0a      	cmp	r3, #10
    1c90:	d104      	bne.n	1c9c <L_4039_delayMicroseconds+0x5a>
    1c92:	f8d4 325c 	ldr.w	r3, [r4, #604]	; 0x25c
    1c96:	2b00      	cmp	r3, #0
    1c98:	f040 80f5 	bne.w	1e86 <L_4039_delayMicroseconds+0x244>
            {
                i2c->rxBufferIndex = 0;
                i2c->user_onReceive(i2c->rxBufferLength);
            }
            // Is Addressed As Slave
            if(status & I2C_S_SRW)
    1c9c:	f015 0f04 	tst.w	r5, #4
    1ca0:	d01e      	beq.n	1ce0 <L_4039_delayMicroseconds+0x9e>
            {
                // Addressed Slave Transmit
                //
                i2c->currentStatus = I2C_SLAVE_TX;
    1ca2:	2309      	movs	r3, #9
    1ca4:	f884 3251 	strb.w	r3, [r4, #593]	; 0x251
                i2c->txBufferLength = 0;
    1ca8:	2300      	movs	r3, #0
    1caa:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
                *(i2c->C1) = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    1cae:	68a3      	ldr	r3, [r4, #8]
    1cb0:	22d0      	movs	r2, #208	; 0xd0
    1cb2:	701a      	strb	r2, [r3, #0]
                i2c->rxAddr = (*(i2c->D) >> 1); // read to get target addr
    1cb4:	6923      	ldr	r3, [r4, #16]
    1cb6:	781b      	ldrb	r3, [r3, #0]
    1cb8:	085b      	lsrs	r3, r3, #1
    1cba:	f884 3252 	strb.w	r3, [r4, #594]	; 0x252
                if(i2c->user_onRequest != nullptr)
    1cbe:	f8d4 3260 	ldr.w	r3, [r4, #608]	; 0x260
    1cc2:	b103      	cbz	r3, 1cc6 <L_4039_delayMicroseconds+0x84>
                    i2c->user_onRequest(); // load Tx buffer with data
    1cc4:	4798      	blx	r3
                if(i2c->txBufferLength == 0)
    1cc6:	f8d4 3244 	ldr.w	r3, [r4, #580]	; 0x244
    1cca:	b90b      	cbnz	r3, 1cd0 <L_4039_delayMicroseconds+0x8e>
                    i2c->txBuffer[0] = 0; // send 0's if buffer empty
    1ccc:	f884 313c 	strb.w	r3, [r4, #316]	; 0x13c
                *(i2c->D) = i2c->txBuffer[0]; // send first data
    1cd0:	6923      	ldr	r3, [r4, #16]
    1cd2:	f894 213c 	ldrb.w	r2, [r4, #316]	; 0x13c
    1cd6:	701a      	strb	r2, [r3, #0]
                i2c->txBufferIndex = 1;
    1cd8:	2301      	movs	r3, #1
    1cda:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
    1cde:	e030      	b.n	1d42 <L_4039_delayMicroseconds+0x100>
            {
                // Addressed Slave Receive
                //
                // setup SDA-rising ISR - required for STOP detection in Slave Rx mode for 3.0/3.1/3.2
                #if defined(__MK20DX128__) || defined(__MK20DX256__) // 3.0/3.1/3.2
                    i2c->irqCount = 0;
    1ce0:	2300      	movs	r3, #0
    1ce2:	f884 3258 	strb.w	r3, [r4, #600]	; 0x258
                    if(i2c->currentPins == I2C_PINS_18_19)
    1ce6:	f894 324a 	ldrb.w	r3, [r4, #586]	; 0x24a
    1cea:	2b01      	cmp	r3, #1
    1cec:	d105      	bne.n	1cfa <L_4039_delayMicroseconds+0xb8>
                        attachInterrupt(18, i2c_t3::sda0_rising_isr, RISING);
    1cee:	2203      	movs	r2, #3
    1cf0:	4968      	ldr	r1, [pc, #416]	; (1e94 <L_4039_delayMicroseconds+0x252>)
    1cf2:	2012      	movs	r0, #18
    1cf4:	f000 fa98 	bl	2228 <attachInterrupt>
    1cf8:	e015      	b.n	1d26 <L_4039_delayMicroseconds+0xe4>
                    else if(i2c->currentPins == I2C_PINS_16_17)
    1cfa:	b92b      	cbnz	r3, 1d08 <L_4039_delayMicroseconds+0xc6>
                        attachInterrupt(17, i2c_t3::sda0_rising_isr, RISING);
    1cfc:	2203      	movs	r2, #3
    1cfe:	4965      	ldr	r1, [pc, #404]	; (1e94 <L_4039_delayMicroseconds+0x252>)
    1d00:	2011      	movs	r0, #17
    1d02:	f000 fa91 	bl	2228 <attachInterrupt>
    1d06:	e00e      	b.n	1d26 <L_4039_delayMicroseconds+0xe4>
                    #if I2C_BUS_NUM >= 2
                    else if(i2c->currentPins == I2C_PINS_29_30)
    1d08:	2b02      	cmp	r3, #2
    1d0a:	d105      	bne.n	1d18 <L_4039_delayMicroseconds+0xd6>
                        attachInterrupt(30, i2c_t3::sda1_rising_isr, RISING);
    1d0c:	2203      	movs	r2, #3
    1d0e:	4962      	ldr	r1, [pc, #392]	; (1e98 <L_4039_delayMicroseconds+0x256>)
    1d10:	201e      	movs	r0, #30
    1d12:	f000 fa89 	bl	2228 <attachInterrupt>
    1d16:	e006      	b.n	1d26 <L_4039_delayMicroseconds+0xe4>
                    else if(i2c->currentPins == I2C_PINS_26_31)
    1d18:	2b03      	cmp	r3, #3
    1d1a:	d104      	bne.n	1d26 <L_4039_delayMicroseconds+0xe4>
                        attachInterrupt(31, i2c_t3::sda1_rising_isr, RISING);
    1d1c:	2203      	movs	r2, #3
    1d1e:	495e      	ldr	r1, [pc, #376]	; (1e98 <L_4039_delayMicroseconds+0x256>)
    1d20:	201f      	movs	r0, #31
    1d22:	f000 fa81 	bl	2228 <attachInterrupt>
                    #endif
                #elif defined(__MKL26Z64__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
                    *(i2c->FLT) |= I2C_FLT_SSIE; // enable START/STOP intr for LC/3.5/3.6
                #endif
                i2c->currentStatus = I2C_SLAVE_RX;
    1d26:	230a      	movs	r3, #10
    1d28:	f884 3251 	strb.w	r3, [r4, #593]	; 0x251
                i2c->rxBufferLength = 0;
    1d2c:	2300      	movs	r3, #0
    1d2e:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
                *(i2c->C1) = I2C_C1_IICEN | I2C_C1_IICIE;
    1d32:	68a3      	ldr	r3, [r4, #8]
    1d34:	22c0      	movs	r2, #192	; 0xc0
    1d36:	701a      	strb	r2, [r3, #0]
                i2c->rxAddr = (*(i2c->D) >> 1); // read to get target addr
    1d38:	6923      	ldr	r3, [r4, #16]
    1d3a:	781b      	ldrb	r3, [r3, #0]
    1d3c:	085b      	lsrs	r3, r3, #1
    1d3e:	f884 3252 	strb.w	r3, [r4, #594]	; 0x252
            }
            #if defined(__MKL26Z64__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) // LC/3.5/3.6
                *(i2c->FLT) = flt;   // clear STOP/START intr
            #endif
            *(i2c->S) = I2C_S_IICIF; // clear intr
    1d42:	68e3      	ldr	r3, [r4, #12]
    1d44:	2202      	movs	r2, #2
    1d46:	701a      	strb	r2, [r3, #0]
            return;
    1d48:	bd38      	pop	{r3, r4, r5, pc}
        }
        if(c1 & I2C_C1_TX)
    1d4a:	f013 0f10 	tst.w	r3, #16
    1d4e:	d020      	beq.n	1d92 <L_4039_delayMicroseconds+0x150>
        {
            // Continue Slave Transmit
            if((status & I2C_S_RXAK) == 0)
    1d50:	f015 0f01 	tst.w	r5, #1
    1d54:	d115      	bne.n	1d82 <L_4039_delayMicroseconds+0x140>
            {
                // Master ACK'd previous byte
                if(i2c->txBufferIndex < i2c->txBufferLength)
    1d56:	f8d0 2240 	ldr.w	r2, [r0, #576]	; 0x240
    1d5a:	f8d0 3244 	ldr.w	r3, [r0, #580]	; 0x244
    1d5e:	429a      	cmp	r2, r3
    1d60:	d208      	bcs.n	1d74 <L_4039_delayMicroseconds+0x132>
                    data = i2c->txBuffer[i2c->txBufferIndex++];
    1d62:	f8d0 3240 	ldr.w	r3, [r0, #576]	; 0x240
    1d66:	1c5a      	adds	r2, r3, #1
    1d68:	f8c0 2240 	str.w	r2, [r0, #576]	; 0x240
    1d6c:	4403      	add	r3, r0
    1d6e:	f893 213c 	ldrb.w	r2, [r3, #316]	; 0x13c
    1d72:	e000      	b.n	1d76 <L_4039_delayMicroseconds+0x134>
                else
                    data = 0; // send 0's if buffer empty
    1d74:	2200      	movs	r2, #0
                *(i2c->D) = data;
    1d76:	6923      	ldr	r3, [r4, #16]
    1d78:	701a      	strb	r2, [r3, #0]
                *(i2c->C1) = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    1d7a:	68a3      	ldr	r3, [r4, #8]
    1d7c:	22d0      	movs	r2, #208	; 0xd0
    1d7e:	701a      	strb	r2, [r3, #0]
    1d80:	e03f      	b.n	1e02 <L_4039_delayMicroseconds+0x1c0>
            }
            else
            {
                // Master did not ACK previous byte
                *(i2c->C1) = I2C_C1_IICEN | I2C_C1_IICIE; // switch to Rx mode
    1d82:	23c0      	movs	r3, #192	; 0xc0
    1d84:	700b      	strb	r3, [r1, #0]
                data = *(i2c->D); // dummy read
    1d86:	6903      	ldr	r3, [r0, #16]
    1d88:	781b      	ldrb	r3, [r3, #0]
                i2c->currentStatus = I2C_WAITING;
    1d8a:	2300      	movs	r3, #0
    1d8c:	f880 3251 	strb.w	r3, [r0, #593]	; 0x251
    1d90:	e037      	b.n	1e02 <L_4039_delayMicroseconds+0x1c0>
            }
        }
        else if(i2c->currentStatus == I2C_SLAVE_RX)
    1d92:	f890 3251 	ldrb.w	r3, [r0, #593]	; 0x251
    1d96:	b2db      	uxtb	r3, r3
    1d98:	2b0a      	cmp	r3, #10
    1d9a:	d132      	bne.n	1e02 <L_4039_delayMicroseconds+0x1c0>
            #endif
            // Continue Slave Receive
            //
            // setup SDA-rising ISR - required for STOP detection in Slave Rx mode for 3.0/3.1/3.2
            #if defined(__MK20DX128__) || defined(__MK20DX256__) // 3.0/3.1
                i2c->irqCount = 0;
    1d9c:	2300      	movs	r3, #0
    1d9e:	f880 3258 	strb.w	r3, [r0, #600]	; 0x258
                if(i2c->currentPins == I2C_PINS_18_19)
    1da2:	f890 324a 	ldrb.w	r3, [r0, #586]	; 0x24a
    1da6:	2b01      	cmp	r3, #1
    1da8:	d105      	bne.n	1db6 <L_4039_delayMicroseconds+0x174>
                    attachInterrupt(18, i2c_t3::sda0_rising_isr, RISING);
    1daa:	2203      	movs	r2, #3
    1dac:	4939      	ldr	r1, [pc, #228]	; (1e94 <L_4039_delayMicroseconds+0x252>)
    1dae:	2012      	movs	r0, #18
    1db0:	f000 fa3a 	bl	2228 <attachInterrupt>
    1db4:	e015      	b.n	1de2 <L_4039_delayMicroseconds+0x1a0>
                else if(i2c->currentPins == I2C_PINS_16_17)
    1db6:	b92b      	cbnz	r3, 1dc4 <L_4039_delayMicroseconds+0x182>
                    attachInterrupt(17, i2c_t3::sda0_rising_isr, RISING);
    1db8:	2203      	movs	r2, #3
    1dba:	4936      	ldr	r1, [pc, #216]	; (1e94 <L_4039_delayMicroseconds+0x252>)
    1dbc:	2011      	movs	r0, #17
    1dbe:	f000 fa33 	bl	2228 <attachInterrupt>
    1dc2:	e00e      	b.n	1de2 <L_4039_delayMicroseconds+0x1a0>
                #if I2C_BUS_NUM >= 2
                else if(i2c->currentPins == I2C_PINS_29_30)
    1dc4:	2b02      	cmp	r3, #2
    1dc6:	d105      	bne.n	1dd4 <L_4039_delayMicroseconds+0x192>
                    attachInterrupt(30, i2c_t3::sda1_rising_isr, RISING);
    1dc8:	2203      	movs	r2, #3
    1dca:	4933      	ldr	r1, [pc, #204]	; (1e98 <L_4039_delayMicroseconds+0x256>)
    1dcc:	201e      	movs	r0, #30
    1dce:	f000 fa2b 	bl	2228 <attachInterrupt>
    1dd2:	e006      	b.n	1de2 <L_4039_delayMicroseconds+0x1a0>
                else if(i2c->currentPins == I2C_PINS_26_31)
    1dd4:	2b03      	cmp	r3, #3
    1dd6:	d104      	bne.n	1de2 <L_4039_delayMicroseconds+0x1a0>
                    attachInterrupt(31, i2c_t3::sda1_rising_isr, RISING);
    1dd8:	2203      	movs	r2, #3
    1dda:	492f      	ldr	r1, [pc, #188]	; (1e98 <L_4039_delayMicroseconds+0x256>)
    1ddc:	201f      	movs	r0, #31
    1dde:	f000 fa23 	bl	2228 <attachInterrupt>
                #endif
            #endif
            data = *(i2c->D);
    1de2:	6923      	ldr	r3, [r4, #16]
    1de4:	781b      	ldrb	r3, [r3, #0]
    1de6:	b2db      	uxtb	r3, r3
            if(i2c->rxBufferLength < I2C_RX_BUFFER_LENGTH)
    1de8:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
    1dec:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
    1df0:	d807      	bhi.n	1e02 <L_4039_delayMicroseconds+0x1c0>
                i2c->rxBuffer[i2c->rxBufferLength++] = data;
    1df2:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
    1df6:	1c51      	adds	r1, r2, #1
    1df8:	f8c4 1138 	str.w	r1, [r4, #312]	; 0x138
    1dfc:	4422      	add	r2, r4
    1dfe:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
        }
        #if defined(__MKL26Z64__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) // LC/3.5/3.6
            *(i2c->FLT) = flt;   // clear STOP/START intr
        #endif
        *(i2c->S) = I2C_S_IICIF; // clear intr
    1e02:	68e3      	ldr	r3, [r4, #12]
    1e04:	2202      	movs	r2, #2
    1e06:	701a      	strb	r2, [r3, #0]
    1e08:	bd38      	pop	{r3, r4, r5, pc}
    1e0a:	790a      	ldrb	r2, [r1, #4]
    1e0c:	4b23      	ldr	r3, [pc, #140]	; (1e9c <L_4039_delayMicroseconds+0x25a>)
    1e0e:	701a      	strb	r2, [r3, #0]
            {
                if(i2c->DMA->complete() && i2c->activeDMA == I2C_DMA_BULK)
                {
                    // clear DMA interrupt, final byte should trigger another ISR
                    i2c->DMA->clearInterrupt();
                    *(i2c->C1) = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_MST | I2C_C1_TX; // intr en, Tx mode, DMA disabled
    1e10:	6883      	ldr	r3, [r0, #8]
    1e12:	22f0      	movs	r2, #240	; 0xf0
    1e14:	701a      	strb	r2, [r3, #0]
                    // DMA says complete at the beginning of its last byte, need to
                    // wait until end of its last byte to re-engage ISR
                    i2c->activeDMA = I2C_DMA_LAST;
    1e16:	2303      	movs	r3, #3
    1e18:	f880 325a 	strb.w	r3, [r0, #602]	; 0x25a
    1e1c:	e5ba      	b.n	1994 <i2c_isr_handler+0xc4>
                }
                else if(i2c->activeDMA == I2C_DMA_LAST)
    1e1e:	f890 325a 	ldrb.w	r3, [r0, #602]	; 0x25a
    1e22:	b2db      	uxtb	r3, r3
    1e24:	2b03      	cmp	r3, #3
    1e26:	f47f ad94 	bne.w	1952 <i2c_isr_handler+0x82>
    1e2a:	e57b      	b.n	1924 <i2c_isr_handler+0x54>
    1e2c:	7912      	ldrb	r2, [r2, #4]
    1e2e:	4b1b      	ldr	r3, [pc, #108]	; (1e9c <L_4039_delayMicroseconds+0x25a>)
    1e30:	701a      	strb	r2, [r3, #0]
            {
                if(i2c->DMA->complete() && i2c->activeDMA == I2C_DMA_BULK) // 2nd to last byte
                {
                    // clear DMA interrupt, final byte should trigger another ISR
                    i2c->DMA->clearInterrupt();
                    *(i2c->C1) = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_MST | I2C_C1_TXAK; // intr en, Rx mode, DMA disabled, NAK on recv
    1e32:	6883      	ldr	r3, [r0, #8]
    1e34:	22e8      	movs	r2, #232	; 0xe8
    1e36:	701a      	strb	r2, [r3, #0]
                    i2c->activeDMA = I2C_DMA_LAST;
    1e38:	2303      	movs	r3, #3
    1e3a:	f880 325a 	strb.w	r3, [r0, #602]	; 0x25a
    1e3e:	e6b7      	b.n	1bb0 <L_3900_delayMicroseconds+0x38>
                }
                else if(i2c->activeDMA == I2C_DMA_LAST) // last byte
    1e40:	f890 325a 	ldrb.w	r3, [r0, #602]	; 0x25a
    1e44:	b2db      	uxtb	r3, r3
    1e46:	2b03      	cmp	r3, #3
    1e48:	f47f ae9c 	bne.w	1b84 <L_3900_delayMicroseconds+0xc>
    1e4c:	e66f      	b.n	1b2e <i2c_isr_handler+0x25e>
            else
            {
                // check if 2nd to last byte or timeout
                if((i2c->rxBufferLength+2) == i2c->reqCount || (i2c->currentStatus == I2C_TIMEOUT && !i2c->timeoutRxNAK))
                {
                    *(i2c->C1) = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_MST | I2C_C1_TXAK; // no STOP, Rx, NAK on recv
    1e4e:	23e8      	movs	r3, #232	; 0xe8
    1e50:	700b      	strb	r3, [r1, #0]
    1e52:	e6c3      	b.n	1bdc <L_3900_delayMicroseconds+0x64>
                    // else NAK no STOP
                }
                else
                {
                    // grab next data, not last byte, will ACK
                    i2c->rxBuffer[i2c->rxBufferLength++] = *(i2c->D);
    1e54:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
    1e58:	1c5a      	adds	r2, r3, #1
    1e5a:	f8c0 2138 	str.w	r2, [r0, #312]	; 0x138
    1e5e:	6902      	ldr	r2, [r0, #16]
    1e60:	7812      	ldrb	r2, [r2, #0]
    1e62:	4403      	add	r3, r0
    1e64:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    1e68:	e6f0      	b.n	1c4c <L_4039_delayMicroseconds+0xa>
                    *(i2c->C1) = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_MST | I2C_C1_TXAK; // no STOP, Rx, NAK on recv
                }
                // if last byte or timeout send STOP
                if((i2c->rxBufferLength+1) >= i2c->reqCount || (i2c->currentStatus == I2C_TIMEOUT && i2c->timeoutRxNAK))
                {
                    i2c->timeoutRxNAK = 0; // clear flag
    1e6a:	2300      	movs	r3, #0
    1e6c:	f880 3259 	strb.w	r3, [r0, #601]	; 0x259
                    if(i2c->currentStatus != I2C_TIMEOUT)
    1e70:	f890 3251 	ldrb.w	r3, [r0, #593]	; 0x251
    1e74:	b2db      	uxtb	r3, r3
    1e76:	2b04      	cmp	r3, #4
    1e78:	f47f aece 	bne.w	1c18 <L_3900_delayMicroseconds+0xa0>
    1e7c:	e6cf      	b.n	1c1e <L_3900_delayMicroseconds+0xa6>
                {
                    // grab next data, not last byte, will ACK
                    i2c->rxBuffer[i2c->rxBufferLength++] = *(i2c->D);
                }
                if(i2c->currentStatus == I2C_TIMEOUT && !i2c->timeoutRxNAK)
                    i2c->timeoutRxNAK = 1; // set flag to indicate NAK sent
    1e7e:	2301      	movs	r3, #1
    1e80:	f880 3259 	strb.w	r3, [r0, #601]	; 0x259
    1e84:	e6ec      	b.n	1c60 <L_4039_delayMicroseconds+0x1e>
        if(status & I2C_S_IAAS)
        {
            // If in Slave Rx already, then RepSTART occured, run callback
            if(i2c->currentStatus == I2C_SLAVE_RX && i2c->user_onReceive != nullptr)
            {
                i2c->rxBufferIndex = 0;
    1e86:	2200      	movs	r2, #0
    1e88:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
                i2c->user_onReceive(i2c->rxBufferLength);
    1e8c:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    1e90:	4798      	blx	r3
    1e92:	e703      	b.n	1c9c <L_4039_delayMicroseconds+0x5a>
    1e94:	00001f65 	.word	0x00001f65
    1e98:	00001f75 	.word	0x00001f75
    1e9c:	4000801f 	.word	0x4000801f

00001ea0 <i2c0_isr>:
// ------------------------------------------------------------------------------------------------------
// ======================================================================================================


void i2c0_isr(void) // I2C0 ISR
{
    1ea0:	b508      	push	{r3, lr}
    I2C0_INTR_FLAG_ON;
    i2c_isr_handler(&(i2c_t3::i2cData[0]),0);
    1ea2:	2100      	movs	r1, #0
    1ea4:	4801      	ldr	r0, [pc, #4]	; (1eac <i2c0_isr+0xc>)
    1ea6:	f7ff fd13 	bl	18d0 <i2c_isr_handler>
    1eaa:	bd08      	pop	{r3, pc}
    1eac:	1fff8800 	.word	0x1fff8800

00001eb0 <i2c1_isr>:
    I2C0_INTR_FLAG_OFF;
}
#if I2C_BUS_NUM >= 2
    void i2c1_isr(void) // I2C1 ISR
    {
    1eb0:	b508      	push	{r3, lr}
        I2C1_INTR_FLAG_ON;
        i2c_isr_handler(&(i2c_t3::i2cData[1]),1);
    1eb2:	2101      	movs	r1, #1
    1eb4:	4801      	ldr	r0, [pc, #4]	; (1ebc <i2c1_isr+0xc>)
    1eb6:	f7ff fd0b 	bl	18d0 <i2c_isr_handler>
    1eba:	bd08      	pop	{r3, pc}
    1ebc:	1fff8a70 	.word	0x1fff8a70

00001ec0 <i2c_t3::sda_rising_isr_handler(i2cStruct*, unsigned char)>:

//
// SDA ISR base handler
//
void i2c_t3::sda_rising_isr_handler(struct i2cStruct* i2c, uint8_t bus)
{
    1ec0:	b510      	push	{r4, lr}
    1ec2:	4604      	mov	r4, r0
    uint8_t status = *(i2c->S); // capture status first, can change if ISR is too slow
    1ec4:	68c3      	ldr	r3, [r0, #12]
    1ec6:	781b      	ldrb	r3, [r3, #0]
    if(!(status & I2C_S_BUSY))
    1ec8:	f013 0f20 	tst.w	r3, #32
    1ecc:	d124      	bne.n	1f18 <i2c_t3::sda_rising_isr_handler(i2cStruct*, unsigned char)+0x58>
    {
        i2c->currentStatus = I2C_WAITING;
    1ece:	2300      	movs	r3, #0
    1ed0:	f880 3251 	strb.w	r3, [r0, #593]	; 0x251
        if(i2c->currentPins == I2C_PINS_18_19)
    1ed4:	f890 324a 	ldrb.w	r3, [r0, #586]	; 0x24a
    1ed8:	2b01      	cmp	r3, #1
    1eda:	d103      	bne.n	1ee4 <i2c_t3::sda_rising_isr_handler(i2cStruct*, unsigned char)+0x24>
            detachInterrupt(18);
    1edc:	2012      	movs	r0, #18
    1ede:	f000 f8d7 	bl	2090 <detachInterrupt>
    1ee2:	e00f      	b.n	1f04 <i2c_t3::sda_rising_isr_handler(i2cStruct*, unsigned char)+0x44>
        else if(i2c->currentPins == I2C_PINS_16_17)
    1ee4:	b91b      	cbnz	r3, 1eee <i2c_t3::sda_rising_isr_handler(i2cStruct*, unsigned char)+0x2e>
            detachInterrupt(17);
    1ee6:	2011      	movs	r0, #17
    1ee8:	f000 f8d2 	bl	2090 <detachInterrupt>
    1eec:	e00a      	b.n	1f04 <i2c_t3::sda_rising_isr_handler(i2cStruct*, unsigned char)+0x44>
        #if I2C_BUS_NUM >= 2
        else if(i2c->currentPins == I2C_PINS_29_30)
    1eee:	2b02      	cmp	r3, #2
    1ef0:	d103      	bne.n	1efa <i2c_t3::sda_rising_isr_handler(i2cStruct*, unsigned char)+0x3a>
            detachInterrupt(30);
    1ef2:	201e      	movs	r0, #30
    1ef4:	f000 f8cc 	bl	2090 <detachInterrupt>
    1ef8:	e004      	b.n	1f04 <i2c_t3::sda_rising_isr_handler(i2cStruct*, unsigned char)+0x44>
        else if(i2c->currentPins == I2C_PINS_26_31)
    1efa:	2b03      	cmp	r3, #3
    1efc:	d102      	bne.n	1f04 <i2c_t3::sda_rising_isr_handler(i2cStruct*, unsigned char)+0x44>
            detachInterrupt(31);
    1efe:	201f      	movs	r0, #31
    1f00:	f000 f8c6 	bl	2090 <detachInterrupt>
        #endif
        if(i2c->user_onReceive != nullptr)
    1f04:	f8d4 325c 	ldr.w	r3, [r4, #604]	; 0x25c
    1f08:	b353      	cbz	r3, 1f60 <i2c_t3::sda_rising_isr_handler(i2cStruct*, unsigned char)+0xa0>
        {
            i2c->rxBufferIndex = 0;
    1f0a:	2200      	movs	r2, #0
    1f0c:	f8c4 2134 	str.w	r2, [r4, #308]	; 0x134
            i2c->user_onReceive(i2c->rxBufferLength);
    1f10:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
    1f14:	4798      	blx	r3
    1f16:	bd10      	pop	{r4, pc}
        }
    }
    else
    {
        if(++(i2c->irqCount) >= 2 || !(i2c->currentMode == I2C_SLAVE))
    1f18:	f890 3258 	ldrb.w	r3, [r0, #600]	; 0x258
    1f1c:	3301      	adds	r3, #1
    1f1e:	b2db      	uxtb	r3, r3
    1f20:	f880 3258 	strb.w	r3, [r0, #600]	; 0x258
    1f24:	2b01      	cmp	r3, #1
    1f26:	d803      	bhi.n	1f30 <i2c_t3::sda_rising_isr_handler(i2cStruct*, unsigned char)+0x70>
    1f28:	f890 3249 	ldrb.w	r3, [r0, #585]	; 0x249
    1f2c:	2b01      	cmp	r3, #1
    1f2e:	d017      	beq.n	1f60 <i2c_t3::sda_rising_isr_handler(i2cStruct*, unsigned char)+0xa0>
        {
            if(i2c->currentPins == I2C_PINS_18_19)
    1f30:	f894 324a 	ldrb.w	r3, [r4, #586]	; 0x24a
    1f34:	2b01      	cmp	r3, #1
    1f36:	d103      	bne.n	1f40 <i2c_t3::sda_rising_isr_handler(i2cStruct*, unsigned char)+0x80>
                detachInterrupt(18);
    1f38:	2012      	movs	r0, #18
    1f3a:	f000 f8a9 	bl	2090 <detachInterrupt>
    1f3e:	bd10      	pop	{r4, pc}
            else if(i2c->currentPins == I2C_PINS_16_17)
    1f40:	b91b      	cbnz	r3, 1f4a <i2c_t3::sda_rising_isr_handler(i2cStruct*, unsigned char)+0x8a>
                detachInterrupt(17);
    1f42:	2011      	movs	r0, #17
    1f44:	f000 f8a4 	bl	2090 <detachInterrupt>
    1f48:	bd10      	pop	{r4, pc}
            #if I2C_BUS_NUM >= 2
            else if(i2c->currentPins == I2C_PINS_29_30)
    1f4a:	2b02      	cmp	r3, #2
    1f4c:	d103      	bne.n	1f56 <i2c_t3::sda_rising_isr_handler(i2cStruct*, unsigned char)+0x96>
                detachInterrupt(30);
    1f4e:	201e      	movs	r0, #30
    1f50:	f000 f89e 	bl	2090 <detachInterrupt>
    1f54:	bd10      	pop	{r4, pc}
            else if(i2c->currentPins == I2C_PINS_26_31)
    1f56:	2b03      	cmp	r3, #3
    1f58:	d102      	bne.n	1f60 <i2c_t3::sda_rising_isr_handler(i2cStruct*, unsigned char)+0xa0>
                detachInterrupt(31);
    1f5a:	201f      	movs	r0, #31
    1f5c:	f000 f898 	bl	2090 <detachInterrupt>
    1f60:	bd10      	pop	{r4, pc}
    1f62:	bf00      	nop

00001f64 <i2c_t3::sda0_rising_isr()>:
// Detects the stop condition that terminates a slave receive transfer.
//

// I2C0 SDA ISR
void i2c_t3::sda0_rising_isr(void)
{
    1f64:	b508      	push	{r3, lr}
    i2c_t3::sda_rising_isr_handler(&(i2c_t3::i2cData[0]),0);
    1f66:	2100      	movs	r1, #0
    1f68:	4801      	ldr	r0, [pc, #4]	; (1f70 <i2c_t3::sda0_rising_isr()+0xc>)
    1f6a:	f7ff ffa9 	bl	1ec0 <i2c_t3::sda_rising_isr_handler(i2cStruct*, unsigned char)>
    1f6e:	bd08      	pop	{r3, pc}
    1f70:	1fff8800 	.word	0x1fff8800

00001f74 <i2c_t3::sda1_rising_isr()>:
}

#if I2C_BUS_NUM >= 2
    // I2C1 SDA ISR
    void i2c_t3::sda1_rising_isr(void)
    {
    1f74:	b508      	push	{r3, lr}
        i2c_t3::sda_rising_isr_handler(&(i2c_t3::i2cData[1]),1);
    1f76:	2101      	movs	r1, #1
    1f78:	4801      	ldr	r0, [pc, #4]	; (1f80 <i2c_t3::sda1_rising_isr()+0xc>)
    1f7a:	f7ff ffa1 	bl	1ec0 <i2c_t3::sda_rising_isr_handler(i2cStruct*, unsigned char)>
    1f7e:	bd08      	pop	{r3, pc}
    1f80:	1fff8a70 	.word	0x1fff8a70

00001f84 <_GLOBAL__sub_I__ZN6i2c_t37i2cDataE>:
// ------------------------------------------------------------------------------------------------------
// Instantiate
//
i2c_t3 Wire  = i2c_t3(0);       // I2C0
#if I2C_BUS_NUM >= 2
    i2c_t3 Wire1 = i2c_t3(1);   // I2C1
    1f84:	b570      	push	{r4, r5, r6, lr}
#endif // sda_rising_isr

// ------------------------------------------------------------------------------------------------------
// Instantiate
//
i2c_t3 Wire  = i2c_t3(0);       // I2C0
    1f86:	4c0b      	ldr	r4, [pc, #44]	; (1fb4 <_GLOBAL__sub_I__ZN6i2c_t37i2cDataE+0x30>)
    1f88:	2100      	movs	r1, #0
    1f8a:	4620      	mov	r0, r4
    1f8c:	f7fe fe16 	bl	bbc <i2c_t3::i2c_t3(unsigned char)>
    1f90:	4e09      	ldr	r6, [pc, #36]	; (1fb8 <_GLOBAL__sub_I__ZN6i2c_t37i2cDataE+0x34>)
    1f92:	4d0a      	ldr	r5, [pc, #40]	; (1fbc <_GLOBAL__sub_I__ZN6i2c_t37i2cDataE+0x38>)
    1f94:	4632      	mov	r2, r6
    1f96:	4629      	mov	r1, r5
    1f98:	4620      	mov	r0, r4
    1f9a:	f002 faad 	bl	44f8 <__aeabi_atexit>
#if I2C_BUS_NUM >= 2
    i2c_t3 Wire1 = i2c_t3(1);   // I2C1
    1f9e:	4c08      	ldr	r4, [pc, #32]	; (1fc0 <_GLOBAL__sub_I__ZN6i2c_t37i2cDataE+0x3c>)
    1fa0:	2101      	movs	r1, #1
    1fa2:	4620      	mov	r0, r4
    1fa4:	f7fe fe0a 	bl	bbc <i2c_t3::i2c_t3(unsigned char)>
    1fa8:	4632      	mov	r2, r6
    1faa:	4629      	mov	r1, r5
    1fac:	4620      	mov	r0, r4
    1fae:	f002 faa3 	bl	44f8 <__aeabi_atexit>
    1fb2:	bd70      	pop	{r4, r5, r6, pc}
    1fb4:	1fff98ec 	.word	0x1fff98ec
    1fb8:	1fff87fc 	.word	0x1fff87fc
    1fbc:	00000b8d 	.word	0x00000b8d
    1fc0:	1fff98d8 	.word	0x1fff98d8

00001fc4 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    1fc4:	b508      	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    1fc6:	4c0d      	ldr	r4, [pc, #52]	; (1ffc <fault_isr+0x38>)
    1fc8:	6823      	ldr	r3, [r4, #0]
    1fca:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    1fce:	d001      	beq.n	1fd4 <fault_isr+0x10>
    1fd0:	f000 fb26 	bl	2620 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    1fd4:	6823      	ldr	r3, [r4, #0]
    1fd6:	f413 6f80 	tst.w	r3, #1024	; 0x400
    1fda:	d001      	beq.n	1fe0 <fault_isr+0x1c>
    1fdc:	f001 fb7e 	bl	36dc <uart0_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    1fe0:	6823      	ldr	r3, [r4, #0]
    1fe2:	f413 6f00 	tst.w	r3, #2048	; 0x800
    1fe6:	d001      	beq.n	1fec <fault_isr+0x28>
    1fe8:	f001 fc1a 	bl	3820 <uart1_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    1fec:	6823      	ldr	r3, [r4, #0]
    1fee:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    1ff2:	d0e9      	beq.n	1fc8 <fault_isr+0x4>
    1ff4:	f001 fcb6 	bl	3964 <uart2_status_isr>
    1ff8:	e7e6      	b.n	1fc8 <fault_isr+0x4>
    1ffa:	bf00      	nop
    1ffc:	40048034 	.word	0x40048034

00002000 <unused_isr>:
	}
}

void unused_isr(void)
{
    2000:	b508      	push	{r3, lr}
	fault_isr();
    2002:	f7ff ffdf 	bl	1fc4 <fault_isr>
    2006:	bf00      	nop

00002008 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    2008:	2210      	movs	r2, #16
    200a:	4b01      	ldr	r3, [pc, #4]	; (2010 <startup_early_hook+0x8>)
    200c:	801a      	strh	r2, [r3, #0]
    200e:	4770      	bx	lr
    2010:	40052000 	.word	0x40052000

00002014 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    2014:	4770      	bx	lr
    2016:	bf00      	nop

00002018 <_sbrk>:

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    2018:	b508      	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    201a:	4b0b      	ldr	r3, [pc, #44]	; (2048 <_sbrk+0x30>)
    201c:	681b      	ldr	r3, [r3, #0]
	if (incr != 0) {
    201e:	b180      	cbz	r0, 2042 <_sbrk+0x2a>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    2020:	466a      	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    2022:	1818      	adds	r0, r3, r0
    2024:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
    2028:	4290      	cmp	r0, r2
    202a:	d306      	bcc.n	203a <_sbrk+0x22>
			errno = ENOMEM;
    202c:	f002 fa70 	bl	4510 <__errno>
    2030:	230c      	movs	r3, #12
    2032:	6003      	str	r3, [r0, #0]
			return (void *)-1;
    2034:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2038:	bd08      	pop	{r3, pc}
		}
		__brkval = prev + incr;
    203a:	4a03      	ldr	r2, [pc, #12]	; (2048 <_sbrk+0x30>)
    203c:	6010      	str	r0, [r2, #0]
	}
	return prev;
    203e:	4618      	mov	r0, r3
    2040:	bd08      	pop	{r3, pc}
    2042:	4618      	mov	r0, r3
}
    2044:	bd08      	pop	{r3, pc}
    2046:	bf00      	nop
    2048:	1fff8ce0 	.word	0x1fff8ce0

0000204c <nvic_execution_priority>:
	uint32_t priority=256;
	uint32_t primask, faultmask, basepri, ipsr;

	// full algorithm in ARM DDI0403D, page B1-639
	// this isn't quite complete, but hopefully good enough
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    204c:	f3ef 8313 	mrs	r3, FAULTMASK
	if (faultmask) return -1;
    2050:	b9ab      	cbnz	r3, 207e <nvic_execution_priority+0x32>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    2052:	f3ef 8310 	mrs	r3, PRIMASK
	if (primask) return 0;
    2056:	b9ab      	cbnz	r3, 2084 <nvic_execution_priority+0x38>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    2058:	f3ef 8305 	mrs	r3, IPSR
	if (ipsr) {
    205c:	b123      	cbz	r3, 2068 <nvic_execution_priority+0x1c>
		if (ipsr < 16) priority = 0; // could be non-zero
    205e:	2b0f      	cmp	r3, #15
    2060:	d905      	bls.n	206e <nvic_execution_priority+0x22>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    2062:	4a09      	ldr	r2, [pc, #36]	; (2088 <nvic_execution_priority+0x3c>)
    2064:	5c98      	ldrb	r0, [r3, r2]
    2066:	e003      	b.n	2070 <nvic_execution_priority+0x24>

#pragma GCC diagnostic pop

int nvic_execution_priority(void)
{
	uint32_t priority=256;
    2068:	f44f 7080 	mov.w	r0, #256	; 0x100
    206c:	e000      	b.n	2070 <nvic_execution_priority+0x24>
	if (faultmask) return -1;
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
	if (primask) return 0;
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
	if (ipsr) {
		if (ipsr < 16) priority = 0; // could be non-zero
    206e:	2000      	movs	r0, #0
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
	}
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    2070:	f3ef 8311 	mrs	r3, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    2074:	b13b      	cbz	r3, 2086 <nvic_execution_priority+0x3a>
    2076:	4298      	cmp	r0, r3
    2078:	bf28      	it	cs
    207a:	4618      	movcs	r0, r3
	return priority;
    207c:	4770      	bx	lr
	uint32_t primask, faultmask, basepri, ipsr;

	// full algorithm in ARM DDI0403D, page B1-639
	// this isn't quite complete, but hopefully good enough
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
	if (faultmask) return -1;
    207e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2082:	4770      	bx	lr
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
	if (primask) return 0;
    2084:	2000      	movs	r0, #0
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
	}
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
	if (basepri > 0 && basepri < priority) priority = basepri;
	return priority;
}
    2086:	4770      	bx	lr
    2088:	e000e3f0 	.word	0xe000e3f0

0000208c <dummy_isr>:
	{((volatile uint8_t *)&CORE_PIN26_PORTREG + (CORE_PIN26_BIT >> 3)), &CORE_PIN26_CONFIG, (1<<(CORE_PIN26_BIT & 7))}
};

#endif

static void dummy_isr() {};
    208c:	4770      	bx	lr
    208e:	bf00      	nop

00002090 <detachInterrupt>:

void detachInterrupt(uint8_t pin)
{
	volatile uint32_t *config;

	config = portConfigRegister(pin);
    2090:	4b1d      	ldr	r3, [pc, #116]	; (2108 <detachInterrupt+0x78>)
    2092:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    2096:	6843      	ldr	r3, [r0, #4]

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    2098:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
    209c:	f5a2 2292 	sub.w	r2, r2, #299008	; 0x49000
    20a0:	2a7c      	cmp	r2, #124	; 0x7c
    20a2:	d918      	bls.n	20d6 <detachInterrupt+0x46>
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
    20a4:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
    20a8:	f5a2 2294 	sub.w	r2, r2, #303104	; 0x4a000
    20ac:	2a7c      	cmp	r2, #124	; 0x7c
    20ae:	d914      	bls.n	20da <detachInterrupt+0x4a>
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    20b0:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
    20b4:	f5a2 2296 	sub.w	r2, r2, #307200	; 0x4b000
    20b8:	2a7c      	cmp	r2, #124	; 0x7c
    20ba:	d910      	bls.n	20de <detachInterrupt+0x4e>
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    20bc:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
    20c0:	f5a2 2298 	sub.w	r2, r2, #311296	; 0x4c000
    20c4:	2a7c      	cmp	r2, #124	; 0x7c
    20c6:	d90c      	bls.n	20e2 <detachInterrupt+0x52>
	else if(&PORTE_PCR0 <= config && config <= &PORTE_PCR31) isr_table = isr_table_portE;
    20c8:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
    20cc:	f5a2 229a 	sub.w	r2, r2, #315392	; 0x4d000
    20d0:	2a7c      	cmp	r2, #124	; 0x7c
    20d2:	d908      	bls.n	20e6 <detachInterrupt+0x56>
    20d4:	4770      	bx	lr

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    20d6:	490d      	ldr	r1, [pc, #52]	; (210c <detachInterrupt+0x7c>)
    20d8:	e006      	b.n	20e8 <detachInterrupt+0x58>
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
    20da:	490d      	ldr	r1, [pc, #52]	; (2110 <detachInterrupt+0x80>)
    20dc:	e004      	b.n	20e8 <detachInterrupt+0x58>
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    20de:	490d      	ldr	r1, [pc, #52]	; (2114 <detachInterrupt+0x84>)
    20e0:	e002      	b.n	20e8 <detachInterrupt+0x58>
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    20e2:	490d      	ldr	r1, [pc, #52]	; (2118 <detachInterrupt+0x88>)
    20e4:	e000      	b.n	20e8 <detachInterrupt+0x58>
	else if(&PORTE_PCR0 <= config && config <= &PORTE_PCR31) isr_table = isr_table_portE;
    20e6:	490d      	ldr	r1, [pc, #52]	; (211c <detachInterrupt+0x8c>)
	config = portConfigRegister(pin);
#if defined(KINETISK)
	voidFuncPtr* isr_table = getIsrTable(config);
	if(!isr_table) return;
	uint32_t pin_index = getPinIndex(config);
	__disable_irq();
    20e8:	b672      	cpsid	i
	*config = ((*config & ~0x000F0000) | 0x01000000);
    20ea:	681a      	ldr	r2, [r3, #0]
    20ec:	f022 7287 	bic.w	r2, r2, #17694720	; 0x10e0000
    20f0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    20f4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    20f8:	601a      	str	r2, [r3, #0]
	isr_table[pin_index] = dummy_isr;
    20fa:	f3c3 0384 	ubfx	r3, r3, #2, #5
    20fe:	4a08      	ldr	r2, [pc, #32]	; (2120 <detachInterrupt+0x90>)
    2100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	__enable_irq();
    2104:	b662      	cpsie	i
    2106:	4770      	bx	lr
    2108:	00008bb8 	.word	0x00008bb8
    210c:	1fff8ce4 	.word	0x1fff8ce4
    2110:	1fff8d1c 	.word	0x1fff8d1c
    2114:	1fff8d6c 	.word	0x1fff8d6c
    2118:	1fff8d9c 	.word	0x1fff8d9c
    211c:	1fff8dbc 	.word	0x1fff8dbc
    2120:	0000208d 	.word	0x0000208d

00002124 <rtc_set>:
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    2124:	4b04      	ldr	r3, [pc, #16]	; (2138 <rtc_set+0x14>)
    2126:	2200      	movs	r2, #0
    2128:	601a      	str	r2, [r3, #0]
	RTC_TPR = 0;
    212a:	4904      	ldr	r1, [pc, #16]	; (213c <rtc_set+0x18>)
    212c:	600a      	str	r2, [r1, #0]
	RTC_TSR = t;
    212e:	4a04      	ldr	r2, [pc, #16]	; (2140 <rtc_set+0x1c>)
    2130:	6010      	str	r0, [r2, #0]
	RTC_SR = RTC_SR_TCE;
    2132:	2210      	movs	r2, #16
    2134:	601a      	str	r2, [r3, #0]
    2136:	4770      	bx	lr
    2138:	4003d014 	.word	0x4003d014
    213c:	4003d004 	.word	0x4003d004
    2140:	4003d000 	.word	0x4003d000

00002144 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    2144:	2821      	cmp	r0, #33	; 0x21
    2146:	d81e      	bhi.n	2186 <digitalWrite+0x42>
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    2148:	4b0f      	ldr	r3, [pc, #60]	; (2188 <digitalWrite+0x44>)
    214a:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    214e:	f893 2280 	ldrb.w	r2, [r3, #640]	; 0x280
    2152:	f012 0fff 	tst.w	r2, #255	; 0xff
    2156:	d008      	beq.n	216a <digitalWrite+0x26>
		if (val) {
    2158:	b119      	cbz	r1, 2162 <digitalWrite+0x1e>
			*portSetRegister(pin) = 1;
    215a:	2201      	movs	r2, #1
    215c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    2160:	4770      	bx	lr
		} else {
			*portClearRegister(pin) = 1;
    2162:	2201      	movs	r2, #1
    2164:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    2168:	4770      	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    216a:	4b07      	ldr	r3, [pc, #28]	; (2188 <digitalWrite+0x44>)
    216c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    2170:	6843      	ldr	r3, [r0, #4]
		if (val) {
    2172:	b121      	cbz	r1, 217e <digitalWrite+0x3a>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    2174:	681a      	ldr	r2, [r3, #0]
    2176:	f042 0203 	orr.w	r2, r2, #3
    217a:	601a      	str	r2, [r3, #0]
    217c:	4770      	bx	lr
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    217e:	681a      	ldr	r2, [r3, #0]
    2180:	f022 0202 	bic.w	r2, r2, #2
    2184:	601a      	str	r2, [r3, #0]
    2186:	4770      	bx	lr
    2188:	00008bb8 	.word	0x00008bb8

0000218c <digitalRead>:

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    218c:	2821      	cmp	r0, #33	; 0x21
    218e:	d806      	bhi.n	219e <digitalRead+0x12>
#ifdef KINETISK
	return *portInputRegister(pin);
    2190:	4b04      	ldr	r3, [pc, #16]	; (21a4 <digitalRead+0x18>)
    2192:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    2196:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
    219a:	b2c0      	uxtb	r0, r0
    219c:	4770      	bx	lr

}

uint8_t digitalRead(uint8_t pin)
{
	if (pin >= CORE_NUM_DIGITAL) return 0;
    219e:	2000      	movs	r0, #0
#ifdef KINETISK
	return *portInputRegister(pin);
#else
	return (*portInputRegister(pin) & digitalPinToBitMask(pin)) ? 1 : 0;
#endif
}
    21a0:	4770      	bx	lr
    21a2:	bf00      	nop
    21a4:	00008bb8 	.word	0x00008bb8

000021a8 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    21a8:	2821      	cmp	r0, #33	; 0x21
    21aa:	d83a      	bhi.n	2222 <pinMode+0x7a>
	config = portConfigRegister(pin);
    21ac:	4b1d      	ldr	r3, [pc, #116]	; (2224 <pinMode+0x7c>)
    21ae:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    21b2:	685b      	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    21b4:	2901      	cmp	r1, #1
    21b6:	d019      	beq.n	21ec <pinMode+0x44>
    21b8:	2904      	cmp	r1, #4
    21ba:	d025      	beq.n	2208 <pinMode+0x60>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    21bc:	4a19      	ldr	r2, [pc, #100]	; (2224 <pinMode+0x7c>)
    21be:	f852 2030 	ldr.w	r2, [r2, r0, lsl #3]
    21c2:	2000      	movs	r0, #0
    21c4:	f882 0280 	strb.w	r0, [r2, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    21c8:	b919      	cbnz	r1, 21d2 <pinMode+0x2a>
			*config = PORT_PCR_MUX(1);
    21ca:	f44f 7280 	mov.w	r2, #256	; 0x100
    21ce:	601a      	str	r2, [r3, #0]
    21d0:	4770      	bx	lr
		} else if (mode == INPUT_PULLUP) {
    21d2:	2902      	cmp	r1, #2
    21d4:	d103      	bne.n	21de <pinMode+0x36>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    21d6:	f240 1203 	movw	r2, #259	; 0x103
    21da:	601a      	str	r2, [r3, #0]
    21dc:	4770      	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
    21de:	2903      	cmp	r1, #3
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    21e0:	bf0c      	ite	eq
    21e2:	f44f 7281 	moveq.w	r2, #258	; 0x102
		} else { // INPUT_DISABLE
			*config = 0;
    21e6:	2200      	movne	r2, #0
    21e8:	601a      	str	r2, [r3, #0]
    21ea:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    21ec:	4a0d      	ldr	r2, [pc, #52]	; (2224 <pinMode+0x7c>)
    21ee:	f852 2030 	ldr.w	r2, [r2, r0, lsl #3]
    21f2:	2101      	movs	r1, #1
    21f4:	f882 1280 	strb.w	r1, [r2, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    21f8:	f44f 72a2 	mov.w	r2, #324	; 0x144
    21fc:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    21fe:	681a      	ldr	r2, [r3, #0]
    2200:	f022 0220 	bic.w	r2, r2, #32
    2204:	601a      	str	r2, [r3, #0]
    2206:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    2208:	4a06      	ldr	r2, [pc, #24]	; (2224 <pinMode+0x7c>)
    220a:	f852 2030 	ldr.w	r2, [r2, r0, lsl #3]
    220e:	2101      	movs	r1, #1
    2210:	f882 1280 	strb.w	r1, [r2, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    2214:	f44f 72a2 	mov.w	r2, #324	; 0x144
    2218:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    221a:	681a      	ldr	r2, [r3, #0]
    221c:	f042 0220 	orr.w	r2, r2, #32
    2220:	601a      	str	r2, [r3, #0]
    2222:	4770      	bx	lr
    2224:	00008bb8 	.word	0x00008bb8

00002228 <attachInterrupt>:
{
	_VectorsRam[irq + 16] = function;
}

void attachInterrupt(uint8_t pin, void (*function)(void), int mode)
{
    2228:	b570      	push	{r4, r5, r6, lr}
	volatile uint32_t *config;
	uint32_t cfg, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    222a:	2821      	cmp	r0, #33	; 0x21
    222c:	d862      	bhi.n	22f4 <attachInterrupt+0xcc>
	switch (mode) {
    222e:	2a04      	cmp	r2, #4
    2230:	d860      	bhi.n	22f4 <attachInterrupt+0xcc>
    2232:	e8df f002 	tbb	[pc, r2]
    2236:	0907      	.short	0x0907
    2238:	0305      	.short	0x0305
    223a:	0b          	.byte	0x0b
    223b:	00          	.byte	0x00
	  case CHANGE:	mask = 0x0B; break;
	  case RISING:	mask = 0x09; break;
    223c:	2609      	movs	r6, #9
    223e:	e006      	b.n	224e <attachInterrupt+0x26>
	  case FALLING:	mask = 0x0A; break;
    2240:	260a      	movs	r6, #10
    2242:	e004      	b.n	224e <attachInterrupt+0x26>
	  case LOW:	mask = 0x08; break;
    2244:	2608      	movs	r6, #8
    2246:	e002      	b.n	224e <attachInterrupt+0x26>
	  case HIGH:	mask = 0x0C; break;
    2248:	260c      	movs	r6, #12
    224a:	e000      	b.n	224e <attachInterrupt+0x26>
	volatile uint32_t *config;
	uint32_t cfg, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	switch (mode) {
	  case CHANGE:	mask = 0x0B; break;
    224c:	260b      	movs	r6, #11
    224e:	460d      	mov	r5, r1
	  case FALLING:	mask = 0x0A; break;
	  case LOW:	mask = 0x08; break;
	  case HIGH:	mask = 0x0C; break;
	  default: return;
	}
	mask = (mask << 16) | 0x01000000;
    2250:	0436      	lsls	r6, r6, #16
	config = portConfigRegister(pin);
    2252:	4b29      	ldr	r3, [pc, #164]	; (22f8 <attachInterrupt+0xd0>)
    2254:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    2258:	685c      	ldr	r4, [r3, #4]
	if ((*config & 0x00000700) == 0) {
    225a:	6823      	ldr	r3, [r4, #0]
    225c:	f413 6fe0 	tst.w	r3, #1792	; 0x700
    2260:	d102      	bne.n	2268 <attachInterrupt+0x40>
		// for compatibility with programs which depend
		// on AVR hardware default to input mode.
		pinMode(pin, INPUT);
    2262:	2100      	movs	r1, #0
    2264:	f7ff ffa0 	bl	21a8 <pinMode>
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
    2268:	4b24      	ldr	r3, [pc, #144]	; (22fc <attachInterrupt+0xd4>)
    226a:	4a25      	ldr	r2, [pc, #148]	; (2300 <attachInterrupt+0xd8>)
    226c:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    2270:	4a24      	ldr	r2, [pc, #144]	; (2304 <attachInterrupt+0xdc>)
    2272:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    2276:	4a24      	ldr	r2, [pc, #144]	; (2308 <attachInterrupt+0xe0>)
    2278:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    227c:	4a23      	ldr	r2, [pc, #140]	; (230c <attachInterrupt+0xe4>)
    227e:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    2282:	4a23      	ldr	r2, [pc, #140]	; (2310 <attachInterrupt+0xe8>)
    2284:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    2288:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
    228c:	f5a3 2392 	sub.w	r3, r3, #299008	; 0x49000
    2290:	2b7c      	cmp	r3, #124	; 0x7c
    2292:	d918      	bls.n	22c6 <attachInterrupt+0x9e>
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
    2294:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
    2298:	f5a3 2394 	sub.w	r3, r3, #303104	; 0x4a000
    229c:	2b7c      	cmp	r3, #124	; 0x7c
    229e:	d914      	bls.n	22ca <attachInterrupt+0xa2>
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    22a0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
    22a4:	f5a3 2396 	sub.w	r3, r3, #307200	; 0x4b000
    22a8:	2b7c      	cmp	r3, #124	; 0x7c
    22aa:	d910      	bls.n	22ce <attachInterrupt+0xa6>
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    22ac:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
    22b0:	f5a3 2398 	sub.w	r3, r3, #311296	; 0x4c000
    22b4:	2b7c      	cmp	r3, #124	; 0x7c
    22b6:	d90c      	bls.n	22d2 <attachInterrupt+0xaa>
	else if(&PORTE_PCR0 <= config && config <= &PORTE_PCR31) isr_table = isr_table_portE;
    22b8:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
    22bc:	f5a3 239a 	sub.w	r3, r3, #315392	; 0x4d000
    22c0:	2b7c      	cmp	r3, #124	; 0x7c
    22c2:	d908      	bls.n	22d6 <attachInterrupt+0xae>
    22c4:	bd70      	pop	{r4, r5, r6, pc}

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    22c6:	4913      	ldr	r1, [pc, #76]	; (2314 <attachInterrupt+0xec>)
    22c8:	e006      	b.n	22d8 <attachInterrupt+0xb0>
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
    22ca:	4913      	ldr	r1, [pc, #76]	; (2318 <attachInterrupt+0xf0>)
    22cc:	e004      	b.n	22d8 <attachInterrupt+0xb0>
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    22ce:	4913      	ldr	r1, [pc, #76]	; (231c <attachInterrupt+0xf4>)
    22d0:	e002      	b.n	22d8 <attachInterrupt+0xb0>
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    22d2:	4913      	ldr	r1, [pc, #76]	; (2320 <attachInterrupt+0xf8>)
    22d4:	e000      	b.n	22d8 <attachInterrupt+0xb0>
	else if(&PORTE_PCR0 <= config && config <= &PORTE_PCR31) isr_table = isr_table_portE;
    22d6:	4913      	ldr	r1, [pc, #76]	; (2324 <attachInterrupt+0xfc>)
	attachInterruptVector(IRQ_PORTD, port_D_isr);
	attachInterruptVector(IRQ_PORTE, port_E_isr);
	voidFuncPtr* isr_table = getIsrTable(config);
	if(!isr_table) return;
	uint32_t pin_index = getPinIndex(config);
	__disable_irq();
    22d8:	b672      	cpsid	i
	cfg = *config;
    22da:	6823      	ldr	r3, [r4, #0]
	cfg &= ~0x000F0000;		// disable any previous interrupt
    22dc:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    22e0:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
	*config = cfg;
    22e4:	6023      	str	r3, [r4, #0]
	isr_table[pin_index] = function;	// set the function pointer
    22e6:	f3c4 0384 	ubfx	r3, r4, #2, #5
    22ea:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
	cfg |= mask;
    22ee:	4316      	orrs	r6, r2
	*config = cfg;			// enable the new interrupt
    22f0:	6026      	str	r6, [r4, #0]
	__enable_irq();
    22f2:	b662      	cpsie	i
    22f4:	bd70      	pop	{r4, r5, r6, pc}
    22f6:	bf00      	nop
    22f8:	00008bb8 	.word	0x00008bb8
    22fc:	1fff8200 	.word	0x1fff8200
    2300:	1fff87d1 	.word	0x1fff87d1
    2304:	1fff87a5 	.word	0x1fff87a5
    2308:	1fff8779 	.word	0x1fff8779
    230c:	1fff874d 	.word	0x1fff874d
    2310:	1fff8721 	.word	0x1fff8721
    2314:	1fff8ce4 	.word	0x1fff8ce4
    2318:	1fff8d1c 	.word	0x1fff8d1c
    231c:	1fff8d6c 	.word	0x1fff8d6c
    2320:	1fff8d9c 	.word	0x1fff8d9c
    2324:	1fff8dbc 	.word	0x1fff8dbc

00002328 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    2328:	b672      	cpsid	i
	current = SYST_CVR;
    232a:	4b0d      	ldr	r3, [pc, #52]	; (2360 <micros+0x38>)
    232c:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    232e:	4a0d      	ldr	r2, [pc, #52]	; (2364 <micros+0x3c>)
    2330:	6810      	ldr	r0, [r2, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    2332:	4a0d      	ldr	r2, [pc, #52]	; (2368 <micros+0x40>)
    2334:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    2336:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    2338:	f012 6f80 	tst.w	r2, #67108864	; 0x4000000
    233c:	d002      	beq.n	2344 <micros+0x1c>
    233e:	2b32      	cmp	r3, #50	; 0x32
    2340:	bf88      	it	hi
    2342:	3001      	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    2344:	f5c3 433b 	rsb	r3, r3, #47872	; 0xbb00
    2348:	337f      	adds	r3, #127	; 0x7f
    234a:	4a08      	ldr	r2, [pc, #32]	; (236c <micros+0x44>)
    234c:	fba2 2303 	umull	r2, r3, r2, r3
    2350:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2354:	fb02 f000 	mul.w	r0, r2, r0
}
    2358:	eb00 1053 	add.w	r0, r0, r3, lsr #5
    235c:	4770      	bx	lr
    235e:	bf00      	nop
    2360:	e000e018 	.word	0xe000e018
    2364:	1fff9900 	.word	0x1fff9900
    2368:	e000ed04 	.word	0xe000ed04
    236c:	aaaaaaab 	.word	0xaaaaaaab

00002370 <delay>:

void delay(uint32_t ms)
{
    2370:	b538      	push	{r3, r4, r5, lr}
    2372:	4605      	mov	r5, r0
	uint32_t start = micros();
    2374:	f7ff ffd8 	bl	2328 <micros>
    2378:	4604      	mov	r4, r0

	if (ms > 0) {
    237a:	b925      	cbnz	r5, 2386 <delay+0x16>
    237c:	bd38      	pop	{r3, r4, r5, pc}
		while (1) {
			while ((micros() - start) >= 1000) {
				ms--;
				if (ms == 0) return;
    237e:	3d01      	subs	r5, #1
    2380:	d00a      	beq.n	2398 <delay+0x28>
				start += 1000;
    2382:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    2386:	f7ff ffcf 	bl	2328 <micros>
    238a:	1b00      	subs	r0, r0, r4
    238c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
    2390:	d2f5      	bcs.n	237e <delay+0xe>
				ms--;
				if (ms == 0) return;
				start += 1000;
			}
			yield();
    2392:	f000 fff5 	bl	3380 <yield>
		}
    2396:	e7f6      	b.n	2386 <delay+0x16>
    2398:	bd38      	pop	{r3, r4, r5, pc}
    239a:	bf00      	nop

0000239c <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    239c:	b510      	push	{r4, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    239e:	4b27      	ldr	r3, [pc, #156]	; (243c <_init_Teensyduino_internal_+0xa0>)
    23a0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    23a4:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    23a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    23aa:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    23ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    23b0:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    23b2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    23b6:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    23b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    23bc:	601a      	str	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    23be:	2000      	movs	r0, #0
    23c0:	4b1f      	ldr	r3, [pc, #124]	; (2440 <_init_Teensyduino_internal_+0xa4>)
    23c2:	6018      	str	r0, [r3, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
    23c4:	f64b 71ff 	movw	r1, #49151	; 0xbfff
    23c8:	3304      	adds	r3, #4
    23ca:	6019      	str	r1, [r3, #0]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    23cc:	2328      	movs	r3, #40	; 0x28
    23ce:	4a1d      	ldr	r2, [pc, #116]	; (2444 <_init_Teensyduino_internal_+0xa8>)
    23d0:	6013      	str	r3, [r2, #0]
	FTM0_C1SC = 0x28;
    23d2:	3208      	adds	r2, #8
    23d4:	6013      	str	r3, [r2, #0]
	FTM0_C2SC = 0x28;
    23d6:	3208      	adds	r2, #8
    23d8:	6013      	str	r3, [r2, #0]
	FTM0_C3SC = 0x28;
    23da:	3208      	adds	r2, #8
    23dc:	6013      	str	r3, [r2, #0]
	FTM0_C4SC = 0x28;
    23de:	3208      	adds	r2, #8
    23e0:	6013      	str	r3, [r2, #0]
	FTM0_C5SC = 0x28;
    23e2:	3208      	adds	r2, #8
    23e4:	6013      	str	r3, [r2, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    23e6:	3208      	adds	r2, #8
    23e8:	6013      	str	r3, [r2, #0]
	FTM0_C7SC = 0x28;
    23ea:	3208      	adds	r2, #8
    23ec:	6013      	str	r3, [r2, #0]
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    23ee:	2209      	movs	r2, #9
    23f0:	4c15      	ldr	r4, [pc, #84]	; (2448 <_init_Teensyduino_internal_+0xac>)
    23f2:	6022      	str	r2, [r4, #0]
	FTM1_CNT = 0;
    23f4:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
    23f8:	3404      	adds	r4, #4
    23fa:	6020      	str	r0, [r4, #0]
	FTM1_MOD = DEFAULT_FTM_MOD;
    23fc:	3404      	adds	r4, #4
    23fe:	6021      	str	r1, [r4, #0]
	FTM1_C0SC = 0x28;
    2400:	3404      	adds	r4, #4
    2402:	6023      	str	r3, [r4, #0]
	FTM1_C1SC = 0x28;
    2404:	3408      	adds	r4, #8
    2406:	6023      	str	r3, [r4, #0]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2408:	3c14      	subs	r4, #20
    240a:	6022      	str	r2, [r4, #0]
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    240c:	f504 24fe 	add.w	r4, r4, #520192	; 0x7f000
    2410:	3404      	adds	r4, #4
    2412:	6020      	str	r0, [r4, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    2414:	480d      	ldr	r0, [pc, #52]	; (244c <_init_Teensyduino_internal_+0xb0>)
    2416:	6001      	str	r1, [r0, #0]
	FTM2_C0SC = 0x28;
    2418:	490d      	ldr	r1, [pc, #52]	; (2450 <_init_Teensyduino_internal_+0xb4>)
    241a:	600b      	str	r3, [r1, #0]
	FTM2_C1SC = 0x28;
    241c:	3108      	adds	r1, #8
    241e:	600b      	str	r3, [r1, #0]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    2420:	4b0c      	ldr	r3, [pc, #48]	; (2454 <_init_Teensyduino_internal_+0xb8>)
    2422:	601a      	str	r2, [r3, #0]
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
#endif
	analog_init();
    2424:	f001 f896 	bl	3554 <analog_init>
	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273
	delay(50);
    2428:	2032      	movs	r0, #50	; 0x32
    242a:	f7ff ffa1 	bl	2370 <delay>
	usb_init();
    242e:	f000 fc7f 	bl	2d30 <usb_init>
	delay(350);
    2432:	f44f 70af 	mov.w	r0, #350	; 0x15e
    2436:	f7ff ff9b 	bl	2370 <delay>
    243a:	bd10      	pop	{r4, pc}
    243c:	e000e108 	.word	0xe000e108
    2440:	40038004 	.word	0x40038004
    2444:	4003800c 	.word	0x4003800c
    2448:	40038000 	.word	0x40038000
    244c:	400b8008 	.word	0x400b8008
    2450:	400b800c 	.word	0x400b800c
    2454:	400b8000 	.word	0x400b8000

00002458 <endpoint0_transmit>:
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
}


static void endpoint0_transmit(const void *data, uint32_t len)
{
    2458:	b410      	push	{r4}
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    245a:	4b0e      	ldr	r3, [pc, #56]	; (2494 <endpoint0_transmit+0x3c>)
    245c:	781b      	ldrb	r3, [r3, #0]
    245e:	f043 0402 	orr.w	r4, r3, #2
    2462:	4a0d      	ldr	r2, [pc, #52]	; (2498 <endpoint0_transmit+0x40>)
    2464:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
    2468:	6050      	str	r0, [r2, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    246a:	4a0c      	ldr	r2, [pc, #48]	; (249c <endpoint0_transmit+0x44>)
    246c:	7812      	ldrb	r2, [r2, #0]
    246e:	2a00      	cmp	r2, #0
    2470:	bf14      	ite	ne
    2472:	20c8      	movne	r0, #200	; 0xc8
    2474:	2088      	moveq	r0, #136	; 0x88
    2476:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    247a:	4807      	ldr	r0, [pc, #28]	; (2498 <endpoint0_transmit+0x40>)
    247c:	f840 1034 	str.w	r1, [r0, r4, lsl #3]
	ep0_tx_data_toggle ^= 1;
    2480:	f082 0201 	eor.w	r2, r2, #1
    2484:	4905      	ldr	r1, [pc, #20]	; (249c <endpoint0_transmit+0x44>)
    2486:	700a      	strb	r2, [r1, #0]
	ep0_tx_bdt_bank ^= 1;
    2488:	f083 0301 	eor.w	r3, r3, #1
    248c:	4a01      	ldr	r2, [pc, #4]	; (2494 <endpoint0_transmit+0x3c>)
    248e:	7013      	strb	r3, [r2, #0]
}
    2490:	bc10      	pop	{r4}
    2492:	4770      	bx	lr
    2494:	1fff996c 	.word	0x1fff996c
    2498:	1fff8000 	.word	0x1fff8000
    249c:	1fff99e5 	.word	0x1fff99e5

000024a0 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    24a0:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    24a2:	2b03      	cmp	r3, #3
    24a4:	d811      	bhi.n	24ca <usb_rx+0x2a>
	__disable_irq();
    24a6:	b672      	cpsid	i
	ret = rx_first[endpoint];
    24a8:	4a0b      	ldr	r2, [pc, #44]	; (24d8 <usb_rx+0x38>)
    24aa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
	if (ret) {
    24ae:	b180      	cbz	r0, 24d2 <usb_rx+0x32>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    24b0:	b410      	push	{r4}
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    24b2:	6841      	ldr	r1, [r0, #4]
    24b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    24b8:	4908      	ldr	r1, [pc, #32]	; (24dc <usb_rx+0x3c>)
    24ba:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    24be:	8804      	ldrh	r4, [r0, #0]
    24c0:	1b12      	subs	r2, r2, r4
    24c2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	}
	__enable_irq();
    24c6:	b662      	cpsie	i
	//serial_print("rx, epidx=");
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
    24c8:	e001      	b.n	24ce <usb_rx+0x2e>

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    24ca:	2000      	movs	r0, #0
    24cc:	4770      	bx	lr
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    24ce:	bc10      	pop	{r4}
    24d0:	4770      	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    24d2:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    24d4:	4770      	bx	lr
    24d6:	bf00      	nop
    24d8:	1fff995c 	.word	0x1fff995c
    24dc:	1fff9bd8 	.word	0x1fff9bd8

000024e0 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    24e0:	3801      	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    24e2:	2803      	cmp	r0, #3
    24e4:	d80d      	bhi.n	2502 <usb_tx_packet_count+0x22>
	__disable_irq();
    24e6:	b672      	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    24e8:	4b07      	ldr	r3, [pc, #28]	; (2508 <usb_tx_packet_count+0x28>)
    24ea:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    24ee:	b12b      	cbz	r3, 24fc <usb_tx_packet_count+0x1c>
    24f0:	2000      	movs	r0, #0
    24f2:	3001      	adds	r0, #1
    24f4:	685b      	ldr	r3, [r3, #4]
    24f6:	2b00      	cmp	r3, #0
    24f8:	d1fb      	bne.n	24f2 <usb_tx_packet_count+0x12>
    24fa:	e000      	b.n	24fe <usb_tx_packet_count+0x1e>
}

uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    24fc:	2000      	movs	r0, #0

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
    24fe:	b662      	cpsie	i
	return count;
    2500:	4770      	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    2502:	2000      	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    2504:	4770      	bx	lr
    2506:	bf00      	nop
    2508:	1fff99b0 	.word	0x1fff99b0

0000250c <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    250c:	b538      	push	{r3, r4, r5, lr}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    250e:	b672      	cpsid	i
void usb_rx_memory(usb_packet_t *packet)
{
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
    2510:	491b      	ldr	r1, [pc, #108]	; (2580 <usb_rx_memory+0x74>)
	//serial_print("rx_mem:");
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
    2512:	2301      	movs	r3, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    2514:	4c1b      	ldr	r4, [pc, #108]	; (2584 <usb_rx_memory+0x78>)
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    2516:	f811 2b01 	ldrb.w	r2, [r1], #1
    251a:	f012 0f08 	tst.w	r2, #8
    251e:	d024      	beq.n	256a <usb_rx_memory+0x5e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    2520:	009a      	lsls	r2, r3, #2
    2522:	f854 5032 	ldr.w	r5, [r4, r2, lsl #3]
    2526:	b96d      	cbnz	r5, 2544 <usb_rx_memory+0x38>
				table[index(i, RX, EVEN)].addr = packet->buf;
    2528:	4b16      	ldr	r3, [pc, #88]	; (2584 <usb_rx_memory+0x78>)
    252a:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
    252e:	3008      	adds	r0, #8
    2530:	6048      	str	r0, [r1, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2532:	4915      	ldr	r1, [pc, #84]	; (2588 <usb_rx_memory+0x7c>)
    2534:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				usb_rx_memory_needed--;
    2538:	4a14      	ldr	r2, [pc, #80]	; (258c <usb_rx_memory+0x80>)
    253a:	7813      	ldrb	r3, [r2, #0]
    253c:	3b01      	subs	r3, #1
    253e:	7013      	strb	r3, [r2, #0]
				__enable_irq();
    2540:	b662      	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    2542:	bd38      	pop	{r3, r4, r5, pc}
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    2544:	f042 0201 	orr.w	r2, r2, #1
    2548:	f854 5032 	ldr.w	r5, [r4, r2, lsl #3]
    254c:	b96d      	cbnz	r5, 256a <usb_rx_memory+0x5e>
				table[index(i, RX, ODD)].addr = packet->buf;
    254e:	4b0d      	ldr	r3, [pc, #52]	; (2584 <usb_rx_memory+0x78>)
    2550:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
    2554:	3008      	adds	r0, #8
    2556:	6048      	str	r0, [r1, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2558:	490d      	ldr	r1, [pc, #52]	; (2590 <usb_rx_memory+0x84>)
    255a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				usb_rx_memory_needed--;
    255e:	4a0b      	ldr	r2, [pc, #44]	; (258c <usb_rx_memory+0x80>)
    2560:	7813      	ldrb	r3, [r2, #0]
    2562:	3b01      	subs	r3, #1
    2564:	7013      	strb	r3, [r2, #0]
				__enable_irq();
    2566:	b662      	cpsie	i
				//serial_phex(i);
				//serial_print(",odd\n");
				return;
    2568:	bd38      	pop	{r3, r4, r5, pc}
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
    256a:	3301      	adds	r3, #1
    256c:	2b05      	cmp	r3, #5
    256e:	d1d2      	bne.n	2516 <usb_rx_memory+0xa>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    2570:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    2572:	2200      	movs	r2, #0
    2574:	4b05      	ldr	r3, [pc, #20]	; (258c <usb_rx_memory+0x80>)
    2576:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
    2578:	f000 fc40 	bl	2dfc <usb_free>
    257c:	bd38      	pop	{r3, r4, r5, pc}
    257e:	bf00      	nop
    2580:	00008cf4 	.word	0x00008cf4
    2584:	1fff8000 	.word	0x1fff8000
    2588:	00400088 	.word	0x00400088
    258c:	1fff99da 	.word	0x1fff99da
    2590:	004000c8 	.word	0x004000c8

00002594 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    2594:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    2596:	2b03      	cmp	r3, #3
    2598:	d839      	bhi.n	260e <usb_tx+0x7a>

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    259a:	b410      	push	{r4}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    259c:	0140      	lsls	r0, r0, #5
    259e:	f040 0010 	orr.w	r0, r0, #16
    25a2:	4a1b      	ldr	r2, [pc, #108]	; (2610 <usb_tx+0x7c>)
    25a4:	4410      	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    25a6:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    25a8:	4a1a      	ldr	r2, [pc, #104]	; (2614 <usb_tx+0x80>)
    25aa:	5cd2      	ldrb	r2, [r2, r3]
    25ac:	2a03      	cmp	r2, #3
    25ae:	d80b      	bhi.n	25c8 <usb_tx+0x34>
    25b0:	e8df f002 	tbb	[pc, r2]
    25b4:	0702041b 	.word	0x0702041b
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
		next = TX_STATE_EVEN_FREE;
		break;
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    25b8:	2205      	movs	r2, #5
    25ba:	e017      	b.n	25ec <usb_tx+0x58>
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    25bc:	3008      	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    25be:	2202      	movs	r2, #2
		break;
    25c0:	e014      	b.n	25ec <usb_tx+0x58>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    25c2:	3008      	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    25c4:	2204      	movs	r2, #4
		break;
    25c6:	e011      	b.n	25ec <usb_tx+0x58>
	  default:
		if (tx_first[endpoint] == NULL) {
    25c8:	4a13      	ldr	r2, [pc, #76]	; (2618 <usb_tx+0x84>)
    25ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    25ce:	b91a      	cbnz	r2, 25d8 <usb_tx+0x44>
			tx_first[endpoint] = packet;
    25d0:	4a11      	ldr	r2, [pc, #68]	; (2618 <usb_tx+0x84>)
    25d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    25d6:	e003      	b.n	25e0 <usb_tx+0x4c>
		} else {
			tx_last[endpoint]->next = packet;
    25d8:	4a10      	ldr	r2, [pc, #64]	; (261c <usb_tx+0x88>)
    25da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    25de:	6051      	str	r1, [r2, #4]
		}
		tx_last[endpoint] = packet;
    25e0:	4a0e      	ldr	r2, [pc, #56]	; (261c <usb_tx+0x88>)
    25e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    25e6:	b662      	cpsie	i
		return;
    25e8:	e010      	b.n	260c <usb_tx+0x78>
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    25ea:	2203      	movs	r2, #3
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    25ec:	4c09      	ldr	r4, [pc, #36]	; (2614 <usb_tx+0x80>)
    25ee:	54e2      	strb	r2, [r4, r3]
	b->addr = packet->buf;
    25f0:	f101 0308 	add.w	r3, r1, #8
    25f4:	6043      	str	r3, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    25f6:	f000 0308 	and.w	r3, r0, #8
    25fa:	2b00      	cmp	r3, #0
    25fc:	bf14      	ite	ne
    25fe:	23c8      	movne	r3, #200	; 0xc8
    2600:	2388      	moveq	r3, #136	; 0x88
    2602:	880a      	ldrh	r2, [r1, #0]
    2604:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    2608:	6003      	str	r3, [r0, #0]
	__enable_irq();
    260a:	b662      	cpsie	i
}
    260c:	bc10      	pop	{r4}
    260e:	4770      	bx	lr
    2610:	1fff8000 	.word	0x1fff8000
    2614:	1fff9918 	.word	0x1fff9918
    2618:	1fff99b0 	.word	0x1fff99b0
    261c:	1fff99c0 	.word	0x1fff99c0

00002620 <usb_isr>:
}



void usb_isr(void)
{
    2620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2624:	b085      	sub	sp, #20
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    2626:	4cab      	ldr	r4, [pc, #684]	; (28d4 <usb_isr+0x2b4>)
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    2628:	f8df a2f8 	ldr.w	sl, [pc, #760]	; 2924 <usb_isr+0x304>
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    262c:	f8df b2f8 	ldr.w	fp, [pc, #760]	; 2928 <usb_isr+0x308>
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    2630:	7825      	ldrb	r5, [r4, #0]
    2632:	b2ed      	uxtb	r5, r5

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    2634:	f015 0f04 	tst.w	r5, #4
    2638:	d01d      	beq.n	2676 <usb_isr+0x56>
		if (usb_configuration) {
    263a:	4ba7      	ldr	r3, [pc, #668]	; (28d8 <usb_isr+0x2b8>)
    263c:	781b      	ldrb	r3, [r3, #0]
    263e:	f013 0fff 	tst.w	r3, #255	; 0xff
    2642:	d016      	beq.n	2672 <usb_isr+0x52>
			t = usb_reboot_timer;
    2644:	4ba5      	ldr	r3, [pc, #660]	; (28dc <usb_isr+0x2bc>)
    2646:	781a      	ldrb	r2, [r3, #0]
			if (t) {
    2648:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    264c:	b12a      	cbz	r2, 265a <usb_isr+0x3a>
				usb_reboot_timer = --t;
    264e:	3b01      	subs	r3, #1
    2650:	b2db      	uxtb	r3, r3
    2652:	4aa2      	ldr	r2, [pc, #648]	; (28dc <usb_isr+0x2bc>)
    2654:	7013      	strb	r3, [r2, #0]
				if (!t) _reboot_Teensyduino_();
    2656:	b903      	cbnz	r3, 265a <usb_isr+0x3a>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    2658:	be00      	bkpt	0x0000
			if (t) {
				usb_reboot_timer = --t;
				if (!t) _reboot_Teensyduino_();
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    265a:	4ba1      	ldr	r3, [pc, #644]	; (28e0 <usb_isr+0x2c0>)
    265c:	781a      	ldrb	r2, [r3, #0]
			if (t) {
    265e:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    2662:	b132      	cbz	r2, 2672 <usb_isr+0x52>
				usb_cdc_transmit_flush_timer = --t;
    2664:	3b01      	subs	r3, #1
    2666:	b2db      	uxtb	r3, r3
    2668:	4a9d      	ldr	r2, [pc, #628]	; (28e0 <usb_isr+0x2c0>)
    266a:	7013      	strb	r3, [r2, #0]
				if (t == 0) usb_serial_flush_callback();
    266c:	b90b      	cbnz	r3, 2672 <usb_isr+0x52>
    266e:	f000 fd49 	bl	3104 <usb_serial_flush_callback>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    2672:	2304      	movs	r3, #4
    2674:	7023      	strb	r3, [r4, #0]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    2676:	f015 0f08 	tst.w	r5, #8
    267a:	f000 82ef 	beq.w	2c5c <usb_isr+0x63c>
		uint8_t endpoint;
		stat = USB0_STAT;
    267e:	f89a 3000 	ldrb.w	r3, [sl]
    2682:	b2db      	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    2684:	091d      	lsrs	r5, r3, #4
    2686:	f040 822a 	bne.w	2ade <usb_isr+0x4be>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    268a:	4e96      	ldr	r6, [pc, #600]	; (28e4 <usb_isr+0x2c4>)
    268c:	089d      	lsrs	r5, r3, #2
    268e:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    2692:	685a      	ldr	r2, [r3, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    2694:	f856 3035 	ldr.w	r3, [r6, r5, lsl #3]
    2698:	f3c3 0383 	ubfx	r3, r3, #2, #4
    269c:	3b01      	subs	r3, #1
    269e:	2b0c      	cmp	r3, #12
    26a0:	f200 8219 	bhi.w	2ad6 <usb_isr+0x4b6>
    26a4:	e8df f013 	tbh	[pc, r3, lsl #1]
    26a8:	01d401d4 	.word	0x01d401d4
    26ac:	02170217 	.word	0x02170217
    26b0:	02170217 	.word	0x02170217
    26b4:	02170217 	.word	0x02170217
    26b8:	021701f1 	.word	0x021701f1
    26bc:	02170217 	.word	0x02170217
    26c0:	000d      	.short	0x000d
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    26c2:	4989      	ldr	r1, [pc, #548]	; (28e8 <usb_isr+0x2c8>)
    26c4:	6813      	ldr	r3, [r2, #0]
    26c6:	600b      	str	r3, [r1, #0]
		setup.word2 = *(uint32_t *)(buf + 4);
    26c8:	6852      	ldr	r2, [r2, #4]
    26ca:	604a      	str	r2, [r1, #4]

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    26cc:	4a87      	ldr	r2, [pc, #540]	; (28ec <usb_isr+0x2cc>)
    26ce:	f846 2035 	str.w	r2, [r6, r5, lsl #3]
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    26d2:	2200      	movs	r2, #0
    26d4:	4986      	ldr	r1, [pc, #536]	; (28f0 <usb_isr+0x2d0>)
    26d6:	600a      	str	r2, [r1, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    26d8:	4982      	ldr	r1, [pc, #520]	; (28e4 <usb_isr+0x2c4>)
    26da:	610a      	str	r2, [r1, #16]
		table[index(0, TX, ODD)].desc = 0;
    26dc:	618a      	str	r2, [r1, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    26de:	2101      	movs	r1, #1
    26e0:	4a84      	ldr	r2, [pc, #528]	; (28f4 <usb_isr+0x2d4>)
    26e2:	7011      	strb	r1, [r2, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    26e4:	b29b      	uxth	r3, r3
    26e6:	f240 6281 	movw	r2, #1665	; 0x681
    26ea:	4293      	cmp	r3, r2
    26ec:	d818      	bhi.n	2720 <usb_isr+0x100>
    26ee:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
    26f2:	d22e      	bcs.n	2752 <usb_isr+0x132>
    26f4:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    26f8:	f000 812d 	beq.w	2956 <usb_isr+0x336>
    26fc:	d806      	bhi.n	270c <usb_isr+0xec>
    26fe:	2b80      	cmp	r3, #128	; 0x80
    2700:	f000 80d7 	beq.w	28b2 <usb_isr+0x292>
    2704:	2b82      	cmp	r3, #130	; 0x82
    2706:	f000 80da 	beq.w	28be <usb_isr+0x29e>
    270a:	e16f      	b.n	29ec <usb_isr+0x3cc>
    270c:	f240 3202 	movw	r2, #770	; 0x302
    2710:	4293      	cmp	r3, r2
    2712:	f000 8135 	beq.w	2980 <usb_isr+0x360>
    2716:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    271a:	f000 816b 	beq.w	29f4 <usb_isr+0x3d4>
    271e:	e165      	b.n	29ec <usb_isr+0x3cc>
    2720:	f242 0221 	movw	r2, #8225	; 0x2021
    2724:	4293      	cmp	r3, r2
    2726:	f000 818f 	beq.w	2a48 <usb_isr+0x428>
    272a:	d807      	bhi.n	273c <usb_isr+0x11c>
    272c:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    2730:	f000 80b9 	beq.w	28a6 <usb_isr+0x286>
    2734:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    2738:	d011      	beq.n	275e <usb_isr+0x13e>
    273a:	e157      	b.n	29ec <usb_isr+0x3cc>
    273c:	f242 2221 	movw	r2, #8737	; 0x2221
    2740:	4293      	cmp	r3, r2
    2742:	f000 814a 	beq.w	29da <usb_isr+0x3ba>
    2746:	f242 3221 	movw	r2, #8993	; 0x2321
    274a:	4293      	cmp	r3, r2
    274c:	f000 8152 	beq.w	29f4 <usb_isr+0x3d4>
    2750:	e14c      	b.n	29ec <usb_isr+0x3cc>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    2752:	4b69      	ldr	r3, [pc, #420]	; (28f8 <usb_isr+0x2d8>)
    2754:	685d      	ldr	r5, [r3, #4]
    2756:	2d00      	cmp	r5, #0
    2758:	f040 8127 	bne.w	29aa <usb_isr+0x38a>
    275c:	e139      	b.n	29d2 <usb_isr+0x3b2>
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    275e:	4b62      	ldr	r3, [pc, #392]	; (28e8 <usb_isr+0x2c8>)
    2760:	789a      	ldrb	r2, [r3, #2]
    2762:	4b5d      	ldr	r3, [pc, #372]	; (28d8 <usb_isr+0x2b8>)
    2764:	701a      	strb	r2, [r3, #0]
    2766:	4d5f      	ldr	r5, [pc, #380]	; (28e4 <usb_isr+0x2c4>)
    2768:	f105 0680 	add.w	r6, r5, #128	; 0x80
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    276c:	6a2b      	ldr	r3, [r5, #32]
    276e:	f013 0f80 	tst.w	r3, #128	; 0x80
    2772:	d003      	beq.n	277c <usb_isr+0x15c>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    2774:	6a68      	ldr	r0, [r5, #36]	; 0x24
    2776:	3808      	subs	r0, #8
    2778:	f000 fb40 	bl	2dfc <usb_free>
    277c:	3508      	adds	r5, #8
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    277e:	42b5      	cmp	r5, r6
    2780:	d1f4      	bne.n	276c <usb_isr+0x14c>
    2782:	4b5e      	ldr	r3, [pc, #376]	; (28fc <usb_isr+0x2dc>)
    2784:	9300      	str	r3, [sp, #0]
    2786:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 292c <usb_isr+0x30c>
    278a:	4b5d      	ldr	r3, [pc, #372]	; (2900 <usb_isr+0x2e0>)
    278c:	9301      	str	r3, [sp, #4]
    278e:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 2930 <usb_isr+0x310>
    2792:	2700      	movs	r7, #0
			while (p) {
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    2794:	463e      	mov	r6, r7
    2796:	9b00      	ldr	r3, [sp, #0]
    2798:	9302      	str	r3, [sp, #8]
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    279a:	6818      	ldr	r0, [r3, #0]
			while (p) {
    279c:	b128      	cbz	r0, 27aa <usb_isr+0x18a>
				n = p->next;
    279e:	6845      	ldr	r5, [r0, #4]
				usb_free(p);
    27a0:	f000 fb2c 	bl	2dfc <usb_free>
				p = n;
    27a4:	4628      	mov	r0, r5
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    27a6:	2d00      	cmp	r5, #0
    27a8:	d1f9      	bne.n	279e <usb_isr+0x17e>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    27aa:	9b02      	ldr	r3, [sp, #8]
    27ac:	601e      	str	r6, [r3, #0]
    27ae:	9702      	str	r7, [sp, #8]
			rx_last[i] = NULL;
    27b0:	4b54      	ldr	r3, [pc, #336]	; (2904 <usb_isr+0x2e4>)
    27b2:	f843 6027 	str.w	r6, [r3, r7, lsl #2]
    27b6:	f8cd 800c 	str.w	r8, [sp, #12]
			p = tx_first[i];
    27ba:	f8d8 0000 	ldr.w	r0, [r8]
			while (p) {
    27be:	b128      	cbz	r0, 27cc <usb_isr+0x1ac>
				n = p->next;
    27c0:	6845      	ldr	r5, [r0, #4]
				usb_free(p);
    27c2:	f000 fb1b 	bl	2dfc <usb_free>
				p = n;
    27c6:	4628      	mov	r0, r5
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    27c8:	2d00      	cmp	r5, #0
    27ca:	d1f9      	bne.n	27c0 <usb_isr+0x1a0>
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    27cc:	9b03      	ldr	r3, [sp, #12]
    27ce:	601e      	str	r6, [r3, #0]
			tx_last[i] = NULL;
    27d0:	9b01      	ldr	r3, [sp, #4]
    27d2:	f843 6b04 	str.w	r6, [r3], #4
    27d6:	9301      	str	r3, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
    27d8:	4b4b      	ldr	r3, [pc, #300]	; (2908 <usb_isr+0x2e8>)
    27da:	9a02      	ldr	r2, [sp, #8]
    27dc:	f823 6012 	strh.w	r6, [r3, r2, lsl #1]
			switch (tx_state[i]) {
    27e0:	f899 3000 	ldrb.w	r3, [r9]
    27e4:	3b02      	subs	r3, #2
    27e6:	2b03      	cmp	r3, #3
    27e8:	d809      	bhi.n	27fe <usb_isr+0x1de>
    27ea:	e8df f003 	tbb	[pc, r3]
    27ee:	0502      	.short	0x0502
    27f0:	0502      	.short	0x0502
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    27f2:	f889 6000 	strb.w	r6, [r9]
    27f6:	e002      	b.n	27fe <usb_isr+0x1de>
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    27f8:	2301      	movs	r3, #1
    27fa:	f889 3000 	strb.w	r3, [r9]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    27fe:	3701      	adds	r7, #1
    2800:	9b00      	ldr	r3, [sp, #0]
    2802:	3304      	adds	r3, #4
    2804:	9300      	str	r3, [sp, #0]
    2806:	f108 0804 	add.w	r8, r8, #4
    280a:	f109 0901 	add.w	r9, r9, #1
    280e:	2f04      	cmp	r7, #4
    2810:	d1c1      	bne.n	2796 <usb_isr+0x176>
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    2812:	2200      	movs	r2, #0
    2814:	4b3d      	ldr	r3, [pc, #244]	; (290c <usb_isr+0x2ec>)
    2816:	701a      	strb	r2, [r3, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    2818:	2501      	movs	r5, #1
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
    281a:	4e3d      	ldr	r6, [pc, #244]	; (2910 <usb_isr+0x2f0>)
		cfg = usb_endpoint_config_table;
    281c:	f8df 9114 	ldr.w	r9, [pc, #276]	; 2934 <usb_isr+0x314>
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    2820:	4f30      	ldr	r7, [pc, #192]	; (28e4 <usb_isr+0x2c4>)
    2822:	4690      	mov	r8, r2
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    2824:	f819 3b01 	ldrb.w	r3, [r9], #1
			*reg = epconf;
    2828:	f806 3b04 	strb.w	r3, [r6], #4
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    282c:	f013 0f08 	tst.w	r3, #8
    2830:	d02b      	beq.n	288a <usb_isr+0x26a>
				usb_packet_t *p;
				p = usb_malloc();
    2832:	f000 fac3 	bl	2dbc <usb_malloc>
				if (p) {
    2836:	4603      	mov	r3, r0
    2838:	b140      	cbz	r0, 284c <usb_isr+0x22c>
					table[index(i, RX, EVEN)].addr = p->buf;
    283a:	00aa      	lsls	r2, r5, #2
    283c:	eb07 1145 	add.w	r1, r7, r5, lsl #5
    2840:	3308      	adds	r3, #8
    2842:	604b      	str	r3, [r1, #4]
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    2844:	4933      	ldr	r1, [pc, #204]	; (2914 <usb_isr+0x2f4>)
    2846:	f847 1032 	str.w	r1, [r7, r2, lsl #3]
    284a:	e006      	b.n	285a <usb_isr+0x23a>
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    284c:	00ab      	lsls	r3, r5, #2
    284e:	f847 8033 	str.w	r8, [r7, r3, lsl #3]
					usb_rx_memory_needed++;
    2852:	4a2e      	ldr	r2, [pc, #184]	; (290c <usb_isr+0x2ec>)
    2854:	7813      	ldrb	r3, [r2, #0]
    2856:	3301      	adds	r3, #1
    2858:	7013      	strb	r3, [r2, #0]
				}
				p = usb_malloc();
    285a:	f000 faaf 	bl	2dbc <usb_malloc>
				if (p) {
    285e:	4602      	mov	r2, r0
    2860:	b150      	cbz	r0, 2878 <usb_isr+0x258>
					table[index(i, RX, ODD)].addr = p->buf;
    2862:	00ab      	lsls	r3, r5, #2
    2864:	f043 0301 	orr.w	r3, r3, #1
    2868:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    286c:	3208      	adds	r2, #8
    286e:	604a      	str	r2, [r1, #4]
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    2870:	4a1e      	ldr	r2, [pc, #120]	; (28ec <usb_isr+0x2cc>)
    2872:	f847 2033 	str.w	r2, [r7, r3, lsl #3]
    2876:	e008      	b.n	288a <usb_isr+0x26a>
				} else {
					table[index(i, RX, ODD)].desc = 0;
    2878:	00ab      	lsls	r3, r5, #2
    287a:	f043 0301 	orr.w	r3, r3, #1
    287e:	f847 8033 	str.w	r8, [r7, r3, lsl #3]
					usb_rx_memory_needed++;
    2882:	4a22      	ldr	r2, [pc, #136]	; (290c <usb_isr+0x2ec>)
    2884:	7813      	ldrb	r3, [r2, #0]
    2886:	3301      	adds	r3, #1
    2888:	7013      	strb	r3, [r2, #0]
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    288a:	00ab      	lsls	r3, r5, #2
    288c:	f043 0202 	orr.w	r2, r3, #2
    2890:	f847 8032 	str.w	r8, [r7, r2, lsl #3]
			table[index(i, TX, ODD)].desc = 0;
    2894:	f043 0303 	orr.w	r3, r3, #3
    2898:	f847 8033 	str.w	r8, [r7, r3, lsl #3]
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    289c:	3501      	adds	r5, #1
    289e:	4b1e      	ldr	r3, [pc, #120]	; (2918 <usb_isr+0x2f8>)
    28a0:	429e      	cmp	r6, r3
    28a2:	d1bf      	bne.n	2824 <usb_isr+0x204>
    28a4:	e219      	b.n	2cda <usb_isr+0x6ba>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    28a6:	4b0c      	ldr	r3, [pc, #48]	; (28d8 <usb_isr+0x2b8>)
    28a8:	781b      	ldrb	r3, [r3, #0]
    28aa:	4d1c      	ldr	r5, [pc, #112]	; (291c <usb_isr+0x2fc>)
    28ac:	702b      	strb	r3, [r5, #0]
		datalen = 1;
    28ae:	2301      	movs	r3, #1
    28b0:	e0a5      	b.n	29fe <usb_isr+0x3de>
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    28b2:	4d1a      	ldr	r5, [pc, #104]	; (291c <usb_isr+0x2fc>)
    28b4:	2300      	movs	r3, #0
    28b6:	702b      	strb	r3, [r5, #0]
		reply_buffer[1] = 0;
    28b8:	706b      	strb	r3, [r5, #1]
		datalen = 2;
    28ba:	2302      	movs	r3, #2
    28bc:	e09f      	b.n	29fe <usb_isr+0x3de>
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
    28be:	4b0a      	ldr	r3, [pc, #40]	; (28e8 <usb_isr+0x2c8>)
    28c0:	889b      	ldrh	r3, [r3, #4]
    28c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		if (i > NUM_ENDPOINTS) {
    28c6:	2b04      	cmp	r3, #4
    28c8:	dd36      	ble.n	2938 <usb_isr+0x318>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    28ca:	220f      	movs	r2, #15
    28cc:	4b14      	ldr	r3, [pc, #80]	; (2920 <usb_isr+0x300>)
    28ce:	701a      	strb	r2, [r3, #0]
    28d0:	e0ba      	b.n	2a48 <usb_isr+0x428>
    28d2:	bf00      	nop
    28d4:	40072080 	.word	0x40072080
    28d8:	1fff99e4 	.word	0x1fff99e4
    28dc:	1fff996d 	.word	0x1fff996d
    28e0:	1fff99e6 	.word	0x1fff99e6
    28e4:	1fff8000 	.word	0x1fff8000
    28e8:	1fff99d0 	.word	0x1fff99d0
    28ec:	004000c8 	.word	0x004000c8
    28f0:	1fff9904 	.word	0x1fff9904
    28f4:	1fff99e5 	.word	0x1fff99e5
    28f8:	00008cf8 	.word	0x00008cf8
    28fc:	1fff995c 	.word	0x1fff995c
    2900:	1fff99c0 	.word	0x1fff99c0
    2904:	1fff9908 	.word	0x1fff9908
    2908:	1fff9bd8 	.word	0x1fff9bd8
    290c:	1fff99da 	.word	0x1fff99da
    2910:	400720c4 	.word	0x400720c4
    2914:	00400088 	.word	0x00400088
    2918:	400720d4 	.word	0x400720d4
    291c:	1fff99dc 	.word	0x1fff99dc
    2920:	400720c0 	.word	0x400720c0
    2924:	40072090 	.word	0x40072090
    2928:	40072094 	.word	0x40072094
    292c:	1fff99b0 	.word	0x1fff99b0
    2930:	1fff9918 	.word	0x1fff9918
    2934:	00008cf4 	.word	0x00008cf4
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    2938:	4a9d      	ldr	r2, [pc, #628]	; (2bb0 <usb_isr+0x590>)
    293a:	2100      	movs	r1, #0
    293c:	7011      	strb	r1, [r2, #0]
		reply_buffer[1] = 0;
    293e:	7051      	strb	r1, [r2, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    2940:	4a9c      	ldr	r2, [pc, #624]	; (2bb4 <usb_isr+0x594>)
    2942:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    2946:	f013 0f02 	tst.w	r3, #2
    294a:	d056      	beq.n	29fa <usb_isr+0x3da>
    294c:	4d98      	ldr	r5, [pc, #608]	; (2bb0 <usb_isr+0x590>)
    294e:	2301      	movs	r3, #1
    2950:	702b      	strb	r3, [r5, #0]
		data = reply_buffer;
		datalen = 2;
    2952:	2302      	movs	r3, #2
    2954:	e053      	b.n	29fe <usb_isr+0x3de>
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
    2956:	4b98      	ldr	r3, [pc, #608]	; (2bb8 <usb_isr+0x598>)
    2958:	889b      	ldrh	r3, [r3, #4]
    295a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    295e:	2b04      	cmp	r3, #4
    2960:	dc02      	bgt.n	2968 <usb_isr+0x348>
    2962:	4a95      	ldr	r2, [pc, #596]	; (2bb8 <usb_isr+0x598>)
    2964:	8852      	ldrh	r2, [r2, #2]
    2966:	b11a      	cbz	r2, 2970 <usb_isr+0x350>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2968:	220f      	movs	r2, #15
    296a:	4b92      	ldr	r3, [pc, #584]	; (2bb4 <usb_isr+0x594>)
    296c:	701a      	strb	r2, [r3, #0]
    296e:	e06b      	b.n	2a48 <usb_isr+0x428>
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    2970:	4990      	ldr	r1, [pc, #576]	; (2bb4 <usb_isr+0x594>)
    2972:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
    2976:	f022 0202 	bic.w	r2, r2, #2
    297a:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
    297e:	e1ac      	b.n	2cda <usb_isr+0x6ba>
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
    2980:	4b8d      	ldr	r3, [pc, #564]	; (2bb8 <usb_isr+0x598>)
    2982:	889b      	ldrh	r3, [r3, #4]
    2984:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    2988:	2b04      	cmp	r3, #4
    298a:	dc02      	bgt.n	2992 <usb_isr+0x372>
    298c:	4a8a      	ldr	r2, [pc, #552]	; (2bb8 <usb_isr+0x598>)
    298e:	8852      	ldrh	r2, [r2, #2]
    2990:	b11a      	cbz	r2, 299a <usb_isr+0x37a>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2992:	220f      	movs	r2, #15
    2994:	4b87      	ldr	r3, [pc, #540]	; (2bb4 <usb_isr+0x594>)
    2996:	701a      	strb	r2, [r3, #0]
    2998:	e056      	b.n	2a48 <usb_isr+0x428>
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    299a:	4986      	ldr	r1, [pc, #536]	; (2bb4 <usb_isr+0x594>)
    299c:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
    29a0:	f042 0202 	orr.w	r2, r2, #2
    29a4:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
    29a8:	e197      	b.n	2cda <usb_isr+0x6ba>
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    29aa:	4b83      	ldr	r3, [pc, #524]	; (2bb8 <usb_isr+0x598>)
    29ac:	8859      	ldrh	r1, [r3, #2]
    29ae:	8898      	ldrh	r0, [r3, #4]
    29b0:	4b82      	ldr	r3, [pc, #520]	; (2bbc <usb_isr+0x59c>)
    29b2:	881a      	ldrh	r2, [r3, #0]
    29b4:	428a      	cmp	r2, r1
    29b6:	d108      	bne.n	29ca <usb_isr+0x3aa>
    29b8:	885a      	ldrh	r2, [r3, #2]
    29ba:	4282      	cmp	r2, r0
    29bc:	d105      	bne.n	29ca <usb_isr+0x3aa>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    29be:	0a09      	lsrs	r1, r1, #8
    29c0:	2903      	cmp	r1, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    29c2:	bf0c      	ite	eq
    29c4:	782b      	ldrbeq	r3, [r5, #0]
				} else {
					datalen = list->length;
    29c6:	891b      	ldrhne	r3, [r3, #8]
    29c8:	e019      	b.n	29fe <usb_isr+0x3de>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    29ca:	330c      	adds	r3, #12
			if (list->addr == NULL) break;
    29cc:	685d      	ldr	r5, [r3, #4]
    29ce:	2d00      	cmp	r5, #0
    29d0:	d1ef      	bne.n	29b2 <usb_isr+0x392>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    29d2:	220f      	movs	r2, #15
    29d4:	4b77      	ldr	r3, [pc, #476]	; (2bb4 <usb_isr+0x594>)
    29d6:	701a      	strb	r2, [r3, #0]
    29d8:	e036      	b.n	2a48 <usb_isr+0x428>
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		usb_cdc_line_rtsdtr_millis = systick_millis_count;
    29da:	4b79      	ldr	r3, [pc, #484]	; (2bc0 <usb_isr+0x5a0>)
    29dc:	681a      	ldr	r2, [r3, #0]
    29de:	4b79      	ldr	r3, [pc, #484]	; (2bc4 <usb_isr+0x5a4>)
    29e0:	601a      	str	r2, [r3, #0]
		usb_cdc_line_rtsdtr = setup.wValue;
    29e2:	4b75      	ldr	r3, [pc, #468]	; (2bb8 <usb_isr+0x598>)
    29e4:	789a      	ldrb	r2, [r3, #2]
    29e6:	4b78      	ldr	r3, [pc, #480]	; (2bc8 <usb_isr+0x5a8>)
    29e8:	701a      	strb	r2, [r3, #0]
    29ea:	e176      	b.n	2cda <usb_isr+0x6ba>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    29ec:	220f      	movs	r2, #15
    29ee:	4b71      	ldr	r3, [pc, #452]	; (2bb4 <usb_isr+0x594>)
    29f0:	701a      	strb	r2, [r3, #0]
    29f2:	e029      	b.n	2a48 <usb_isr+0x428>
static uint8_t reply_buffer[8];

static void usb_setup(void)
{
	const uint8_t *data = NULL;
	uint32_t datalen = 0;
    29f4:	2300      	movs	r3, #0

static uint8_t reply_buffer[8];

static void usb_setup(void)
{
	const uint8_t *data = NULL;
    29f6:	461d      	mov	r5, r3
    29f8:	e001      	b.n	29fe <usb_isr+0x3de>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    29fa:	2302      	movs	r3, #2
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
    29fc:	4d6c      	ldr	r5, [pc, #432]	; (2bb0 <usb_isr+0x590>)
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    29fe:	4a6e      	ldr	r2, [pc, #440]	; (2bb8 <usb_isr+0x598>)
    2a00:	88d6      	ldrh	r6, [r2, #6]
    2a02:	429e      	cmp	r6, r3
    2a04:	bf28      	it	cs
    2a06:	461e      	movcs	r6, r3
    2a08:	4637      	mov	r7, r6
    2a0a:	2e40      	cmp	r6, #64	; 0x40
    2a0c:	bf28      	it	cs
    2a0e:	2740      	movcs	r7, #64	; 0x40
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
    2a10:	4639      	mov	r1, r7
    2a12:	4628      	mov	r0, r5
    2a14:	f7ff fd20 	bl	2458 <endpoint0_transmit>
	data += size;
    2a18:	443d      	add	r5, r7
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    2a1a:	1bf6      	subs	r6, r6, r7
    2a1c:	d103      	bne.n	2a26 <usb_isr+0x406>
    2a1e:	2f3f      	cmp	r7, #63	; 0x3f
    2a20:	f200 8160 	bhi.w	2ce4 <usb_isr+0x6c4>
    2a24:	e010      	b.n	2a48 <usb_isr+0x428>
    2a26:	4637      	mov	r7, r6
    2a28:	2e40      	cmp	r6, #64	; 0x40
    2a2a:	bf28      	it	cs
    2a2c:	2740      	movcs	r7, #64	; 0x40

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
    2a2e:	4639      	mov	r1, r7
    2a30:	4628      	mov	r0, r5
    2a32:	f7ff fd11 	bl	2458 <endpoint0_transmit>
	data += size;
    2a36:	443d      	add	r5, r7
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    2a38:	1bf6      	subs	r6, r6, r7
    2a3a:	d101      	bne.n	2a40 <usb_isr+0x420>
    2a3c:	2f3f      	cmp	r7, #63	; 0x3f
    2a3e:	d903      	bls.n	2a48 <usb_isr+0x428>

	ep0_tx_ptr = data;
    2a40:	4b62      	ldr	r3, [pc, #392]	; (2bcc <usb_isr+0x5ac>)
    2a42:	601d      	str	r5, [r3, #0]
	ep0_tx_len = datalen;
    2a44:	4b62      	ldr	r3, [pc, #392]	; (2bd0 <usb_isr+0x5b0>)
    2a46:	801e      	strh	r6, [r3, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    2a48:	2301      	movs	r3, #1
    2a4a:	f88b 3000 	strb.w	r3, [fp]
    2a4e:	e042      	b.n	2ad6 <usb_isr+0x4b6>
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    2a50:	4b59      	ldr	r3, [pc, #356]	; (2bb8 <usb_isr+0x598>)
    2a52:	8819      	ldrh	r1, [r3, #0]
    2a54:	f242 0321 	movw	r3, #8225	; 0x2021
    2a58:	4299      	cmp	r1, r3
    2a5a:	d112      	bne.n	2a82 <usb_isr+0x462>
    2a5c:	4b5d      	ldr	r3, [pc, #372]	; (2bd4 <usb_isr+0x5b4>)
    2a5e:	1dd0      	adds	r0, r2, #7
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
				//serial_phex(*buf);
				*dst++ = *buf++;
    2a60:	f812 1b01 	ldrb.w	r1, [r2], #1
    2a64:	f803 1f01 	strb.w	r1, [r3, #1]!
#ifdef CDC_STATUS_INTERFACE
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
			int i;
			uint8_t *dst = (uint8_t *)usb_cdc_line_coding;
			//serial_print("set line coding ");
			for (i=0; i<7; i++) {
    2a68:	4282      	cmp	r2, r0
    2a6a:	d1f9      	bne.n	2a60 <usb_isr+0x440>
				//serial_phex(*buf);
				*dst++ = *buf++;
			}
			//serial_phex32(usb_cdc_line_coding[0]);
			//serial_print("\n");
			if (usb_cdc_line_coding[0] == 134) usb_reboot_timer = 15;
    2a6c:	4b5a      	ldr	r3, [pc, #360]	; (2bd8 <usb_isr+0x5b8>)
    2a6e:	681b      	ldr	r3, [r3, #0]
    2a70:	2b86      	cmp	r3, #134	; 0x86
    2a72:	d102      	bne.n	2a7a <usb_isr+0x45a>
    2a74:	220f      	movs	r2, #15
    2a76:	4b59      	ldr	r3, [pc, #356]	; (2bdc <usb_isr+0x5bc>)
    2a78:	701a      	strb	r2, [r3, #0]
			endpoint0_transmit(NULL, 0);
    2a7a:	2100      	movs	r1, #0
    2a7c:	4608      	mov	r0, r1
    2a7e:	f7ff fceb 	bl	2458 <endpoint0_transmit>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    2a82:	4b57      	ldr	r3, [pc, #348]	; (2be0 <usb_isr+0x5c0>)
    2a84:	f846 3035 	str.w	r3, [r6, r5, lsl #3]
    2a88:	e025      	b.n	2ad6 <usb_isr+0x4b6>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    2a8a:	4b50      	ldr	r3, [pc, #320]	; (2bcc <usb_isr+0x5ac>)
    2a8c:	681f      	ldr	r7, [r3, #0]
		if (data) {
    2a8e:	b1bf      	cbz	r7, 2ac0 <usb_isr+0x4a0>
			size = ep0_tx_len;
    2a90:	f8df 813c 	ldr.w	r8, [pc, #316]	; 2bd0 <usb_isr+0x5b0>
    2a94:	f8b8 5000 	ldrh.w	r5, [r8]
    2a98:	462e      	mov	r6, r5
    2a9a:	2d40      	cmp	r5, #64	; 0x40
    2a9c:	bf28      	it	cs
    2a9e:	2640      	movcs	r6, #64	; 0x40
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
    2aa0:	4631      	mov	r1, r6
    2aa2:	4638      	mov	r0, r7
    2aa4:	f7ff fcd8 	bl	2458 <endpoint0_transmit>
			data += size;
			ep0_tx_len -= size;
    2aa8:	1bad      	subs	r5, r5, r6
    2aaa:	b2ad      	uxth	r5, r5
    2aac:	f8a8 5000 	strh.w	r5, [r8]
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    2ab0:	b90d      	cbnz	r5, 2ab6 <usb_isr+0x496>
    2ab2:	2e40      	cmp	r6, #64	; 0x40
    2ab4:	d101      	bne.n	2aba <usb_isr+0x49a>
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    2ab6:	443e      	add	r6, r7
    2ab8:	e000      	b.n	2abc <usb_isr+0x49c>
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    2aba:	2600      	movs	r6, #0
    2abc:	4b43      	ldr	r3, [pc, #268]	; (2bcc <usb_isr+0x5ac>)
    2abe:	601e      	str	r6, [r3, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    2ac0:	4b3d      	ldr	r3, [pc, #244]	; (2bb8 <usb_isr+0x598>)
    2ac2:	881b      	ldrh	r3, [r3, #0]
    2ac4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    2ac8:	d105      	bne.n	2ad6 <usb_isr+0x4b6>
			setup.bRequest = 0;
    2aca:	4b3b      	ldr	r3, [pc, #236]	; (2bb8 <usb_isr+0x598>)
    2acc:	2200      	movs	r2, #0
    2ace:	705a      	strb	r2, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    2ad0:	789b      	ldrb	r3, [r3, #2]
    2ad2:	4a44      	ldr	r2, [pc, #272]	; (2be4 <usb_isr+0x5c4>)
    2ad4:	7013      	strb	r3, [r2, #0]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    2ad6:	2301      	movs	r3, #1
    2ad8:	f88b 3000 	strb.w	r3, [fp]
    2adc:	e0bb      	b.n	2c56 <usb_isr+0x636>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    2ade:	4e42      	ldr	r6, [pc, #264]	; (2be8 <usb_isr+0x5c8>)
    2ae0:	089f      	lsrs	r7, r3, #2
    2ae2:	eb06 08c7 	add.w	r8, r6, r7, lsl #3
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    2ae6:	f8d8 2004 	ldr.w	r2, [r8, #4]
    2aea:	f1a2 0008 	sub.w	r0, r2, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    2aee:	3d01      	subs	r5, #1
    2af0:	b2ed      	uxtb	r5, r5
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    2af2:	f013 0f08 	tst.w	r3, #8
    2af6:	d047      	beq.n	2b88 <usb_isr+0x568>
				usb_free(packet);
    2af8:	f000 f980 	bl	2dfc <usb_free>
				packet = tx_first[endpoint];
    2afc:	4b3b      	ldr	r3, [pc, #236]	; (2bec <usb_isr+0x5cc>)
    2afe:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
				if (packet) {
    2b02:	b34b      	cbz	r3, 2b58 <usb_isr+0x538>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    2b04:	6859      	ldr	r1, [r3, #4]
    2b06:	4a39      	ldr	r2, [pc, #228]	; (2bec <usb_isr+0x5cc>)
    2b08:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
					b->addr = packet->buf;
    2b0c:	f103 0208 	add.w	r2, r3, #8
    2b10:	f8c8 2004 	str.w	r2, [r8, #4]
					switch (tx_state[endpoint]) {
    2b14:	4a36      	ldr	r2, [pc, #216]	; (2bf0 <usb_isr+0x5d0>)
    2b16:	5d52      	ldrb	r2, [r2, r5]
    2b18:	2a03      	cmp	r2, #3
    2b1a:	d812      	bhi.n	2b42 <usb_isr+0x522>
    2b1c:	e8df f002 	tbb	[pc, r2]
    2b20:	0e0a0602 	.word	0x0e0a0602
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    2b24:	2103      	movs	r1, #3
    2b26:	4a32      	ldr	r2, [pc, #200]	; (2bf0 <usb_isr+0x5d0>)
    2b28:	5551      	strb	r1, [r2, r5]
						break;
    2b2a:	e00a      	b.n	2b42 <usb_isr+0x522>
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    2b2c:	2102      	movs	r1, #2
    2b2e:	4a30      	ldr	r2, [pc, #192]	; (2bf0 <usb_isr+0x5d0>)
    2b30:	5551      	strb	r1, [r2, r5]
						break;
    2b32:	e006      	b.n	2b42 <usb_isr+0x522>
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    2b34:	2105      	movs	r1, #5
    2b36:	4a2e      	ldr	r2, [pc, #184]	; (2bf0 <usb_isr+0x5d0>)
    2b38:	5551      	strb	r1, [r2, r5]
						break;
    2b3a:	e002      	b.n	2b42 <usb_isr+0x522>
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    2b3c:	2104      	movs	r1, #4
    2b3e:	4a2c      	ldr	r2, [pc, #176]	; (2bf0 <usb_isr+0x5d0>)
    2b40:	5551      	strb	r1, [r2, r5]
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    2b42:	f018 0f08 	tst.w	r8, #8
    2b46:	bf14      	ite	ne
    2b48:	22c8      	movne	r2, #200	; 0xc8
    2b4a:	2288      	moveq	r2, #136	; 0x88
    2b4c:	881b      	ldrh	r3, [r3, #0]
    2b4e:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    2b52:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
    2b56:	e07e      	b.n	2c56 <usb_isr+0x636>
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    2b58:	4b25      	ldr	r3, [pc, #148]	; (2bf0 <usb_isr+0x5d0>)
    2b5a:	5d5b      	ldrb	r3, [r3, r5]
    2b5c:	2b03      	cmp	r3, #3
    2b5e:	d80b      	bhi.n	2b78 <usb_isr+0x558>
    2b60:	e8df f003 	tbb	[pc, r3]
    2b64:	06027979 	.word	0x06027979
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    2b68:	2200      	movs	r2, #0
    2b6a:	4b21      	ldr	r3, [pc, #132]	; (2bf0 <usb_isr+0x5d0>)
    2b6c:	555a      	strb	r2, [r3, r5]
						break;
    2b6e:	e072      	b.n	2c56 <usb_isr+0x636>
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    2b70:	2201      	movs	r2, #1
    2b72:	4b1f      	ldr	r3, [pc, #124]	; (2bf0 <usb_isr+0x5d0>)
    2b74:	555a      	strb	r2, [r3, r5]
						break;
    2b76:	e06e      	b.n	2c56 <usb_isr+0x636>
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    2b78:	f018 0f08 	tst.w	r8, #8
    2b7c:	bf14      	ite	ne
    2b7e:	2203      	movne	r2, #3
    2b80:	2202      	moveq	r2, #2
    2b82:	4b1b      	ldr	r3, [pc, #108]	; (2bf0 <usb_isr+0x5d0>)
    2b84:	555a      	strb	r2, [r3, r5]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    2b86:	e066      	b.n	2c56 <usb_isr+0x636>
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    2b88:	f856 3037 	ldr.w	r3, [r6, r7, lsl #3]
    2b8c:	0c1b      	lsrs	r3, r3, #16
    2b8e:	f822 3c08 	strh.w	r3, [r2, #-8]
				if (packet->len > 0) {
    2b92:	2b00      	cmp	r3, #0
    2b94:	d057      	beq.n	2c46 <usb_isr+0x626>
					packet->index = 0;
    2b96:	2300      	movs	r3, #0
    2b98:	f822 3c06 	strh.w	r3, [r2, #-6]
					packet->next = NULL;
    2b9c:	f842 3c04 	str.w	r3, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    2ba0:	4b14      	ldr	r3, [pc, #80]	; (2bf4 <usb_isr+0x5d4>)
    2ba2:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    2ba6:	bb3b      	cbnz	r3, 2bf8 <usb_isr+0x5d8>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    2ba8:	4b12      	ldr	r3, [pc, #72]	; (2bf4 <usb_isr+0x5d4>)
    2baa:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
    2bae:	e027      	b.n	2c00 <usb_isr+0x5e0>
    2bb0:	1fff99dc 	.word	0x1fff99dc
    2bb4:	400720c0 	.word	0x400720c0
    2bb8:	1fff99d0 	.word	0x1fff99d0
    2bbc:	00008cf8 	.word	0x00008cf8
    2bc0:	1fff9900 	.word	0x1fff9900
    2bc4:	1fff9be8 	.word	0x1fff9be8
    2bc8:	1fff99f4 	.word	0x1fff99f4
    2bcc:	1fff9904 	.word	0x1fff9904
    2bd0:	1fff99d8 	.word	0x1fff99d8
    2bd4:	1fff9bdf 	.word	0x1fff9bdf
    2bd8:	1fff9be0 	.word	0x1fff9be0
    2bdc:	1fff996d 	.word	0x1fff996d
    2be0:	004000c8 	.word	0x004000c8
    2be4:	40072098 	.word	0x40072098
    2be8:	1fff8000 	.word	0x1fff8000
    2bec:	1fff99b0 	.word	0x1fff99b0
    2bf0:	1fff9918 	.word	0x1fff9918
    2bf4:	1fff995c 	.word	0x1fff995c
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    2bf8:	4b3e      	ldr	r3, [pc, #248]	; (2cf4 <usb_isr+0x6d4>)
    2bfa:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    2bfe:	6058      	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
    2c00:	4b3c      	ldr	r3, [pc, #240]	; (2cf4 <usb_isr+0x6d4>)
    2c02:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    2c06:	493c      	ldr	r1, [pc, #240]	; (2cf8 <usb_isr+0x6d8>)
    2c08:	f831 0015 	ldrh.w	r0, [r1, r5, lsl #1]
    2c0c:	f832 3c08 	ldrh.w	r3, [r2, #-8]
    2c10:	4403      	add	r3, r0
    2c12:	f821 3015 	strh.w	r3, [r1, r5, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    2c16:	f000 f8d1 	bl	2dbc <usb_malloc>
					if (packet) {
    2c1a:	4603      	mov	r3, r0
    2c1c:	b158      	cbz	r0, 2c36 <usb_isr+0x616>
						b->addr = packet->buf;
    2c1e:	3308      	adds	r3, #8
    2c20:	f8c8 3004 	str.w	r3, [r8, #4]
						b->desc = BDT_DESC(64,
    2c24:	f018 0f08 	tst.w	r8, #8
    2c28:	4a34      	ldr	r2, [pc, #208]	; (2cfc <usb_isr+0x6dc>)
    2c2a:	4b35      	ldr	r3, [pc, #212]	; (2d00 <usb_isr+0x6e0>)
    2c2c:	bf08      	it	eq
    2c2e:	4613      	moveq	r3, r2
    2c30:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
    2c34:	e00f      	b.n	2c56 <usb_isr+0x636>
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    2c36:	2300      	movs	r3, #0
    2c38:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
						usb_rx_memory_needed++;
    2c3c:	4a31      	ldr	r2, [pc, #196]	; (2d04 <usb_isr+0x6e4>)
    2c3e:	7813      	ldrb	r3, [r2, #0]
    2c40:	3301      	adds	r3, #1
    2c42:	7013      	strb	r3, [r2, #0]
    2c44:	e007      	b.n	2c56 <usb_isr+0x636>
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    2c46:	f018 0f08 	tst.w	r8, #8
    2c4a:	4a2c      	ldr	r2, [pc, #176]	; (2cfc <usb_isr+0x6dc>)
    2c4c:	4b2c      	ldr	r3, [pc, #176]	; (2d00 <usb_isr+0x6e0>)
    2c4e:	bf08      	it	eq
    2c50:	4613      	moveq	r3, r2
    2c52:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    2c56:	2308      	movs	r3, #8
    2c58:	7023      	strb	r3, [r4, #0]
		goto restart;
    2c5a:	e4e9      	b.n	2630 <usb_isr+0x10>
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    2c5c:	f015 0f01 	tst.w	r5, #1
    2c60:	d021      	beq.n	2ca6 <usb_isr+0x686>
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    2c62:	4929      	ldr	r1, [pc, #164]	; (2d08 <usb_isr+0x6e8>)
    2c64:	2302      	movs	r3, #2
    2c66:	700b      	strb	r3, [r1, #0]
		ep0_tx_bdt_bank = 0;
    2c68:	2200      	movs	r2, #0
    2c6a:	4b28      	ldr	r3, [pc, #160]	; (2d0c <usb_isr+0x6ec>)
    2c6c:	701a      	strb	r2, [r3, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    2c6e:	4b28      	ldr	r3, [pc, #160]	; (2d10 <usb_isr+0x6f0>)
    2c70:	4822      	ldr	r0, [pc, #136]	; (2cfc <usb_isr+0x6dc>)
    2c72:	6018      	str	r0, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    2c74:	4c27      	ldr	r4, [pc, #156]	; (2d14 <usb_isr+0x6f4>)
    2c76:	605c      	str	r4, [r3, #4]
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    2c78:	6098      	str	r0, [r3, #8]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    2c7a:	4827      	ldr	r0, [pc, #156]	; (2d18 <usb_isr+0x6f8>)
    2c7c:	60d8      	str	r0, [r3, #12]
		table[index(0, TX, EVEN)].desc = 0;
    2c7e:	611a      	str	r2, [r3, #16]
		table[index(0, TX, ODD)].desc = 0;
    2c80:	619a      	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2c82:	200d      	movs	r0, #13
    2c84:	4b25      	ldr	r3, [pc, #148]	; (2d1c <usb_isr+0x6fc>)
    2c86:	7018      	strb	r0, [r3, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    2c88:	23ff      	movs	r3, #255	; 0xff
    2c8a:	4825      	ldr	r0, [pc, #148]	; (2d20 <usb_isr+0x700>)
    2c8c:	7003      	strb	r3, [r0, #0]
		USB0_ISTAT = 0xFF;
    2c8e:	3808      	subs	r0, #8
    2c90:	7003      	strb	r3, [r0, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    2c92:	3018      	adds	r0, #24
    2c94:	7002      	strb	r2, [r0, #0]

		// enable other interrupts
		USB0_ERREN = 0xFF;
    2c96:	4a23      	ldr	r2, [pc, #140]	; (2d24 <usb_isr+0x704>)
    2c98:	7013      	strb	r3, [r2, #0]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    2c9a:	229f      	movs	r2, #159	; 0x9f
    2c9c:	4b22      	ldr	r3, [pc, #136]	; (2d28 <usb_isr+0x708>)
    2c9e:	701a      	strb	r2, [r3, #0]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    2ca0:	2301      	movs	r3, #1
    2ca2:	700b      	strb	r3, [r1, #0]
		return;
    2ca4:	e023      	b.n	2cee <usb_isr+0x6ce>
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    2ca6:	f015 0f80 	tst.w	r5, #128	; 0x80
    2caa:	d005      	beq.n	2cb8 <usb_isr+0x698>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    2cac:	220d      	movs	r2, #13
    2cae:	4b1b      	ldr	r3, [pc, #108]	; (2d1c <usb_isr+0x6fc>)
    2cb0:	701a      	strb	r2, [r3, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    2cb2:	2280      	movs	r2, #128	; 0x80
    2cb4:	3b40      	subs	r3, #64	; 0x40
    2cb6:	701a      	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    2cb8:	f015 0f02 	tst.w	r5, #2
    2cbc:	d006      	beq.n	2ccc <usb_isr+0x6ac>
		uint8_t err = USB0_ERRSTAT;
    2cbe:	4a18      	ldr	r2, [pc, #96]	; (2d20 <usb_isr+0x700>)
    2cc0:	7813      	ldrb	r3, [r2, #0]
    2cc2:	b2db      	uxtb	r3, r3
		USB0_ERRSTAT = err;
    2cc4:	7013      	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    2cc6:	2202      	movs	r2, #2
    2cc8:	4b18      	ldr	r3, [pc, #96]	; (2d2c <usb_isr+0x70c>)
    2cca:	701a      	strb	r2, [r3, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    2ccc:	f015 0f10 	tst.w	r5, #16
    2cd0:	d00d      	beq.n	2cee <usb_isr+0x6ce>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    2cd2:	2210      	movs	r2, #16
    2cd4:	4b15      	ldr	r3, [pc, #84]	; (2d2c <usb_isr+0x70c>)
    2cd6:	701a      	strb	r2, [r3, #0]
    2cd8:	e009      	b.n	2cee <usb_isr+0x6ce>
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
    2cda:	2100      	movs	r1, #0
    2cdc:	4608      	mov	r0, r1
    2cde:	f7ff fbbb 	bl	2458 <endpoint0_transmit>
    2ce2:	e6b1      	b.n	2a48 <usb_isr+0x428>
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
    2ce4:	2100      	movs	r1, #0
    2ce6:	4628      	mov	r0, r5
    2ce8:	f7ff fbb6 	bl	2458 <endpoint0_transmit>
    2cec:	e6ac      	b.n	2a48 <usb_isr+0x428>
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    2cee:	b005      	add	sp, #20
    2cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2cf4:	1fff9908 	.word	0x1fff9908
    2cf8:	1fff9bd8 	.word	0x1fff9bd8
    2cfc:	00400088 	.word	0x00400088
    2d00:	004000c8 	.word	0x004000c8
    2d04:	1fff99da 	.word	0x1fff99da
    2d08:	40072094 	.word	0x40072094
    2d0c:	1fff996c 	.word	0x1fff996c
    2d10:	1fff8000 	.word	0x1fff8000
    2d14:	1fff991c 	.word	0x1fff991c
    2d18:	1fff9970 	.word	0x1fff9970
    2d1c:	400720c0 	.word	0x400720c0
    2d20:	40072088 	.word	0x40072088
    2d24:	4007208c 	.word	0x4007208c
    2d28:	40072084 	.word	0x40072084
    2d2c:	40072080 	.word	0x40072080

00002d30 <usb_init>:



void usb_init(void)
{
    2d30:	b508      	push	{r3, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    2d32:	f000 fe89 	bl	3a48 <usb_init_serialnumber>
    2d36:	481c      	ldr	r0, [pc, #112]	; (2da8 <usb_init+0x78>)
    2d38:	f100 0188 	add.w	r1, r0, #136	; 0x88
    2d3c:	4603      	mov	r3, r0

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
		table[i].desc = 0;
    2d3e:	2200      	movs	r2, #0
    2d40:	601a      	str	r2, [r3, #0]
		table[i].addr = 0;
    2d42:	605a      	str	r2, [r3, #4]
    2d44:	3308      	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i <= NUM_ENDPOINTS*4; i++) {
    2d46:	428b      	cmp	r3, r1
    2d48:	d1fa      	bne.n	2d40 <usb_init+0x10>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    2d4a:	4a18      	ldr	r2, [pc, #96]	; (2dac <usb_init+0x7c>)
    2d4c:	6813      	ldr	r3, [r2, #0]
    2d4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    2d52:	6013      	str	r3, [r2, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    2d54:	f3c0 2207 	ubfx	r2, r0, #8, #8
    2d58:	4b15      	ldr	r3, [pc, #84]	; (2db0 <usb_init+0x80>)
    2d5a:	701a      	strb	r2, [r3, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    2d5c:	f3c0 4207 	ubfx	r2, r0, #16, #8
    2d60:	3314      	adds	r3, #20
    2d62:	701a      	strb	r2, [r3, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    2d64:	0e00      	lsrs	r0, r0, #24
    2d66:	3304      	adds	r3, #4
    2d68:	7018      	strb	r0, [r3, #0]

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    2d6a:	23ff      	movs	r3, #255	; 0xff
    2d6c:	4a11      	ldr	r2, [pc, #68]	; (2db4 <usb_init+0x84>)
    2d6e:	7013      	strb	r3, [r2, #0]
	USB0_ERRSTAT = 0xFF;
    2d70:	3208      	adds	r2, #8
    2d72:	7013      	strb	r3, [r2, #0]
	USB0_OTGISTAT = 0xFF;
    2d74:	3a78      	subs	r2, #120	; 0x78
    2d76:	7013      	strb	r3, [r2, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    2d78:	2301      	movs	r3, #1
    2d7a:	3284      	adds	r2, #132	; 0x84
    2d7c:	7013      	strb	r3, [r2, #0]
	USB0_USBCTRL = 0;
    2d7e:	2100      	movs	r1, #0
    2d80:	326c      	adds	r2, #108	; 0x6c
    2d82:	7011      	strb	r1, [r2, #0]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    2d84:	3a7c      	subs	r2, #124	; 0x7c
    2d86:	7013      	strb	r3, [r2, #0]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    2d88:	2270      	movs	r2, #112	; 0x70
    2d8a:	4b0b      	ldr	r3, [pc, #44]	; (2db8 <usb_init+0x88>)
    2d8c:	701a      	strb	r2, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    2d8e:	f44f 7200 	mov.w	r2, #512	; 0x200
    2d92:	f2a3 3341 	subw	r3, r3, #833	; 0x341
    2d96:	601a      	str	r2, [r3, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    2d98:	2210      	movs	r2, #16
    2d9a:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
    2d9e:	f503 23c8 	add.w	r3, r3, #409600	; 0x64000
    2da2:	701a      	strb	r2, [r3, #0]
    2da4:	bd08      	pop	{r3, pc}
    2da6:	bf00      	nop
    2da8:	1fff8000 	.word	0x1fff8000
    2dac:	40048034 	.word	0x40048034
    2db0:	4007209c 	.word	0x4007209c
    2db4:	40072080 	.word	0x40072080
    2db8:	e000e449 	.word	0xe000e449

00002dbc <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    2dbc:	b672      	cpsid	i
	avail = usb_buffer_available;
    2dbe:	4b0d      	ldr	r3, [pc, #52]	; (2df4 <usb_malloc+0x38>)
    2dc0:	681a      	ldr	r2, [r3, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    2dc2:	fab2 f382 	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    2dc6:	2b0b      	cmp	r3, #11
    2dc8:	d902      	bls.n	2dd0 <usb_malloc+0x14>
		__enable_irq();
    2dca:	b662      	cpsie	i
		return NULL;
    2dcc:	2000      	movs	r0, #0
    2dce:	4770      	bx	lr
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    2dd0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    2dd4:	40d9      	lsrs	r1, r3
    2dd6:	ea22 0201 	bic.w	r2, r2, r1
    2dda:	4906      	ldr	r1, [pc, #24]	; (2df4 <usb_malloc+0x38>)
    2ddc:	600a      	str	r2, [r1, #0]
	__enable_irq();
    2dde:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    2de0:	4905      	ldr	r1, [pc, #20]	; (2df8 <usb_malloc+0x3c>)
    2de2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    2de6:	00db      	lsls	r3, r3, #3
    2de8:	18c8      	adds	r0, r1, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    2dea:	2200      	movs	r2, #0
    2dec:	50ca      	str	r2, [r1, r3]
	*(uint32_t *)(p + 4) = 0;
    2dee:	6042      	str	r2, [r0, #4]
	return (usb_packet_t *)p;
}
    2df0:	4770      	bx	lr
    2df2:	bf00      	nop
    2df4:	1fff8dc4 	.word	0x1fff8dc4
    2df8:	1fff83bc 	.word	0x1fff83bc

00002dfc <usb_free>:
// for the receive endpoints to request memory
extern uint8_t usb_rx_memory_needed;
extern void usb_rx_memory(usb_packet_t *packet);

void usb_free(usb_packet_t *p)
{
    2dfc:	b508      	push	{r3, lr}
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    2dfe:	4b0f      	ldr	r3, [pc, #60]	; (2e3c <usb_free+0x40>)
    2e00:	1ac3      	subs	r3, r0, r3
    2e02:	4a0f      	ldr	r2, [pc, #60]	; (2e40 <usb_free+0x44>)
    2e04:	fba2 2303 	umull	r2, r3, r2, r3
    2e08:	091b      	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    2e0a:	2b0b      	cmp	r3, #11
    2e0c:	d814      	bhi.n	2e38 <usb_free+0x3c>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    2e0e:	4a0d      	ldr	r2, [pc, #52]	; (2e44 <usb_free+0x48>)
    2e10:	7812      	ldrb	r2, [r2, #0]
    2e12:	b13a      	cbz	r2, 2e24 <usb_free+0x28>
    2e14:	4a0c      	ldr	r2, [pc, #48]	; (2e48 <usb_free+0x4c>)
    2e16:	7812      	ldrb	r2, [r2, #0]
    2e18:	f012 0fff 	tst.w	r2, #255	; 0xff
    2e1c:	d002      	beq.n	2e24 <usb_free+0x28>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    2e1e:	f7ff fb75 	bl	250c <usb_rx_memory>
		return;
    2e22:	bd08      	pop	{r3, pc}
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    2e24:	b672      	cpsid	i
	usb_buffer_available |= mask;
    2e26:	4909      	ldr	r1, [pc, #36]	; (2e4c <usb_free+0x50>)
    2e28:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    2e2c:	fa22 f303 	lsr.w	r3, r2, r3
    2e30:	680a      	ldr	r2, [r1, #0]
    2e32:	431a      	orrs	r2, r3
    2e34:	600a      	str	r2, [r1, #0]
	__enable_irq();
    2e36:	b662      	cpsie	i
    2e38:	bd08      	pop	{r3, pc}
    2e3a:	bf00      	nop
    2e3c:	1fff83bc 	.word	0x1fff83bc
    2e40:	38e38e39 	.word	0x38e38e39
    2e44:	1fff99da 	.word	0x1fff99da
    2e48:	1fff99e4 	.word	0x1fff99e4
    2e4c:	1fff8dc4 	.word	0x1fff8dc4

00002e50 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    2e50:	b510      	push	{r4, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    2e52:	4b13      	ldr	r3, [pc, #76]	; (2ea0 <usb_serial_getchar+0x50>)
    2e54:	681b      	ldr	r3, [r3, #0]
    2e56:	b953      	cbnz	r3, 2e6e <usb_serial_getchar+0x1e>
		if (!usb_configuration) return -1;
    2e58:	4b12      	ldr	r3, [pc, #72]	; (2ea4 <usb_serial_getchar+0x54>)
    2e5a:	781b      	ldrb	r3, [r3, #0]
    2e5c:	f013 0fff 	tst.w	r3, #255	; 0xff
    2e60:	d018      	beq.n	2e94 <usb_serial_getchar+0x44>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    2e62:	2003      	movs	r0, #3
    2e64:	f7ff fb1c 	bl	24a0 <usb_rx>
    2e68:	4b0d      	ldr	r3, [pc, #52]	; (2ea0 <usb_serial_getchar+0x50>)
    2e6a:	6018      	str	r0, [r3, #0]
		if (!rx_packet) return -1;
    2e6c:	b1a8      	cbz	r0, 2e9a <usb_serial_getchar+0x4a>
	}
	i = rx_packet->index;
    2e6e:	4b0c      	ldr	r3, [pc, #48]	; (2ea0 <usb_serial_getchar+0x50>)
    2e70:	6818      	ldr	r0, [r3, #0]
    2e72:	8843      	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
    2e74:	1c5a      	adds	r2, r3, #1
    2e76:	4403      	add	r3, r0
    2e78:	7a1c      	ldrb	r4, [r3, #8]
	if (i >= rx_packet->len) {
    2e7a:	8803      	ldrh	r3, [r0, #0]
    2e7c:	429a      	cmp	r2, r3
    2e7e:	d306      	bcc.n	2e8e <usb_serial_getchar+0x3e>
		usb_free(rx_packet);
    2e80:	f7ff ffbc 	bl	2dfc <usb_free>
		rx_packet = NULL;
    2e84:	2200      	movs	r2, #0
    2e86:	4b06      	ldr	r3, [pc, #24]	; (2ea0 <usb_serial_getchar+0x50>)
    2e88:	601a      	str	r2, [r3, #0]
	} else {
		rx_packet->index = i;
	}
	return c;
    2e8a:	4620      	mov	r0, r4
    2e8c:	bd10      	pop	{r4, pc}
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    2e8e:	8042      	strh	r2, [r0, #2]
	}
	return c;
    2e90:	4620      	mov	r0, r4
    2e92:	bd10      	pop	{r4, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    2e94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2e98:	bd10      	pop	{r4, pc}
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
    2e9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
	}
	return c;
}
    2e9e:	bd10      	pop	{r4, pc}
    2ea0:	1fff99f0 	.word	0x1fff99f0
    2ea4:	1fff99e4 	.word	0x1fff99e4

00002ea8 <usb_serial_peekchar>:

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    2ea8:	b508      	push	{r3, lr}
	if (!rx_packet) {
    2eaa:	4b0d      	ldr	r3, [pc, #52]	; (2ee0 <usb_serial_peekchar+0x38>)
    2eac:	681b      	ldr	r3, [r3, #0]
    2eae:	b983      	cbnz	r3, 2ed2 <usb_serial_peekchar+0x2a>
		if (!usb_configuration) return -1;
    2eb0:	4b0c      	ldr	r3, [pc, #48]	; (2ee4 <usb_serial_peekchar+0x3c>)
    2eb2:	781b      	ldrb	r3, [r3, #0]
    2eb4:	f013 0fff 	tst.w	r3, #255	; 0xff
    2eb8:	d008      	beq.n	2ecc <usb_serial_peekchar+0x24>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    2eba:	2003      	movs	r0, #3
    2ebc:	f7ff faf0 	bl	24a0 <usb_rx>
    2ec0:	4b07      	ldr	r3, [pc, #28]	; (2ee0 <usb_serial_peekchar+0x38>)
    2ec2:	6018      	str	r0, [r3, #0]
		if (!rx_packet) return -1;
    2ec4:	b928      	cbnz	r0, 2ed2 <usb_serial_peekchar+0x2a>
    2ec6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2eca:	bd08      	pop	{r3, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    2ecc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2ed0:	bd08      	pop	{r3, pc}
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
    2ed2:	4b03      	ldr	r3, [pc, #12]	; (2ee0 <usb_serial_peekchar+0x38>)
    2ed4:	681a      	ldr	r2, [r3, #0]
	return rx_packet->buf[rx_packet->index];
    2ed6:	8853      	ldrh	r3, [r2, #2]
    2ed8:	4413      	add	r3, r2
    2eda:	7a18      	ldrb	r0, [r3, #8]
}
    2edc:	bd08      	pop	{r3, pc}
    2ede:	bf00      	nop
    2ee0:	1fff99f0 	.word	0x1fff99f0
    2ee4:	1fff99e4 	.word	0x1fff99e4

00002ee8 <usb_serial_available>:
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    2ee8:	4b04      	ldr	r3, [pc, #16]	; (2efc <usb_serial_available+0x14>)

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    2eea:	8898      	ldrh	r0, [r3, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    2eec:	4b04      	ldr	r3, [pc, #16]	; (2f00 <usb_serial_available+0x18>)
    2eee:	681b      	ldr	r3, [r3, #0]
    2ef0:	b11b      	cbz	r3, 2efa <usb_serial_available+0x12>
    2ef2:	881a      	ldrh	r2, [r3, #0]
    2ef4:	885b      	ldrh	r3, [r3, #2]
    2ef6:	1ad3      	subs	r3, r2, r3
    2ef8:	4418      	add	r0, r3
	return count;
}
    2efa:	4770      	bx	lr
    2efc:	1fff9bd8 	.word	0x1fff9bd8
    2f00:	1fff99f0 	.word	0x1fff99f0

00002f04 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    2f04:	4b0b      	ldr	r3, [pc, #44]	; (2f34 <usb_serial_flush_input+0x30>)
    2f06:	781b      	ldrb	r3, [r3, #0]
    2f08:	f013 0fff 	tst.w	r3, #255	; 0xff
    2f0c:	d011      	beq.n	2f32 <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    2f0e:	b510      	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    2f10:	4b09      	ldr	r3, [pc, #36]	; (2f38 <usb_serial_flush_input+0x34>)
    2f12:	6818      	ldr	r0, [r3, #0]
    2f14:	b120      	cbz	r0, 2f20 <usb_serial_flush_input+0x1c>
		usb_free(rx_packet);
    2f16:	f7ff ff71 	bl	2dfc <usb_free>
		rx_packet = NULL;
    2f1a:	2200      	movs	r2, #0
    2f1c:	4b06      	ldr	r3, [pc, #24]	; (2f38 <usb_serial_flush_input+0x34>)
    2f1e:	601a      	str	r2, [r3, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    2f20:	2403      	movs	r4, #3
    2f22:	4620      	mov	r0, r4
    2f24:	f7ff fabc 	bl	24a0 <usb_rx>
		if (!rx) break;
    2f28:	b110      	cbz	r0, 2f30 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    2f2a:	f7ff ff67 	bl	2dfc <usb_free>
	}
    2f2e:	e7f8      	b.n	2f22 <usb_serial_flush_input+0x1e>
    2f30:	bd10      	pop	{r4, pc}
    2f32:	4770      	bx	lr
    2f34:	1fff99e4 	.word	0x1fff99e4
    2f38:	1fff99f0 	.word	0x1fff99f0

00002f3c <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    2f3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    2f40:	2201      	movs	r2, #1
    2f42:	4b37      	ldr	r3, [pc, #220]	; (3020 <usb_serial_write+0xe4>)
    2f44:	701a      	strb	r2, [r3, #0]
	while (size > 0) {
    2f46:	468a      	mov	sl, r1
    2f48:	2900      	cmp	r1, #0
    2f4a:	d063      	beq.n	3014 <usb_serial_write+0xd8>
    2f4c:	4604      	mov	r4, r0
    2f4e:	460d      	mov	r5, r1
		if (!tx_packet) {
    2f50:	4f34      	ldr	r7, [pc, #208]	; (3024 <usb_serial_write+0xe8>)
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    2f52:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 3030 <usb_serial_write+0xf4>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    2f56:	4699      	mov	r9, r3
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    2f58:	4e33      	ldr	r6, [pc, #204]	; (3028 <usb_serial_write+0xec>)
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
    2f5a:	683b      	ldr	r3, [r7, #0]
    2f5c:	bb83      	cbnz	r3, 2fc0 <usb_serial_write+0x84>
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    2f5e:	f898 3000 	ldrb.w	r3, [r8]
    2f62:	f013 0fff 	tst.w	r3, #255	; 0xff
    2f66:	d106      	bne.n	2f76 <usb_serial_write+0x3a>
					tx_noautoflush = 0;
    2f68:	2200      	movs	r2, #0
    2f6a:	4b2d      	ldr	r3, [pc, #180]	; (3020 <usb_serial_write+0xe4>)
    2f6c:	701a      	strb	r2, [r3, #0]
					return -1;
    2f6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2f72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    2f76:	f247 5b09 	movw	fp, #29961	; 0x7509
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    2f7a:	2004      	movs	r0, #4
    2f7c:	f7ff fab0 	bl	24e0 <usb_tx_packet_count>
    2f80:	2807      	cmp	r0, #7
    2f82:	d809      	bhi.n	2f98 <usb_serial_write+0x5c>
					tx_noautoflush = 1;
    2f84:	2301      	movs	r3, #1
    2f86:	f889 3000 	strb.w	r3, [r9]
					tx_packet = usb_malloc();
    2f8a:	f7ff ff17 	bl	2dbc <usb_malloc>
    2f8e:	6038      	str	r0, [r7, #0]
					if (tx_packet) break;
    2f90:	b9b0      	cbnz	r0, 2fc0 <usb_serial_write+0x84>
					tx_noautoflush = 0;
    2f92:	2300      	movs	r3, #0
    2f94:	f889 3000 	strb.w	r3, [r9]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    2f98:	f1bb 0b01 	subs.w	fp, fp, #1
    2f9c:	d001      	beq.n	2fa2 <usb_serial_write+0x66>
    2f9e:	7833      	ldrb	r3, [r6, #0]
    2fa0:	b133      	cbz	r3, 2fb0 <usb_serial_write+0x74>
					transmit_previous_timeout = 1;
    2fa2:	2201      	movs	r2, #1
    2fa4:	4b20      	ldr	r3, [pc, #128]	; (3028 <usb_serial_write+0xec>)
    2fa6:	701a      	strb	r2, [r3, #0]
					return -1;
    2fa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2fac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				}
				yield();
    2fb0:	f000 f9e6 	bl	3380 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    2fb4:	f898 3000 	ldrb.w	r3, [r8]
    2fb8:	f013 0fff 	tst.w	r3, #255	; 0xff
    2fbc:	d1dd      	bne.n	2f7a <usb_serial_write+0x3e>
    2fbe:	e7d3      	b.n	2f68 <usb_serial_write+0x2c>
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    2fc0:	2300      	movs	r3, #0
    2fc2:	7033      	strb	r3, [r6, #0]
		len = CDC_TX_SIZE - tx_packet->index;
    2fc4:	6839      	ldr	r1, [r7, #0]
    2fc6:	884a      	ldrh	r2, [r1, #2]
    2fc8:	f1c2 0040 	rsb	r0, r2, #64	; 0x40
    2fcc:	42a8      	cmp	r0, r5
    2fce:	bf28      	it	cs
    2fd0:	4628      	movcs	r0, r5
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    2fd2:	f101 0308 	add.w	r3, r1, #8
		tx_packet->index += len;
    2fd6:	eb02 0e00 	add.w	lr, r2, r0
    2fda:	f8a1 e002 	strh.w	lr, [r1, #2]
		size -= len;
    2fde:	1a2d      	subs	r5, r5, r0
		while (len-- > 0) *dest++ = *src++;
    2fe0:	b148      	cbz	r0, 2ff6 <usb_serial_write+0xba>
    2fe2:	3a01      	subs	r2, #1
    2fe4:	4413      	add	r3, r2
    2fe6:	4420      	add	r0, r4
    2fe8:	f814 2b01 	ldrb.w	r2, [r4], #1
    2fec:	f803 2f01 	strb.w	r2, [r3, #1]!
    2ff0:	42a0      	cmp	r0, r4
    2ff2:	d1f9      	bne.n	2fe8 <usb_serial_write+0xac>
    2ff4:	4604      	mov	r4, r0
		if (tx_packet->index >= CDC_TX_SIZE) {
    2ff6:	884b      	ldrh	r3, [r1, #2]
    2ff8:	2b3f      	cmp	r3, #63	; 0x3f
    2ffa:	d906      	bls.n	300a <usb_serial_write+0xce>
			tx_packet->len = CDC_TX_SIZE;
    2ffc:	2340      	movs	r3, #64	; 0x40
    2ffe:	800b      	strh	r3, [r1, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    3000:	2004      	movs	r0, #4
    3002:	f7ff fac7 	bl	2594 <usb_tx>
			tx_packet = NULL;
    3006:	2300      	movs	r3, #0
    3008:	603b      	str	r3, [r7, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    300a:	2205      	movs	r2, #5
    300c:	4b07      	ldr	r3, [pc, #28]	; (302c <usb_serial_write+0xf0>)
    300e:	701a      	strb	r2, [r3, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    3010:	2d00      	cmp	r5, #0
    3012:	d1a2      	bne.n	2f5a <usb_serial_write+0x1e>
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    3014:	2200      	movs	r2, #0
    3016:	4b02      	ldr	r3, [pc, #8]	; (3020 <usb_serial_write+0xe4>)
    3018:	701a      	strb	r2, [r3, #0]
	return ret;
    301a:	4650      	mov	r0, sl
}
    301c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3020:	1fff99e7 	.word	0x1fff99e7
    3024:	1fff99e8 	.word	0x1fff99e8
    3028:	1fff99ec 	.word	0x1fff99ec
    302c:	1fff99e6 	.word	0x1fff99e6
    3030:	1fff99e4 	.word	0x1fff99e4

00003034 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    3034:	b500      	push	{lr}
    3036:	b083      	sub	sp, #12
    3038:	ab02      	add	r3, sp, #8
    303a:	f803 0d01 	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    303e:	2101      	movs	r1, #1
    3040:	4618      	mov	r0, r3
    3042:	f7ff ff7b 	bl	2f3c <usb_serial_write>
}
    3046:	b003      	add	sp, #12
    3048:	f85d fb04 	ldr.w	pc, [sp], #4

0000304c <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    304c:	b508      	push	{r3, lr}
	uint32_t len;

	tx_noautoflush = 1;
    304e:	2201      	movs	r2, #1
    3050:	4b10      	ldr	r3, [pc, #64]	; (3094 <usb_serial_write_buffer_free+0x48>)
    3052:	701a      	strb	r2, [r3, #0]
	if (!tx_packet) {
    3054:	4b10      	ldr	r3, [pc, #64]	; (3098 <usb_serial_write_buffer_free+0x4c>)
    3056:	681b      	ldr	r3, [r3, #0]
    3058:	b993      	cbnz	r3, 3080 <usb_serial_write_buffer_free+0x34>
		if (!usb_configuration ||
    305a:	4b10      	ldr	r3, [pc, #64]	; (309c <usb_serial_write_buffer_free+0x50>)
    305c:	781b      	ldrb	r3, [r3, #0]
    305e:	f013 0fff 	tst.w	r3, #255	; 0xff
    3062:	d009      	beq.n	3078 <usb_serial_write_buffer_free+0x2c>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    3064:	2004      	movs	r0, #4
    3066:	f7ff fa3b 	bl	24e0 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    306a:	2807      	cmp	r0, #7
    306c:	d804      	bhi.n	3078 <usb_serial_write_buffer_free+0x2c>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    306e:	f7ff fea5 	bl	2dbc <usb_malloc>
    3072:	4b09      	ldr	r3, [pc, #36]	; (3098 <usb_serial_write_buffer_free+0x4c>)
    3074:	6018      	str	r0, [r3, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    3076:	b918      	cbnz	r0, 3080 <usb_serial_write_buffer_free+0x34>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    3078:	2000      	movs	r0, #0
    307a:	4b06      	ldr	r3, [pc, #24]	; (3094 <usb_serial_write_buffer_free+0x48>)
    307c:	7018      	strb	r0, [r3, #0]
			return 0;
    307e:	bd08      	pop	{r3, pc}
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    3080:	4b05      	ldr	r3, [pc, #20]	; (3098 <usb_serial_write_buffer_free+0x4c>)
    3082:	681b      	ldr	r3, [r3, #0]
    3084:	8858      	ldrh	r0, [r3, #2]
    3086:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    308a:	2200      	movs	r2, #0
    308c:	4b01      	ldr	r3, [pc, #4]	; (3094 <usb_serial_write_buffer_free+0x48>)
    308e:	701a      	strb	r2, [r3, #0]
	return len;
}
    3090:	bd08      	pop	{r3, pc}
    3092:	bf00      	nop
    3094:	1fff99e7 	.word	0x1fff99e7
    3098:	1fff99e8 	.word	0x1fff99e8
    309c:	1fff99e4 	.word	0x1fff99e4

000030a0 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
    30a0:	4b14      	ldr	r3, [pc, #80]	; (30f4 <usb_serial_flush_output+0x54>)
    30a2:	781b      	ldrb	r3, [r3, #0]
    30a4:	f013 0fff 	tst.w	r3, #255	; 0xff
    30a8:	d023      	beq.n	30f2 <usb_serial_flush_output+0x52>
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    30aa:	b510      	push	{r4, lr}
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    30ac:	2201      	movs	r2, #1
    30ae:	4b12      	ldr	r3, [pc, #72]	; (30f8 <usb_serial_flush_output+0x58>)
    30b0:	701a      	strb	r2, [r3, #0]
	if (tx_packet) {
    30b2:	4b12      	ldr	r3, [pc, #72]	; (30fc <usb_serial_flush_output+0x5c>)
    30b4:	6819      	ldr	r1, [r3, #0]
    30b6:	b151      	cbz	r1, 30ce <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    30b8:	2400      	movs	r4, #0
    30ba:	4b11      	ldr	r3, [pc, #68]	; (3100 <usb_serial_flush_output+0x60>)
    30bc:	701c      	strb	r4, [r3, #0]
		tx_packet->len = tx_packet->index;
    30be:	884b      	ldrh	r3, [r1, #2]
    30c0:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    30c2:	2004      	movs	r0, #4
    30c4:	f7ff fa66 	bl	2594 <usb_tx>
		tx_packet = NULL;
    30c8:	4b0c      	ldr	r3, [pc, #48]	; (30fc <usb_serial_flush_output+0x5c>)
    30ca:	601c      	str	r4, [r3, #0]
    30cc:	e00d      	b.n	30ea <usb_serial_flush_output+0x4a>
	} else {
		usb_packet_t *tx = usb_malloc();
    30ce:	f7ff fe75 	bl	2dbc <usb_malloc>
		if (tx) {
    30d2:	4601      	mov	r1, r0
    30d4:	b130      	cbz	r0, 30e4 <usb_serial_flush_output+0x44>
			usb_cdc_transmit_flush_timer = 0;
    30d6:	2200      	movs	r2, #0
    30d8:	4b09      	ldr	r3, [pc, #36]	; (3100 <usb_serial_flush_output+0x60>)
    30da:	701a      	strb	r2, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    30dc:	2004      	movs	r0, #4
    30de:	f7ff fa59 	bl	2594 <usb_tx>
    30e2:	e002      	b.n	30ea <usb_serial_flush_output+0x4a>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    30e4:	2201      	movs	r2, #1
    30e6:	4b06      	ldr	r3, [pc, #24]	; (3100 <usb_serial_flush_output+0x60>)
    30e8:	701a      	strb	r2, [r3, #0]
		}
	}
	tx_noautoflush = 0;
    30ea:	2200      	movs	r2, #0
    30ec:	4b02      	ldr	r3, [pc, #8]	; (30f8 <usb_serial_flush_output+0x58>)
    30ee:	701a      	strb	r2, [r3, #0]
    30f0:	bd10      	pop	{r4, pc}
    30f2:	4770      	bx	lr
    30f4:	1fff99e4 	.word	0x1fff99e4
    30f8:	1fff99e7 	.word	0x1fff99e7
    30fc:	1fff99e8 	.word	0x1fff99e8
    3100:	1fff99e6 	.word	0x1fff99e6

00003104 <usb_serial_flush_callback>:
}

void usb_serial_flush_callback(void)
{
    3104:	b508      	push	{r3, lr}
	if (tx_noautoflush) return;
    3106:	4b0e      	ldr	r3, [pc, #56]	; (3140 <usb_serial_flush_callback+0x3c>)
    3108:	781b      	ldrb	r3, [r3, #0]
    310a:	f013 0fff 	tst.w	r3, #255	; 0xff
    310e:	d116      	bne.n	313e <usb_serial_flush_callback+0x3a>
	if (tx_packet) {
    3110:	4b0c      	ldr	r3, [pc, #48]	; (3144 <usb_serial_flush_callback+0x40>)
    3112:	6819      	ldr	r1, [r3, #0]
    3114:	b141      	cbz	r1, 3128 <usb_serial_flush_callback+0x24>
		tx_packet->len = tx_packet->index;
    3116:	884b      	ldrh	r3, [r1, #2]
    3118:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    311a:	2004      	movs	r0, #4
    311c:	f7ff fa3a 	bl	2594 <usb_tx>
		tx_packet = NULL;
    3120:	2200      	movs	r2, #0
    3122:	4b08      	ldr	r3, [pc, #32]	; (3144 <usb_serial_flush_callback+0x40>)
    3124:	601a      	str	r2, [r3, #0]
    3126:	bd08      	pop	{r3, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
    3128:	f7ff fe48 	bl	2dbc <usb_malloc>
		if (tx) {
    312c:	4601      	mov	r1, r0
    312e:	b118      	cbz	r0, 3138 <usb_serial_flush_callback+0x34>
			usb_tx(CDC_TX_ENDPOINT, tx);
    3130:	2004      	movs	r0, #4
    3132:	f7ff fa2f 	bl	2594 <usb_tx>
    3136:	bd08      	pop	{r3, pc}
		} else {
			usb_cdc_transmit_flush_timer = 1;
    3138:	2201      	movs	r2, #1
    313a:	4b03      	ldr	r3, [pc, #12]	; (3148 <usb_serial_flush_callback+0x44>)
    313c:	701a      	strb	r2, [r3, #0]
    313e:	bd08      	pop	{r3, pc}
    3140:	1fff99e7 	.word	0x1fff99e7
    3144:	1fff99e8 	.word	0x1fff99e8
    3148:	1fff99e6 	.word	0x1fff99e6

0000314c <DMAChannel::begin(bool)>:
/**                     Teensy 3.0 & 3.1                       **/
/****************************************************************/
#if defined(KINETISK)

void DMAChannel::begin(bool force_initialization)
{
    314c:	b410      	push	{r4}
	uint32_t ch = 0;

	__disable_irq();
    314e:	b672      	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    3150:	b909      	cbnz	r1, 3156 <DMAChannel::begin(bool)+0xa>
    3152:	6802      	ldr	r2, [r0, #0]
    3154:	b922      	cbnz	r2, 3160 <DMAChannel::begin(bool)+0x14>
		// DMA channel already allocated
		__enable_irq();
		return;
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    3156:	4b29      	ldr	r3, [pc, #164]	; (31fc <DMAChannel::begin(bool)+0xb0>)
    3158:	881c      	ldrh	r4, [r3, #0]
    315a:	4621      	mov	r1, r4
    315c:	2300      	movs	r3, #0
    315e:	e011      	b.n	3184 <DMAChannel::begin(bool)+0x38>
void DMAChannel::begin(bool force_initialization)
{
	uint32_t ch = 0;

	__disable_irq();
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
    3160:	7903      	ldrb	r3, [r0, #4]
    3162:	2b0f      	cmp	r3, #15
    3164:	d8f7      	bhi.n	3156 <DMAChannel::begin(bool)+0xa>
	  && (dma_channel_allocated_mask & (1 << channel))
    3166:	4925      	ldr	r1, [pc, #148]	; (31fc <DMAChannel::begin(bool)+0xb0>)
    3168:	8809      	ldrh	r1, [r1, #0]
    316a:	4119      	asrs	r1, r3
    316c:	f011 0f01 	tst.w	r1, #1
    3170:	d0f1      	beq.n	3156 <DMAChannel::begin(bool)+0xa>
	  && (uint32_t)TCD == (uint32_t)(0x40009000 + channel * 32)) {
    3172:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
    3176:	f503 6390 	add.w	r3, r3, #1152	; 0x480
    317a:	ebb2 1f43 	cmp.w	r2, r3, lsl #5
    317e:	d1ea      	bne.n	3156 <DMAChannel::begin(bool)+0xa>
		// DMA channel already allocated
		__enable_irq();
    3180:	b662      	cpsie	i
		return;
    3182:	e039      	b.n	31f8 <DMAChannel::begin(bool)+0xac>
	}
	while (1) {
		if (!(dma_channel_allocated_mask & (1 << ch))) {
    3184:	fa41 f203 	asr.w	r2, r1, r3
    3188:	f012 0f01 	tst.w	r2, #1
    318c:	d12c      	bne.n	31e8 <DMAChannel::begin(bool)+0x9c>
			dma_channel_allocated_mask |= (1 << ch);
    318e:	2201      	movs	r2, #1
    3190:	409a      	lsls	r2, r3
    3192:	4314      	orrs	r4, r2
    3194:	4a19      	ldr	r2, [pc, #100]	; (31fc <DMAChannel::begin(bool)+0xb0>)
    3196:	8014      	strh	r4, [r2, #0]
			__enable_irq();
    3198:	b662      	cpsie	i
			channel = DMA_MAX_CHANNELS;
			return; // no more channels available
			// attempts to use this object will hardfault
		}
	}
	channel = ch;
    319a:	b2da      	uxtb	r2, r3
    319c:	7102      	strb	r2, [r0, #4]
	SIM_SCGC7 |= SIM_SCGC7_DMA;
    319e:	4c18      	ldr	r4, [pc, #96]	; (3200 <DMAChannel::begin(bool)+0xb4>)
    31a0:	6821      	ldr	r1, [r4, #0]
    31a2:	f041 0102 	orr.w	r1, r1, #2
    31a6:	6021      	str	r1, [r4, #0]
	SIM_SCGC6 |= SIM_SCGC6_DMAMUX;
    31a8:	3c04      	subs	r4, #4
    31aa:	6821      	ldr	r1, [r4, #0]
    31ac:	f041 0102 	orr.w	r1, r1, #2
    31b0:	6021      	str	r1, [r4, #0]
#if DMA_NUM_CHANNELS <= 16
	DMA_CR = DMA_CR_EMLM | DMA_CR_EDBG; // minor loop mapping is available
    31b2:	2482      	movs	r4, #130	; 0x82
    31b4:	4913      	ldr	r1, [pc, #76]	; (3204 <DMAChannel::begin(bool)+0xb8>)
    31b6:	600c      	str	r4, [r1, #0]
#else
	DMA_CR = DMA_CR_GRP1PRI| DMA_CR_EMLM | DMA_CR_EDBG;
#endif
	DMA_CERQ = ch;
    31b8:	311a      	adds	r1, #26
    31ba:	700a      	strb	r2, [r1, #0]
	DMA_CERR = ch;
    31bc:	3104      	adds	r1, #4
    31be:	700a      	strb	r2, [r1, #0]
	DMA_CEEI = ch;
    31c0:	3906      	subs	r1, #6
    31c2:	700a      	strb	r2, [r1, #0]
	DMA_CINT = ch;
    31c4:	3107      	adds	r1, #7
    31c6:	700a      	strb	r2, [r1, #0]
	TCD = (TCD_t *)(0x40009000 + ch * 32);
    31c8:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
    31cc:	f503 6390 	add.w	r3, r3, #1152	; 0x480
    31d0:	015b      	lsls	r3, r3, #5
    31d2:	6003      	str	r3, [r0, #0]
	uint32_t *p = (uint32_t *)TCD;
	*p++ = 0;
    31d4:	2200      	movs	r2, #0
    31d6:	601a      	str	r2, [r3, #0]
	*p++ = 0;
    31d8:	605a      	str	r2, [r3, #4]
	*p++ = 0;
    31da:	609a      	str	r2, [r3, #8]
	*p++ = 0;
    31dc:	60da      	str	r2, [r3, #12]
	*p++ = 0;
    31de:	611a      	str	r2, [r3, #16]
	*p++ = 0;
    31e0:	615a      	str	r2, [r3, #20]
	*p++ = 0;
    31e2:	619a      	str	r2, [r3, #24]
	*p++ = 0;
    31e4:	61da      	str	r2, [r3, #28]
    31e6:	e007      	b.n	31f8 <DMAChannel::begin(bool)+0xac>
		if (!(dma_channel_allocated_mask & (1 << ch))) {
			dma_channel_allocated_mask |= (1 << ch);
			__enable_irq();
			break;
		}
		if (++ch >= DMA_MAX_CHANNELS) {
    31e8:	3301      	adds	r3, #1
    31ea:	2b10      	cmp	r3, #16
    31ec:	d1ca      	bne.n	3184 <DMAChannel::begin(bool)+0x38>
			__enable_irq();
    31ee:	b662      	cpsie	i
			TCD = (TCD_t *)0;
    31f0:	2300      	movs	r3, #0
    31f2:	6003      	str	r3, [r0, #0]
			channel = DMA_MAX_CHANNELS;
    31f4:	2310      	movs	r3, #16
    31f6:	7103      	strb	r3, [r0, #4]
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
	*p++ = 0;
}
    31f8:	bc10      	pop	{r4}
    31fa:	4770      	bx	lr
    31fc:	1fff99f6 	.word	0x1fff99f6
    3200:	40048040 	.word	0x40048040
    3204:	40008000 	.word	0x40008000

00003208 <DMAChannel::release()>:

void DMAChannel::release(void)
{
	if (channel >= DMA_MAX_CHANNELS) return;
    3208:	7903      	ldrb	r3, [r0, #4]
    320a:	2b0f      	cmp	r3, #15
    320c:	d810      	bhi.n	3230 <DMAChannel::release()+0x28>
	DMA_CERQ = channel;
    320e:	4a09      	ldr	r2, [pc, #36]	; (3234 <DMAChannel::release()+0x2c>)
    3210:	7013      	strb	r3, [r2, #0]
	__disable_irq();
    3212:	b672      	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
    3214:	4908      	ldr	r1, [pc, #32]	; (3238 <DMAChannel::release()+0x30>)
    3216:	7902      	ldrb	r2, [r0, #4]
    3218:	2301      	movs	r3, #1
    321a:	fa03 f202 	lsl.w	r2, r3, r2
    321e:	880b      	ldrh	r3, [r1, #0]
    3220:	ea23 0302 	bic.w	r3, r3, r2
    3224:	800b      	strh	r3, [r1, #0]
	__enable_irq();
    3226:	b662      	cpsie	i
	channel = DMA_MAX_CHANNELS;
    3228:	2310      	movs	r3, #16
    322a:	7103      	strb	r3, [r0, #4]
	TCD = (TCD_t *)0;
    322c:	2300      	movs	r3, #0
    322e:	6003      	str	r3, [r0, #0]
    3230:	4770      	bx	lr
    3232:	bf00      	nop
    3234:	4000801a 	.word	0x4000801a
    3238:	1fff99f6 	.word	0x1fff99f6

0000323c <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    323c:	b500      	push	{lr}
    323e:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    3240:	4b05      	ldr	r3, [pc, #20]	; (3258 <Print::println()+0x1c>)
    3242:	881b      	ldrh	r3, [r3, #0]
    3244:	f8ad 3004 	strh.w	r3, [sp, #4]
	return write(buf, 2);
    3248:	6803      	ldr	r3, [r0, #0]
    324a:	685b      	ldr	r3, [r3, #4]
    324c:	2202      	movs	r2, #2
    324e:	a901      	add	r1, sp, #4
    3250:	4798      	blx	r3
}
    3252:	b003      	add	sp, #12
    3254:	f85d fb04 	ldr.w	pc, [sp], #4
    3258:	00008cc8 	.word	0x00008cc8

0000325c <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    325c:	b510      	push	{r4, lr}
    325e:	4614      	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    3260:	6803      	ldr	r3, [r0, #0]
    3262:	685b      	ldr	r3, [r3, #4]
    3264:	4798      	blx	r3
	return len;
}
    3266:	4620      	mov	r0, r4
    3268:	bd10      	pop	{r4, pc}
    326a:	bf00      	nop

0000326c <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    326c:	b40e      	push	{r1, r2, r3}
    326e:	b500      	push	{lr}
    3270:	b082      	sub	sp, #8
    3272:	aa03      	add	r2, sp, #12
    3274:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, format);
    3278:	9201      	str	r2, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    327a:	f001 ffb5 	bl	51e8 <vdprintf>
#endif
}
    327e:	b002      	add	sp, #8
    3280:	f85d eb04 	ldr.w	lr, [sp], #4
    3284:	b003      	add	sp, #12
    3286:	4770      	bx	lr

00003288 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    3288:	b5f0      	push	{r4, r5, r6, r7, lr}
    328a:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    328c:	b922      	cbnz	r2, 3298 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x10>
		return write((uint8_t)n);
    328e:	6803      	ldr	r3, [r0, #0]
    3290:	681b      	ldr	r3, [r3, #0]
    3292:	b2c9      	uxtb	r1, r1
    3294:	4798      	blx	r3
    3296:	e031      	b.n	32fc <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x74>
    3298:	4616      	mov	r6, r2
	} else if (base == 1) {
		base = 10;
    329a:	2a01      	cmp	r2, #1
    329c:	bf14      	ite	ne
    329e:	4616      	movne	r6, r2
    32a0:	260a      	moveq	r6, #10
	}


	if (n == 0) {
    32a2:	b921      	cbnz	r1, 32ae <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x26>
		buf[sizeof(buf) - 1] = '0';
    32a4:	2230      	movs	r2, #48	; 0x30
    32a6:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    32aa:	2421      	movs	r4, #33	; 0x21
    32ac:	e017      	b.n	32de <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x56>
    32ae:	2421      	movs	r4, #33	; 0x21
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    32b0:	4637      	mov	r7, r6
    32b2:	fbb1 f2f6 	udiv	r2, r1, r6
    32b6:	fb06 1212 	mls	r2, r6, r2, r1
    32ba:	b2d2      	uxtb	r2, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    32bc:	4625      	mov	r5, r4
    32be:	2a09      	cmp	r2, #9
    32c0:	bf94      	ite	ls
    32c2:	3230      	addls	r2, #48	; 0x30
    32c4:	3237      	addhi	r2, #55	; 0x37
    32c6:	b2d2      	uxtb	r2, r2
    32c8:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
    32cc:	4475      	add	r5, lr
    32ce:	f805 2c24 	strb.w	r2, [r5, #-36]
			n /= base;
    32d2:	fbb1 f1f7 	udiv	r1, r1, r7
			if (n == 0) break;
    32d6:	b111      	cbz	r1, 32de <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x56>
			i--;
    32d8:	3c01      	subs	r4, #1
    32da:	b2e4      	uxtb	r4, r4
	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
    32dc:	e7e9      	b.n	32b2 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x2a>
			n /= base;
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
    32de:	b133      	cbz	r3, 32ee <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x66>
		i--;
    32e0:	3c01      	subs	r4, #1
    32e2:	b2e4      	uxtb	r4, r4
		buf[i] = '-';
    32e4:	ab0a      	add	r3, sp, #40	; 0x28
    32e6:	4423      	add	r3, r4
    32e8:	222d      	movs	r2, #45	; 0x2d
    32ea:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    32ee:	6803      	ldr	r3, [r0, #0]
    32f0:	685b      	ldr	r3, [r3, #4]
    32f2:	f1c4 0222 	rsb	r2, r4, #34	; 0x22
    32f6:	a901      	add	r1, sp, #4
    32f8:	4421      	add	r1, r4
    32fa:	4798      	blx	r3
}
    32fc:	b00b      	add	sp, #44	; 0x2c
    32fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003300 <Print::print(long)>:
	return count;
}


size_t Print::print(long n)
{
    3300:	b508      	push	{r3, lr}
	uint8_t sign=0;

	if (n < 0) {
    3302:	2900      	cmp	r1, #0
		sign = '-';
		n = -n;
    3304:	bfba      	itte	lt
    3306:	4249      	neglt	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    3308:	232d      	movlt	r3, #45	; 0x2d
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    330a:	2300      	movge	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    330c:	220a      	movs	r2, #10
    330e:	f7ff ffbb 	bl	3288 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
}
    3312:	bd08      	pop	{r3, pc}

00003314 <main>:
 */

#include "WProgram.h"

extern "C" int main(void)
{
    3314:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    3316:	f7fd f8b3 	bl	480 <setup>
	while (1) {
		loop();
    331a:	f7fd f97f 	bl	61c <loop>
		yield();
    331e:	f000 f82f 	bl	3380 <yield>
    3322:	e7fa      	b.n	331a <main+0x6>

00003324 <operator new(unsigned int)>:
 */

#include "new.h"

void * operator new(size_t size)
{
    3324:	b508      	push	{r3, lr}
  return malloc(size);
    3326:	f001 f921 	bl	456c <malloc>
}
    332a:	bd08      	pop	{r3, pc}

0000332c <operator delete(void*, unsigned int)>:
{
  free(ptr);
}

void operator delete(void * ptr, size_t size)
{
    332c:	b508      	push	{r3, lr}
  free(ptr);
    332e:	f001 f925 	bl	457c <free>
    3332:	bd08      	pop	{r3, pc}

00003334 <usb_serial_class::clear()>:
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    3334:	b508      	push	{r3, lr}
    3336:	f7ff fde5 	bl	2f04 <usb_serial_flush_input>
    333a:	bd08      	pop	{r3, pc}

0000333c <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    333c:	b508      	push	{r3, lr}
    333e:	f7ff fdb3 	bl	2ea8 <usb_serial_peekchar>
    3342:	bd08      	pop	{r3, pc}

00003344 <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    3344:	b508      	push	{r3, lr}
    3346:	f7ff fd83 	bl	2e50 <usb_serial_getchar>
    334a:	bd08      	pop	{r3, pc}

0000334c <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    334c:	b508      	push	{r3, lr}
    334e:	f7ff fdcb 	bl	2ee8 <usb_serial_available>
    3352:	bd08      	pop	{r3, pc}

00003354 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    3354:	b508      	push	{r3, lr}
    3356:	f7ff fea3 	bl	30a0 <usb_serial_flush_output>
    335a:	bd08      	pop	{r3, pc}

0000335c <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    335c:	b508      	push	{r3, lr}
    335e:	f7ff fe75 	bl	304c <usb_serial_write_buffer_free>
    3362:	bd08      	pop	{r3, pc}

00003364 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    3364:	b508      	push	{r3, lr}
    3366:	4608      	mov	r0, r1
    3368:	4611      	mov	r1, r2
    336a:	f7ff fde7 	bl	2f3c <usb_serial_write>
    336e:	bd08      	pop	{r3, pc}

00003370 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    3370:	b508      	push	{r3, lr}
    3372:	4608      	mov	r0, r1
    3374:	f7ff fe5e 	bl	3034 <usb_serial_putchar>
    3378:	bd08      	pop	{r3, pc}
    337a:	bf00      	nop

0000337c <serialEvent()>:
#endif

#endif // F_CPU

void serialEvent() __attribute__((weak));
void serialEvent() {}
    337c:	4770      	bx	lr
    337e:	bf00      	nop

00003380 <yield>:
void yield(void) __attribute__ ((weak));
void yield(void)
{
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
    3380:	4b23      	ldr	r3, [pc, #140]	; (3410 <yield+0x90>)
    3382:	781b      	ldrb	r3, [r3, #0]
    3384:	2b00      	cmp	r3, #0
    3386:	d142      	bne.n	340e <yield+0x8e>
#include "usb_seremu.h"
#include "EventResponder.h"

void yield(void) __attribute__ ((weak));
void yield(void)
{
    3388:	b510      	push	{r4, lr}
	static uint8_t running=0;

	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    338a:	2201      	movs	r2, #1
    338c:	4b20      	ldr	r3, [pc, #128]	; (3410 <yield+0x90>)
    338e:	701a      	strb	r2, [r3, #0]
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    3390:	f7ff fdaa 	bl	2ee8 <usb_serial_available>
	if (Serial.available()) serialEvent();
    3394:	b108      	cbz	r0, 339a <yield+0x1a>
    3396:	f7ff fff1 	bl	337c <serialEvent()>
	virtual void transmitterEnable(uint8_t pin) { serial_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial_set_cts(pin); }
	virtual int available(void)     { return serial_available(); }
    339a:	f000 f98f 	bl	36bc <serial_available>
	if (Serial1.available()) serialEvent1();
    339e:	b108      	cbz	r0, 33a4 <yield+0x24>
    33a0:	f000 fc3c 	bl	3c1c <serialEvent1()>
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
	virtual int available(void)     { return serial2_available(); }
    33a4:	f000 fa2c 	bl	3800 <serial2_available>
	if (Serial2.available()) serialEvent2();
    33a8:	b108      	cbz	r0, 33ae <yield+0x2e>
    33aa:	f000 fc39 	bl	3c20 <serialEvent2()>
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
    33ae:	f000 fac9 	bl	3944 <serial3_available>
	if (Serial3.available()) serialEvent3();
    33b2:	b108      	cbz	r0, 33b8 <yield+0x38>
    33b4:	f000 fc36 	bl	3c24 <serialEvent3()>
	if (Serial5.available()) serialEvent5();
#endif
#if defined(HAS_KINETISK_UART5) || defined (HAS_KINETISK_LPUART0)
	if (Serial6.available()) serialEvent6();
#endif
	running = 0;
    33b8:	2200      	movs	r2, #0
    33ba:	4b15      	ldr	r3, [pc, #84]	; (3410 <yield+0x90>)
    33bc:	701a      	strb	r2, [r3, #0]

	static void runFromYield() {
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    33be:	f3ef 8305 	mrs	r3, IPSR
		if (ipsr != 0) return;
    33c2:	bb1b      	cbnz	r3, 340c <yield+0x8c>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    33c4:	f3ef 8310 	mrs	r3, PRIMASK
		__disable_irq();
    33c8:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    33ca:	4a12      	ldr	r2, [pc, #72]	; (3414 <yield+0x94>)
    33cc:	6810      	ldr	r0, [r2, #0]
		if (first == nullptr) {
    33ce:	b910      	cbnz	r0, 33d6 <yield+0x56>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    33d0:	b9e3      	cbnz	r3, 340c <yield+0x8c>
    33d2:	b662      	cpsie	i
    33d4:	bd10      	pop	{r4, pc}
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    33d6:	4a10      	ldr	r2, [pc, #64]	; (3418 <yield+0x98>)
    33d8:	7812      	ldrb	r2, [r2, #0]
    33da:	b112      	cbz	r2, 33e2 <yield+0x62>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    33dc:	b9b3      	cbnz	r3, 340c <yield+0x8c>
    33de:	b662      	cpsie	i
    33e0:	bd10      	pop	{r4, pc}
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    33e2:	2101      	movs	r1, #1
    33e4:	4a0c      	ldr	r2, [pc, #48]	; (3418 <yield+0x98>)
    33e6:	7011      	strb	r1, [r2, #0]
		firstYield = first->_next;
    33e8:	6942      	ldr	r2, [r0, #20]
    33ea:	490a      	ldr	r1, [pc, #40]	; (3414 <yield+0x94>)
    33ec:	600a      	str	r2, [r1, #0]
		if (firstYield) {
    33ee:	b112      	cbz	r2, 33f6 <yield+0x76>
			firstYield->_prev = nullptr;
    33f0:	2100      	movs	r1, #0
    33f2:	6191      	str	r1, [r2, #24]
    33f4:	e002      	b.n	33fc <yield+0x7c>
		} else {
			lastYield = nullptr;
    33f6:	2100      	movs	r1, #0
    33f8:	4a08      	ldr	r2, [pc, #32]	; (341c <yield+0x9c>)
    33fa:	6011      	str	r1, [r2, #0]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    33fc:	b903      	cbnz	r3, 3400 <yield+0x80>
    33fe:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    3400:	2400      	movs	r4, #0
    3402:	7744      	strb	r4, [r0, #29]
		(*(first->_function))(*first);
    3404:	6883      	ldr	r3, [r0, #8]
    3406:	4798      	blx	r3
		runningFromYield = false;
    3408:	4b03      	ldr	r3, [pc, #12]	; (3418 <yield+0x98>)
    340a:	701c      	strb	r4, [r3, #0]
    340c:	bd10      	pop	{r4, pc}
    340e:	4770      	bx	lr
    3410:	1fff99f8 	.word	0x1fff99f8
    3414:	1fff9b98 	.word	0x1fff9b98
    3418:	1fff9b9c 	.word	0x1fff9b9c
    341c:	1fff9b94 	.word	0x1fff9b94

00003420 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    3420:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    3422:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    3426:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    342a:	d16d      	bne.n	3508 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    342c:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    342e:	d341      	bcc.n	34b4 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    3430:	f851 3b04 	ldr.w	r3, [r1], #4
    3434:	f840 3b04 	str.w	r3, [r0], #4
    3438:	f851 3b04 	ldr.w	r3, [r1], #4
    343c:	f840 3b04 	str.w	r3, [r0], #4
    3440:	f851 3b04 	ldr.w	r3, [r1], #4
    3444:	f840 3b04 	str.w	r3, [r0], #4
    3448:	f851 3b04 	ldr.w	r3, [r1], #4
    344c:	f840 3b04 	str.w	r3, [r0], #4
    3450:	f851 3b04 	ldr.w	r3, [r1], #4
    3454:	f840 3b04 	str.w	r3, [r0], #4
    3458:	f851 3b04 	ldr.w	r3, [r1], #4
    345c:	f840 3b04 	str.w	r3, [r0], #4
    3460:	f851 3b04 	ldr.w	r3, [r1], #4
    3464:	f840 3b04 	str.w	r3, [r0], #4
    3468:	f851 3b04 	ldr.w	r3, [r1], #4
    346c:	f840 3b04 	str.w	r3, [r0], #4
    3470:	f851 3b04 	ldr.w	r3, [r1], #4
    3474:	f840 3b04 	str.w	r3, [r0], #4
    3478:	f851 3b04 	ldr.w	r3, [r1], #4
    347c:	f840 3b04 	str.w	r3, [r0], #4
    3480:	f851 3b04 	ldr.w	r3, [r1], #4
    3484:	f840 3b04 	str.w	r3, [r0], #4
    3488:	f851 3b04 	ldr.w	r3, [r1], #4
    348c:	f840 3b04 	str.w	r3, [r0], #4
    3490:	f851 3b04 	ldr.w	r3, [r1], #4
    3494:	f840 3b04 	str.w	r3, [r0], #4
    3498:	f851 3b04 	ldr.w	r3, [r1], #4
    349c:	f840 3b04 	str.w	r3, [r0], #4
    34a0:	f851 3b04 	ldr.w	r3, [r1], #4
    34a4:	f840 3b04 	str.w	r3, [r0], #4
    34a8:	f851 3b04 	ldr.w	r3, [r1], #4
    34ac:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    34b0:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    34b2:	d2bd      	bcs.n	3430 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    34b4:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    34b6:	d311      	bcc.n	34dc <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    34b8:	f851 3b04 	ldr.w	r3, [r1], #4
    34bc:	f840 3b04 	str.w	r3, [r0], #4
    34c0:	f851 3b04 	ldr.w	r3, [r1], #4
    34c4:	f840 3b04 	str.w	r3, [r0], #4
    34c8:	f851 3b04 	ldr.w	r3, [r1], #4
    34cc:	f840 3b04 	str.w	r3, [r0], #4
    34d0:	f851 3b04 	ldr.w	r3, [r1], #4
    34d4:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    34d8:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    34da:	d2ed      	bcs.n	34b8 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    34dc:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    34de:	d305      	bcc.n	34ec <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    34e0:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    34e4:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    34e8:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    34ea:	d2f9      	bcs.n	34e0 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    34ec:	3204      	adds	r2, #4
	beq	.Ldone
    34ee:	d008      	beq.n	3502 <memcpy+0xe2>

	lsls	r2, r2, #31
    34f0:	07d2      	lsls	r2, r2, #31
	itt ne
    34f2:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    34f4:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    34f8:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    34fc:	d301      	bcc.n	3502 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    34fe:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    3500:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    3502:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    3504:	4770      	bx	lr
    3506:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    3508:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    350a:	d313      	bcc.n	3534 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    350c:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    350e:	d08d      	beq.n	342c <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    3510:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    3514:	d08a      	beq.n	342c <memcpy+0xc>

	rsb	r3, #4
    3516:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    351a:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    351c:	07db      	lsls	r3, r3, #31
	itt ne
    351e:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    3520:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    3524:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    3528:	d380      	bcc.n	342c <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    352a:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    352e:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    3532:	e77b      	b.n	342c <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    3534:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    3536:	d3d9      	bcc.n	34ec <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    3538:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    353a:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    353e:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    3542:	d2f9      	bcs.n	3538 <memcpy+0x118>

	ldrb	r3, [r1]
    3544:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    3546:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    3548:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    354a:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    354c:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    354e:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    3550:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    3552:	4770      	bx	lr

00003554 <analog_init>:
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    3554:	2260      	movs	r2, #96	; 0x60
    3556:	4b3a      	ldr	r3, [pc, #232]	; (3640 <analog_init+0xec>)
    3558:	701a      	strb	r2, [r3, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    355a:	22e1      	movs	r2, #225	; 0xe1
    355c:	3301      	adds	r3, #1
    355e:	701a      	strb	r2, [r3, #0]
	#endif

	if (analog_config_bits == 8) {
    3560:	4b38      	ldr	r3, [pc, #224]	; (3644 <analog_init+0xf0>)
    3562:	781b      	ldrb	r3, [r3, #0]
    3564:	2b08      	cmp	r3, #8
    3566:	d110      	bne.n	358a <analog_init+0x36>
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    3568:	2201      	movs	r2, #1
    356a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    356e:	f503 336c 	add.w	r3, r3, #241664	; 0x3b000
    3572:	601a      	str	r2, [r3, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    3574:	2313      	movs	r3, #19
    3576:	4934      	ldr	r1, [pc, #208]	; (3648 <analog_init+0xf4>)
    3578:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    357a:	f501 21ff 	add.w	r1, r1, #522240	; 0x7f800
    357e:	f201 71fc 	addw	r1, r1, #2044	; 0x7fc
    3582:	600a      	str	r2, [r1, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    3584:	4a31      	ldr	r2, [pc, #196]	; (364c <analog_init+0xf8>)
    3586:	6013      	str	r3, [r2, #0]
    3588:	e01f      	b.n	35ca <analog_init+0x76>
		#endif
	} else if (analog_config_bits == 10) {
    358a:	2b0a      	cmp	r3, #10
    358c:	d10d      	bne.n	35aa <analog_init+0x56>
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    358e:	2239      	movs	r2, #57	; 0x39
    3590:	4b2f      	ldr	r3, [pc, #188]	; (3650 <analog_init+0xfc>)
    3592:	601a      	str	r2, [r3, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    3594:	2313      	movs	r3, #19
    3596:	492c      	ldr	r1, [pc, #176]	; (3648 <analog_init+0xf4>)
    3598:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    359a:	f501 21ff 	add.w	r1, r1, #522240	; 0x7f800
    359e:	f201 71fc 	addw	r1, r1, #2044	; 0x7fc
    35a2:	600a      	str	r2, [r1, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    35a4:	4a29      	ldr	r2, [pc, #164]	; (364c <analog_init+0xf8>)
    35a6:	6013      	str	r3, [r2, #0]
    35a8:	e00f      	b.n	35ca <analog_init+0x76>
		#endif
	} else if (analog_config_bits == 12) {
    35aa:	2b0c      	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    35ac:	bf0c      	ite	eq
    35ae:	2235      	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    35b0:	223d      	movne	r2, #61	; 0x3d
    35b2:	4b27      	ldr	r3, [pc, #156]	; (3650 <analog_init+0xfc>)
    35b4:	601a      	str	r2, [r3, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    35b6:	2312      	movs	r3, #18
    35b8:	4923      	ldr	r1, [pc, #140]	; (3648 <analog_init+0xf4>)
    35ba:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    35bc:	f501 21ff 	add.w	r1, r1, #522240	; 0x7f800
    35c0:	f201 71fc 	addw	r1, r1, #2044	; 0x7fc
    35c4:	600a      	str	r2, [r1, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    35c6:	4a21      	ldr	r2, [pc, #132]	; (364c <analog_init+0xf8>)
    35c8:	6013      	str	r3, [r2, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    35ca:	4b22      	ldr	r3, [pc, #136]	; (3654 <analog_init+0x100>)
    35cc:	781b      	ldrb	r3, [r3, #0]
    35ce:	b133      	cbz	r3, 35de <analog_init+0x8a>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    35d0:	2301      	movs	r3, #1
    35d2:	4a21      	ldr	r2, [pc, #132]	; (3658 <analog_init+0x104>)
    35d4:	6013      	str	r3, [r2, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    35d6:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
    35da:	6013      	str	r3, [r2, #0]
    35dc:	e005      	b.n	35ea <analog_init+0x96>
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    35de:	2300      	movs	r3, #0
    35e0:	4a1d      	ldr	r2, [pc, #116]	; (3658 <analog_init+0x104>)
    35e2:	6013      	str	r3, [r2, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    35e4:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
    35e8:	6013      	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    35ea:	4b1c      	ldr	r3, [pc, #112]	; (365c <analog_init+0x108>)
    35ec:	781b      	ldrb	r3, [r3, #0]
	if (num <= 1) {
    35ee:	2b01      	cmp	r3, #1
    35f0:	d806      	bhi.n	3600 <analog_init+0xac>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    35f2:	2380      	movs	r3, #128	; 0x80
    35f4:	4a1a      	ldr	r2, [pc, #104]	; (3660 <analog_init+0x10c>)
    35f6:	6013      	str	r3, [r2, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    35f8:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
    35fc:	6013      	str	r3, [r2, #0]
    35fe:	e01a      	b.n	3636 <analog_init+0xe2>
		#endif
	} else if (num <= 4) {
    3600:	2b04      	cmp	r3, #4
    3602:	d806      	bhi.n	3612 <analog_init+0xbe>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    3604:	2384      	movs	r3, #132	; 0x84
    3606:	4a16      	ldr	r2, [pc, #88]	; (3660 <analog_init+0x10c>)
    3608:	6013      	str	r3, [r2, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    360a:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
    360e:	6013      	str	r3, [r2, #0]
    3610:	e011      	b.n	3636 <analog_init+0xe2>
		#endif
	} else if (num <= 8) {
    3612:	2b08      	cmp	r3, #8
    3614:	d806      	bhi.n	3624 <analog_init+0xd0>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    3616:	2385      	movs	r3, #133	; 0x85
    3618:	4a11      	ldr	r2, [pc, #68]	; (3660 <analog_init+0x10c>)
    361a:	6013      	str	r3, [r2, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    361c:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
    3620:	6013      	str	r3, [r2, #0]
    3622:	e008      	b.n	3636 <analog_init+0xe2>
		#endif
	} else if (num <= 16) {
    3624:	2b10      	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    3626:	bf94      	ite	ls
    3628:	2386      	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    362a:	2387      	movhi	r3, #135	; 0x87
    362c:	4a0c      	ldr	r2, [pc, #48]	; (3660 <analog_init+0x10c>)
    362e:	6013      	str	r3, [r2, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    3630:	f502 2200 	add.w	r2, r2, #524288	; 0x80000
    3634:	6013      	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    3636:	2201      	movs	r2, #1
    3638:	4b0a      	ldr	r3, [pc, #40]	; (3664 <analog_init+0x110>)
    363a:	701a      	strb	r2, [r3, #0]
    363c:	4770      	bx	lr
    363e:	bf00      	nop
    3640:	40074000 	.word	0x40074000
    3644:	1fff8dd8 	.word	0x1fff8dd8
    3648:	4003b00c 	.word	0x4003b00c
    364c:	400bb00c 	.word	0x400bb00c
    3650:	4003b008 	.word	0x4003b008
    3654:	1fff99fa 	.word	0x1fff99fa
    3658:	4003b020 	.word	0x4003b020
    365c:	1fff8dd9 	.word	0x1fff8dd9
    3660:	4003b024 	.word	0x4003b024
    3664:	1fff99f9 	.word	0x1fff99f9

00003668 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    3668:	b4f0      	push	{r4, r5, r6, r7}
    366a:	1e4d      	subs	r5, r1, #1
    366c:	462e      	mov	r6, r5
	unsigned digit;
	int i=0, j;
    366e:	2400      	movs	r4, #0
	char t;

	while (1) {
		digit = val % radix;
    3670:	fbb0 f3f2 	udiv	r3, r0, r2
    3674:	fb02 0313 	mls	r3, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    3678:	4627      	mov	r7, r4
    367a:	2b09      	cmp	r3, #9
    367c:	bf94      	ite	ls
    367e:	3330      	addls	r3, #48	; 0x30
    3680:	3337      	addhi	r3, #55	; 0x37
    3682:	b2db      	uxtb	r3, r3
    3684:	f806 3f01 	strb.w	r3, [r6, #1]!
		val /= radix;
    3688:	fbb0 f0f2 	udiv	r0, r0, r2
		if (val == 0) break;
    368c:	b108      	cbz	r0, 3692 <ultoa+0x2a>
		i++;
    368e:	3401      	adds	r4, #1
	}
    3690:	e7ee      	b.n	3670 <ultoa+0x8>
	buf[i + 1] = 0;
    3692:	190b      	adds	r3, r1, r4
    3694:	2200      	movs	r2, #0
    3696:	705a      	strb	r2, [r3, #1]
	for (j=0; j < i; j++, i--) {
    3698:	4294      	cmp	r4, r2
    369a:	dd0b      	ble.n	36b4 <ultoa+0x4c>
    369c:	461a      	mov	r2, r3
    369e:	2300      	movs	r3, #0
		t = buf[j];
    36a0:	f815 0f01 	ldrb.w	r0, [r5, #1]!
		buf[j] = buf[i];
    36a4:	7814      	ldrb	r4, [r2, #0]
    36a6:	702c      	strb	r4, [r5, #0]
		buf[i] = t;
    36a8:	f802 0901 	strb.w	r0, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    36ac:	3301      	adds	r3, #1
    36ae:	1af8      	subs	r0, r7, r3
    36b0:	4283      	cmp	r3, r0
    36b2:	dbf5      	blt.n	36a0 <ultoa+0x38>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    36b4:	4608      	mov	r0, r1
    36b6:	bcf0      	pop	{r4, r5, r6, r7}
    36b8:	4770      	bx	lr
    36ba:	bf00      	nop

000036bc <serial_available>:

int serial_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    36bc:	4b05      	ldr	r3, [pc, #20]	; (36d4 <serial_available+0x18>)
    36be:	7818      	ldrb	r0, [r3, #0]
    36c0:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    36c2:	4b05      	ldr	r3, [pc, #20]	; (36d8 <serial_available+0x1c>)
    36c4:	781b      	ldrb	r3, [r3, #0]
    36c6:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    36c8:	4298      	cmp	r0, r3
	return SERIAL1_RX_BUFFER_SIZE + head - tail;
    36ca:	bf38      	it	cc
    36cc:	3040      	addcc	r0, #64	; 0x40
    36ce:	1ac0      	subs	r0, r0, r3
}
    36d0:	4770      	bx	lr
    36d2:	bf00      	nop
    36d4:	1fff9a84 	.word	0x1fff9a84
    36d8:	1fff9a01 	.word	0x1fff9a01

000036dc <uart0_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart0_status_isr(void)
{
    36dc:	b470      	push	{r4, r5, r6}
	uint8_t c;
#ifdef HAS_KINETISK_UART0_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART0_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    36de:	4b3e      	ldr	r3, [pc, #248]	; (37d8 <uart0_status_isr+0xfc>)
    36e0:	791b      	ldrb	r3, [r3, #4]
    36e2:	f013 0f30 	tst.w	r3, #48	; 0x30
    36e6:	d032      	beq.n	374e <uart0_status_isr+0x72>
		__disable_irq();
    36e8:	b672      	cpsid	i
		avail = UART0_RCFIFO;
    36ea:	4b3b      	ldr	r3, [pc, #236]	; (37d8 <uart0_status_isr+0xfc>)
    36ec:	7d9b      	ldrb	r3, [r3, #22]
		if (avail == 0) {
    36ee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    36f2:	b92b      	cbnz	r3, 3700 <uart0_status_isr+0x24>
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART0_D;
    36f4:	4b38      	ldr	r3, [pc, #224]	; (37d8 <uart0_status_isr+0xfc>)
    36f6:	79da      	ldrb	r2, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART0_CFIFO = UART_CFIFO_RXFLUSH;
    36f8:	2240      	movs	r2, #64	; 0x40
    36fa:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    36fc:	b662      	cpsie	i
    36fe:	e026      	b.n	374e <uart0_status_isr+0x72>
		} else {
			__enable_irq();
    3700:	b662      	cpsie	i
			head = rx_buffer_head;
    3702:	4b36      	ldr	r3, [pc, #216]	; (37dc <uart0_status_isr+0x100>)
    3704:	7818      	ldrb	r0, [r3, #0]
    3706:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
    3708:	4b35      	ldr	r3, [pc, #212]	; (37e0 <uart0_status_isr+0x104>)
    370a:	781c      	ldrb	r4, [r3, #0]
    370c:	b2e4      	uxtb	r4, r4
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    370e:	4d32      	ldr	r5, [pc, #200]	; (37d8 <uart0_status_isr+0xfc>)
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3710:	4e34      	ldr	r6, [pc, #208]	; (37e4 <uart0_status_isr+0x108>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART0_C3 & 0x80)) {
					n = UART0_D | 0x100;
				} else {
					n = UART0_D;
    3712:	79eb      	ldrb	r3, [r5, #7]
    3714:	b2d9      	uxtb	r1, r3
				}
				newhead = head + 1;
    3716:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
    3718:	2b40      	cmp	r3, #64	; 0x40
    371a:	bf28      	it	cs
    371c:	2300      	movcs	r3, #0
				if (newhead != tail) {
    371e:	42a3      	cmp	r3, r4
					head = newhead;
					rx_buffer[head] = n;
    3720:	bf1c      	itt	ne
    3722:	54f1      	strbne	r1, [r6, r3]
					n = UART0_D;
				}
				newhead = head + 1;
				if (newhead >= SERIAL1_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
    3724:	4618      	movne	r0, r3
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    3726:	1e53      	subs	r3, r2, #1
    3728:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
    372c:	d1f1      	bne.n	3712 <uart0_status_isr+0x36>
			rx_buffer_head = head;
    372e:	b2c3      	uxtb	r3, r0
    3730:	4a2a      	ldr	r2, [pc, #168]	; (37dc <uart0_status_isr+0x100>)
    3732:	7013      	strb	r3, [r2, #0]
			if (rts_pin) {
    3734:	4b2c      	ldr	r3, [pc, #176]	; (37e8 <uart0_status_isr+0x10c>)
    3736:	681b      	ldr	r3, [r3, #0]
    3738:	b14b      	cbz	r3, 374e <uart0_status_isr+0x72>
				int avail;
				if (head >= tail) avail = head - tail;
    373a:	42a0      	cmp	r0, r4
    373c:	bf2e      	itee	cs
    373e:	1b00      	subcs	r0, r0, r4
				else avail = SERIAL1_RX_BUFFER_SIZE + head - tail;
    3740:	f1c4 0440 	rsbcc	r4, r4, #64	; 0x40
    3744:	1900      	addcc	r0, r0, r4
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    3746:	2827      	cmp	r0, #39	; 0x27
    3748:	bfc4      	itt	gt
    374a:	2201      	movgt	r2, #1
    374c:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART0_C2;
    374e:	4b22      	ldr	r3, [pc, #136]	; (37d8 <uart0_status_isr+0xfc>)
    3750:	78da      	ldrb	r2, [r3, #3]
    3752:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
    3754:	f012 0f80 	tst.w	r2, #128	; 0x80
    3758:	d029      	beq.n	37ae <uart0_status_isr+0xd2>
    375a:	791b      	ldrb	r3, [r3, #4]
    375c:	f013 0f80 	tst.w	r3, #128	; 0x80
    3760:	d025      	beq.n	37ae <uart0_status_isr+0xd2>
		head = tx_buffer_head;
    3762:	4b22      	ldr	r3, [pc, #136]	; (37ec <uart0_status_isr+0x110>)
    3764:	781c      	ldrb	r4, [r3, #0]
    3766:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    3768:	4b21      	ldr	r3, [pc, #132]	; (37f0 <uart0_status_isr+0x114>)
    376a:	781b      	ldrb	r3, [r3, #0]
    376c:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    376e:	429c      	cmp	r4, r3
    3770:	d012      	beq.n	3798 <uart0_status_isr+0xbc>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
			avail = UART0_S1;
    3772:	4819      	ldr	r0, [pc, #100]	; (37d8 <uart0_status_isr+0xfc>)
			n = tx_buffer[tail];
    3774:	4d1f      	ldr	r5, [pc, #124]	; (37f4 <uart0_status_isr+0x118>)
    3776:	e001      	b.n	377c <uart0_status_isr+0xa0>
	c = UART0_C2;
	if ((c & UART_C2_TIE) && (UART0_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		do {
			if (tail == head) break;
    3778:	42a3      	cmp	r3, r4
    377a:	d00c      	beq.n	3796 <uart0_status_isr+0xba>
			if (++tail >= SERIAL1_TX_BUFFER_SIZE) tail = 0;
    377c:	3301      	adds	r3, #1
    377e:	2b40      	cmp	r3, #64	; 0x40
    3780:	bf28      	it	cs
    3782:	2300      	movcs	r3, #0
			avail = UART0_S1;
    3784:	7901      	ldrb	r1, [r0, #4]
			n = tx_buffer[tail];
    3786:	5ce9      	ldrb	r1, [r5, r3]
    3788:	b2c9      	uxtb	r1, r1
			if (use9Bits) UART0_C3 = (UART0_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART0_D = n;
    378a:	71c1      	strb	r1, [r0, #7]
		} while (UART0_TCFIFO < 8);
    378c:	7d01      	ldrb	r1, [r0, #20]
    378e:	b2c9      	uxtb	r1, r1
    3790:	2907      	cmp	r1, #7
    3792:	d9f1      	bls.n	3778 <uart0_status_isr+0x9c>
    3794:	e000      	b.n	3798 <uart0_status_isr+0xbc>
    3796:	4623      	mov	r3, r4
		tx_buffer_tail = tail;
    3798:	b2db      	uxtb	r3, r3
    379a:	4915      	ldr	r1, [pc, #84]	; (37f0 <uart0_status_isr+0x114>)
    379c:	700b      	strb	r3, [r1, #0]
		if (UART0_S1 & UART_S1_TDRE) UART0_C2 = C2_TX_COMPLETING;
    379e:	4b0e      	ldr	r3, [pc, #56]	; (37d8 <uart0_status_isr+0xfc>)
    37a0:	791b      	ldrb	r3, [r3, #4]
    37a2:	f013 0f80 	tst.w	r3, #128	; 0x80
    37a6:	d002      	beq.n	37ae <uart0_status_isr+0xd2>
    37a8:	217c      	movs	r1, #124	; 0x7c
    37aa:	4b0b      	ldr	r3, [pc, #44]	; (37d8 <uart0_status_isr+0xfc>)
    37ac:	70d9      	strb	r1, [r3, #3]
			UART0_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART0_S1 & UART_S1_TC)) {
    37ae:	f012 0f40 	tst.w	r2, #64	; 0x40
    37b2:	d00e      	beq.n	37d2 <uart0_status_isr+0xf6>
    37b4:	4b08      	ldr	r3, [pc, #32]	; (37d8 <uart0_status_isr+0xfc>)
    37b6:	791b      	ldrb	r3, [r3, #4]
    37b8:	f013 0f40 	tst.w	r3, #64	; 0x40
    37bc:	d009      	beq.n	37d2 <uart0_status_isr+0xf6>
		transmitting = 0;
    37be:	2200      	movs	r2, #0
    37c0:	4b0d      	ldr	r3, [pc, #52]	; (37f8 <uart0_status_isr+0x11c>)
    37c2:	701a      	strb	r2, [r3, #0]
		if (transmit_pin) transmit_deassert();
    37c4:	4b0d      	ldr	r3, [pc, #52]	; (37fc <uart0_status_isr+0x120>)
    37c6:	681b      	ldr	r3, [r3, #0]
    37c8:	b103      	cbz	r3, 37cc <uart0_status_isr+0xf0>
    37ca:	701a      	strb	r2, [r3, #0]
		UART0_C2 = C2_TX_INACTIVE;
    37cc:	223c      	movs	r2, #60	; 0x3c
    37ce:	4b02      	ldr	r3, [pc, #8]	; (37d8 <uart0_status_isr+0xfc>)
    37d0:	70da      	strb	r2, [r3, #3]
	}
}
    37d2:	bc70      	pop	{r4, r5, r6}
    37d4:	4770      	bx	lr
    37d6:	bf00      	nop
    37d8:	4006a000 	.word	0x4006a000
    37dc:	1fff9a84 	.word	0x1fff9a84
    37e0:	1fff9a01 	.word	0x1fff9a01
    37e4:	1fff9a44 	.word	0x1fff9a44
    37e8:	1fff99fc 	.word	0x1fff99fc
    37ec:	1fff9a8c 	.word	0x1fff9a8c
    37f0:	1fff9a85 	.word	0x1fff9a85
    37f4:	1fff9a04 	.word	0x1fff9a04
    37f8:	1fff9a00 	.word	0x1fff9a00
    37fc:	1fff9a88 	.word	0x1fff9a88

00003800 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3800:	4b05      	ldr	r3, [pc, #20]	; (3818 <serial2_available+0x18>)
    3802:	7818      	ldrb	r0, [r3, #0]
    3804:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    3806:	4b05      	ldr	r3, [pc, #20]	; (381c <serial2_available+0x1c>)
    3808:	781b      	ldrb	r3, [r3, #0]
    380a:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    380c:	4298      	cmp	r0, r3
	return SERIAL2_RX_BUFFER_SIZE + head - tail;
    380e:	bf38      	it	cc
    3810:	3040      	addcc	r0, #64	; 0x40
    3812:	1ac0      	subs	r0, r0, r3
}
    3814:	4770      	bx	lr
    3816:	bf00      	nop
    3818:	1fff9b00 	.word	0x1fff9b00
    381c:	1fff9a95 	.word	0x1fff9a95

00003820 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    3820:	b470      	push	{r4, r5, r6}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    3822:	4b3e      	ldr	r3, [pc, #248]	; (391c <uart1_status_isr+0xfc>)
    3824:	791b      	ldrb	r3, [r3, #4]
    3826:	f013 0f30 	tst.w	r3, #48	; 0x30
    382a:	d032      	beq.n	3892 <uart1_status_isr+0x72>
		__disable_irq();
    382c:	b672      	cpsid	i
		avail = UART1_RCFIFO;
    382e:	4b3b      	ldr	r3, [pc, #236]	; (391c <uart1_status_isr+0xfc>)
    3830:	7d9b      	ldrb	r3, [r3, #22]
		if (avail == 0) {
    3832:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    3836:	b92b      	cbnz	r3, 3844 <uart1_status_isr+0x24>
			// to read the data register.  But reading with no
			// data causes a FIFO underrun, which causes the
			// FIFO to return corrupted data.  If anyone from
			// Freescale reads this, what a poor design!  There
			// write should be a write-1-to-clear for IDLE.
			c = UART1_D;
    3838:	4b38      	ldr	r3, [pc, #224]	; (391c <uart1_status_isr+0xfc>)
    383a:	79da      	ldrb	r2, [r3, #7]
			// the chance, interrupts are disabled so a higher
			// priority interrupt (hopefully) doesn't delay.
			// TODO: change this to disabling the IDLE interrupt
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    383c:	2240      	movs	r2, #64	; 0x40
    383e:	745a      	strb	r2, [r3, #17]
			__enable_irq();
    3840:	b662      	cpsie	i
    3842:	e026      	b.n	3892 <uart1_status_isr+0x72>
		} else {
			__enable_irq();
    3844:	b662      	cpsie	i
			head = rx_buffer_head;
    3846:	4b36      	ldr	r3, [pc, #216]	; (3920 <uart1_status_isr+0x100>)
    3848:	7818      	ldrb	r0, [r3, #0]
    384a:	b2c0      	uxtb	r0, r0
			tail = rx_buffer_tail;
    384c:	4b35      	ldr	r3, [pc, #212]	; (3924 <uart1_status_isr+0x104>)
    384e:	781c      	ldrb	r4, [r3, #0]
    3850:	b2e4      	uxtb	r4, r4
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    3852:	4d32      	ldr	r5, [pc, #200]	; (391c <uart1_status_isr+0xfc>)
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
					rx_buffer[head] = n;
    3854:	4e34      	ldr	r6, [pc, #208]	; (3928 <uart1_status_isr+0x108>)
			tail = rx_buffer_tail;
			do {
				if (use9Bits && (UART1_C3 & 0x80)) {
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
    3856:	79eb      	ldrb	r3, [r5, #7]
    3858:	b2d9      	uxtb	r1, r3
				}
				newhead = head + 1;
    385a:	1c43      	adds	r3, r0, #1
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
    385c:	2b40      	cmp	r3, #64	; 0x40
    385e:	bf28      	it	cs
    3860:	2300      	movcs	r3, #0
				if (newhead != tail) {
    3862:	42a3      	cmp	r3, r4
					head = newhead;
					rx_buffer[head] = n;
    3864:	bf1c      	itt	ne
    3866:	54f1      	strbne	r1, [r6, r3]
					n = UART1_D;
				}
				newhead = head + 1;
				if (newhead >= SERIAL2_RX_BUFFER_SIZE) newhead = 0;
				if (newhead != tail) {
					head = newhead;
    3868:	4618      	movne	r0, r3
					rx_buffer[head] = n;
				}
			} while (--avail > 0);
    386a:	1e53      	subs	r3, r2, #1
    386c:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
    3870:	d1f1      	bne.n	3856 <uart1_status_isr+0x36>
			rx_buffer_head = head;
    3872:	b2c3      	uxtb	r3, r0
    3874:	4a2a      	ldr	r2, [pc, #168]	; (3920 <uart1_status_isr+0x100>)
    3876:	7013      	strb	r3, [r2, #0]
			if (rts_pin) {
    3878:	4b2c      	ldr	r3, [pc, #176]	; (392c <uart1_status_isr+0x10c>)
    387a:	681b      	ldr	r3, [r3, #0]
    387c:	b14b      	cbz	r3, 3892 <uart1_status_isr+0x72>
				int avail;
				if (head >= tail) avail = head - tail;
    387e:	42a0      	cmp	r0, r4
    3880:	bf2e      	itee	cs
    3882:	1b00      	subcs	r0, r0, r4
				else avail = SERIAL2_RX_BUFFER_SIZE + head - tail;
    3884:	f1c4 0440 	rsbcc	r4, r4, #64	; 0x40
    3888:	1900      	addcc	r0, r0, r4
				if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    388a:	2827      	cmp	r0, #39	; 0x27
    388c:	bfc4      	itt	gt
    388e:	2201      	movgt	r2, #1
    3890:	701a      	strbgt	r2, [r3, #0]
			}
		}
	}
	c = UART1_C2;
    3892:	4b22      	ldr	r3, [pc, #136]	; (391c <uart1_status_isr+0xfc>)
    3894:	78da      	ldrb	r2, [r3, #3]
    3896:	b2d2      	uxtb	r2, r2
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    3898:	f012 0f80 	tst.w	r2, #128	; 0x80
    389c:	d029      	beq.n	38f2 <uart1_status_isr+0xd2>
    389e:	791b      	ldrb	r3, [r3, #4]
    38a0:	f013 0f80 	tst.w	r3, #128	; 0x80
    38a4:	d025      	beq.n	38f2 <uart1_status_isr+0xd2>
		head = tx_buffer_head;
    38a6:	4b22      	ldr	r3, [pc, #136]	; (3930 <uart1_status_isr+0x110>)
    38a8:	781c      	ldrb	r4, [r3, #0]
    38aa:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    38ac:	4b21      	ldr	r3, [pc, #132]	; (3934 <uart1_status_isr+0x114>)
    38ae:	781b      	ldrb	r3, [r3, #0]
    38b0:	b2db      	uxtb	r3, r3
		do {
			if (tail == head) break;
    38b2:	429c      	cmp	r4, r3
    38b4:	d012      	beq.n	38dc <uart1_status_isr+0xbc>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
			avail = UART1_S1;
    38b6:	4819      	ldr	r0, [pc, #100]	; (391c <uart1_status_isr+0xfc>)
			n = tx_buffer[tail];
    38b8:	4d1f      	ldr	r5, [pc, #124]	; (3938 <uart1_status_isr+0x118>)
    38ba:	e001      	b.n	38c0 <uart1_status_isr+0xa0>
	c = UART1_C2;
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
		head = tx_buffer_head;
		tail = tx_buffer_tail;
		do {
			if (tail == head) break;
    38bc:	42a3      	cmp	r3, r4
    38be:	d00c      	beq.n	38da <uart1_status_isr+0xba>
			if (++tail >= SERIAL2_TX_BUFFER_SIZE) tail = 0;
    38c0:	3301      	adds	r3, #1
    38c2:	2b28      	cmp	r3, #40	; 0x28
    38c4:	bf28      	it	cs
    38c6:	2300      	movcs	r3, #0
			avail = UART1_S1;
    38c8:	7901      	ldrb	r1, [r0, #4]
			n = tx_buffer[tail];
    38ca:	5ce9      	ldrb	r1, [r5, r3]
    38cc:	b2c9      	uxtb	r1, r1
			if (use9Bits) UART1_C3 = (UART1_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART1_D = n;
    38ce:	71c1      	strb	r1, [r0, #7]
		} while (UART1_TCFIFO < 8);
    38d0:	7d01      	ldrb	r1, [r0, #20]
    38d2:	b2c9      	uxtb	r1, r1
    38d4:	2907      	cmp	r1, #7
    38d6:	d9f1      	bls.n	38bc <uart1_status_isr+0x9c>
    38d8:	e000      	b.n	38dc <uart1_status_isr+0xbc>
    38da:	4623      	mov	r3, r4
		tx_buffer_tail = tail;
    38dc:	b2db      	uxtb	r3, r3
    38de:	4915      	ldr	r1, [pc, #84]	; (3934 <uart1_status_isr+0x114>)
    38e0:	700b      	strb	r3, [r1, #0]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    38e2:	4b0e      	ldr	r3, [pc, #56]	; (391c <uart1_status_isr+0xfc>)
    38e4:	791b      	ldrb	r3, [r3, #4]
    38e6:	f013 0f80 	tst.w	r3, #128	; 0x80
    38ea:	d002      	beq.n	38f2 <uart1_status_isr+0xd2>
    38ec:	217c      	movs	r1, #124	; 0x7c
    38ee:	4b0b      	ldr	r3, [pc, #44]	; (391c <uart1_status_isr+0xfc>)
    38f0:	70d9      	strb	r1, [r3, #3]
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    38f2:	f012 0f40 	tst.w	r2, #64	; 0x40
    38f6:	d00e      	beq.n	3916 <uart1_status_isr+0xf6>
    38f8:	4b08      	ldr	r3, [pc, #32]	; (391c <uart1_status_isr+0xfc>)
    38fa:	791b      	ldrb	r3, [r3, #4]
    38fc:	f013 0f40 	tst.w	r3, #64	; 0x40
    3900:	d009      	beq.n	3916 <uart1_status_isr+0xf6>
		transmitting = 0;
    3902:	2200      	movs	r2, #0
    3904:	4b0d      	ldr	r3, [pc, #52]	; (393c <uart1_status_isr+0x11c>)
    3906:	701a      	strb	r2, [r3, #0]
		if (transmit_pin) transmit_deassert();
    3908:	4b0d      	ldr	r3, [pc, #52]	; (3940 <uart1_status_isr+0x120>)
    390a:	681b      	ldr	r3, [r3, #0]
    390c:	b103      	cbz	r3, 3910 <uart1_status_isr+0xf0>
    390e:	701a      	strb	r2, [r3, #0]
		UART1_C2 = C2_TX_INACTIVE;
    3910:	223c      	movs	r2, #60	; 0x3c
    3912:	4b02      	ldr	r3, [pc, #8]	; (391c <uart1_status_isr+0xfc>)
    3914:	70da      	strb	r2, [r3, #3]
	}
}
    3916:	bc70      	pop	{r4, r5, r6}
    3918:	4770      	bx	lr
    391a:	bf00      	nop
    391c:	4006b000 	.word	0x4006b000
    3920:	1fff9b00 	.word	0x1fff9b00
    3924:	1fff9a95 	.word	0x1fff9a95
    3928:	1fff9ac0 	.word	0x1fff9ac0
    392c:	1fff9a90 	.word	0x1fff9a90
    3930:	1fff9b08 	.word	0x1fff9b08
    3934:	1fff9b01 	.word	0x1fff9b01
    3938:	1fff9a98 	.word	0x1fff9a98
    393c:	1fff9a94 	.word	0x1fff9a94
    3940:	1fff9b04 	.word	0x1fff9b04

00003944 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    3944:	4b05      	ldr	r3, [pc, #20]	; (395c <serial3_available+0x18>)
    3946:	7818      	ldrb	r0, [r3, #0]
    3948:	b2c0      	uxtb	r0, r0
	tail = rx_buffer_tail;
    394a:	4b05      	ldr	r3, [pc, #20]	; (3960 <serial3_available+0x1c>)
    394c:	781b      	ldrb	r3, [r3, #0]
    394e:	b2db      	uxtb	r3, r3
	if (head >= tail) return head - tail;
    3950:	4298      	cmp	r0, r3
	return SERIAL3_RX_BUFFER_SIZE + head - tail;
    3952:	bf38      	it	cc
    3954:	3040      	addcc	r0, #64	; 0x40
    3956:	1ac0      	subs	r0, r0, r3
}
    3958:	4770      	bx	lr
    395a:	bf00      	nop
    395c:	1fff9b7c 	.word	0x1fff9b7c
    3960:	1fff9b11 	.word	0x1fff9b11

00003964 <uart2_status_isr>:
void uart2_status_isr(void)
{
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    3964:	4b2e      	ldr	r3, [pc, #184]	; (3a20 <uart2_status_isr+0xbc>)
    3966:	791b      	ldrb	r3, [r3, #4]
    3968:	f013 0f20 	tst.w	r3, #32
    396c:	d022      	beq.n	39b4 <uart2_status_isr+0x50>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
    396e:	4b2c      	ldr	r3, [pc, #176]	; (3a20 <uart2_status_isr+0xbc>)
    3970:	79db      	ldrb	r3, [r3, #7]
    3972:	b2d9      	uxtb	r1, r3
		}
		head = rx_buffer_head + 1;
    3974:	4b2b      	ldr	r3, [pc, #172]	; (3a24 <uart2_status_isr+0xc0>)
    3976:	781b      	ldrb	r3, [r3, #0]
    3978:	3301      	adds	r3, #1
		if (head >= SERIAL3_RX_BUFFER_SIZE) head = 0;
    397a:	2b40      	cmp	r3, #64	; 0x40
    397c:	bf28      	it	cs
    397e:	2300      	movcs	r3, #0
		if (head != rx_buffer_tail) {
    3980:	4a29      	ldr	r2, [pc, #164]	; (3a28 <uart2_status_isr+0xc4>)
    3982:	7812      	ldrb	r2, [r2, #0]
    3984:	b2d2      	uxtb	r2, r2
    3986:	4293      	cmp	r3, r2
    3988:	d004      	beq.n	3994 <uart2_status_isr+0x30>
			rx_buffer[head] = n;
    398a:	4a28      	ldr	r2, [pc, #160]	; (3a2c <uart2_status_isr+0xc8>)
    398c:	54d1      	strb	r1, [r2, r3]
			rx_buffer_head = head;
    398e:	b2da      	uxtb	r2, r3
    3990:	4924      	ldr	r1, [pc, #144]	; (3a24 <uart2_status_isr+0xc0>)
    3992:	700a      	strb	r2, [r1, #0]
		}
		if (rts_pin) {
    3994:	4a26      	ldr	r2, [pc, #152]	; (3a30 <uart2_status_isr+0xcc>)
    3996:	6811      	ldr	r1, [r2, #0]
    3998:	b161      	cbz	r1, 39b4 <uart2_status_isr+0x50>
			int avail;
			tail = tx_buffer_tail;
    399a:	4a26      	ldr	r2, [pc, #152]	; (3a34 <uart2_status_isr+0xd0>)
    399c:	7812      	ldrb	r2, [r2, #0]
    399e:	b2d2      	uxtb	r2, r2
			if (head >= tail) avail = head - tail;
    39a0:	4293      	cmp	r3, r2
    39a2:	bf2e      	itee	cs
    39a4:	1a9b      	subcs	r3, r3, r2
			else avail = SERIAL3_RX_BUFFER_SIZE + head - tail;
    39a6:	f1c2 0240 	rsbcc	r2, r2, #64	; 0x40
    39aa:	189b      	addcc	r3, r3, r2
			if (avail >= RTS_HIGH_WATERMARK) rts_deassert();
    39ac:	2b27      	cmp	r3, #39	; 0x27
    39ae:	bfc4      	itt	gt
    39b0:	2301      	movgt	r3, #1
    39b2:	700b      	strbgt	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    39b4:	4b1a      	ldr	r3, [pc, #104]	; (3a20 <uart2_status_isr+0xbc>)
    39b6:	78db      	ldrb	r3, [r3, #3]
    39b8:	b2db      	uxtb	r3, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    39ba:	f013 0f80 	tst.w	r3, #128	; 0x80
    39be:	d01c      	beq.n	39fa <uart2_status_isr+0x96>
    39c0:	4a17      	ldr	r2, [pc, #92]	; (3a20 <uart2_status_isr+0xbc>)
    39c2:	7912      	ldrb	r2, [r2, #4]
    39c4:	f012 0f80 	tst.w	r2, #128	; 0x80
    39c8:	d017      	beq.n	39fa <uart2_status_isr+0x96>
		head = tx_buffer_head;
    39ca:	4a1b      	ldr	r2, [pc, #108]	; (3a38 <uart2_status_isr+0xd4>)
    39cc:	7811      	ldrb	r1, [r2, #0]
    39ce:	b2c9      	uxtb	r1, r1
		tail = tx_buffer_tail;
    39d0:	4a18      	ldr	r2, [pc, #96]	; (3a34 <uart2_status_isr+0xd0>)
    39d2:	7812      	ldrb	r2, [r2, #0]
    39d4:	b2d2      	uxtb	r2, r2
		if (head == tail) {
    39d6:	4291      	cmp	r1, r2
    39d8:	d103      	bne.n	39e2 <uart2_status_isr+0x7e>
			UART2_C2 = C2_TX_COMPLETING;
    39da:	216c      	movs	r1, #108	; 0x6c
    39dc:	4a10      	ldr	r2, [pc, #64]	; (3a20 <uart2_status_isr+0xbc>)
    39de:	70d1      	strb	r1, [r2, #3]
    39e0:	e00b      	b.n	39fa <uart2_status_isr+0x96>
		} else {
			if (++tail >= SERIAL3_TX_BUFFER_SIZE) tail = 0;
    39e2:	3201      	adds	r2, #1
    39e4:	2a28      	cmp	r2, #40	; 0x28
    39e6:	bf28      	it	cs
    39e8:	2200      	movcs	r2, #0
			n = tx_buffer[tail];
    39ea:	4914      	ldr	r1, [pc, #80]	; (3a3c <uart2_status_isr+0xd8>)
    39ec:	5c89      	ldrb	r1, [r1, r2]
    39ee:	b2c9      	uxtb	r1, r1
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
    39f0:	480b      	ldr	r0, [pc, #44]	; (3a20 <uart2_status_isr+0xbc>)
    39f2:	71c1      	strb	r1, [r0, #7]
			tx_buffer_tail = tail;
    39f4:	b2d2      	uxtb	r2, r2
    39f6:	490f      	ldr	r1, [pc, #60]	; (3a34 <uart2_status_isr+0xd0>)
    39f8:	700a      	strb	r2, [r1, #0]
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    39fa:	f013 0f40 	tst.w	r3, #64	; 0x40
    39fe:	d00e      	beq.n	3a1e <uart2_status_isr+0xba>
    3a00:	4b07      	ldr	r3, [pc, #28]	; (3a20 <uart2_status_isr+0xbc>)
    3a02:	791b      	ldrb	r3, [r3, #4]
    3a04:	f013 0f40 	tst.w	r3, #64	; 0x40
    3a08:	d009      	beq.n	3a1e <uart2_status_isr+0xba>
		transmitting = 0;
    3a0a:	2200      	movs	r2, #0
    3a0c:	4b0c      	ldr	r3, [pc, #48]	; (3a40 <uart2_status_isr+0xdc>)
    3a0e:	701a      	strb	r2, [r3, #0]
		if (transmit_pin) transmit_deassert();
    3a10:	4b0c      	ldr	r3, [pc, #48]	; (3a44 <uart2_status_isr+0xe0>)
    3a12:	681b      	ldr	r3, [r3, #0]
    3a14:	b103      	cbz	r3, 3a18 <uart2_status_isr+0xb4>
    3a16:	701a      	strb	r2, [r3, #0]
		UART2_C2 = C2_TX_INACTIVE;
    3a18:	222c      	movs	r2, #44	; 0x2c
    3a1a:	4b01      	ldr	r3, [pc, #4]	; (3a20 <uart2_status_isr+0xbc>)
    3a1c:	70da      	strb	r2, [r3, #3]
    3a1e:	4770      	bx	lr
    3a20:	4006c000 	.word	0x4006c000
    3a24:	1fff9b7c 	.word	0x1fff9b7c
    3a28:	1fff9b11 	.word	0x1fff9b11
    3a2c:	1fff9b3c 	.word	0x1fff9b3c
    3a30:	1fff9b0c 	.word	0x1fff9b0c
    3a34:	1fff9b7d 	.word	0x1fff9b7d
    3a38:	1fff9b84 	.word	0x1fff9b84
    3a3c:	1fff9b14 	.word	0x1fff9b14
    3a40:	1fff9b10 	.word	0x1fff9b10
    3a44:	1fff9b80 	.word	0x1fff9b80

00003a48 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    3a48:	b672      	cpsid	i
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    3a4a:	4b1d      	ldr	r3, [pc, #116]	; (3ac0 <usb_init_serialnumber+0x78>)
    3a4c:	2270      	movs	r2, #112	; 0x70
    3a4e:	701a      	strb	r2, [r3, #0]
	FTFL_FCCOB0 = 0x41;
    3a50:	2141      	movs	r1, #65	; 0x41
    3a52:	4a1c      	ldr	r2, [pc, #112]	; (3ac4 <usb_init_serialnumber+0x7c>)
    3a54:	7011      	strb	r1, [r2, #0]
	FTFL_FCCOB1 = 15;
    3a56:	210f      	movs	r1, #15
    3a58:	3a01      	subs	r2, #1
    3a5a:	7011      	strb	r1, [r2, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    3a5c:	2280      	movs	r2, #128	; 0x80
    3a5e:	701a      	strb	r2, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    3a60:	461a      	mov	r2, r3
    3a62:	7813      	ldrb	r3, [r2, #0]
    3a64:	f013 0f80 	tst.w	r3, #128	; 0x80
    3a68:	d0fb      	beq.n	3a62 <usb_init_serialnumber+0x1a>
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    3a6a:	b500      	push	{lr}
    3a6c:	b085      	sub	sp, #20
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	FTFL_FCCOB0 = 0x41;
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOB7;
    3a6e:	4b16      	ldr	r3, [pc, #88]	; (3ac8 <usb_init_serialnumber+0x80>)
    3a70:	6818      	ldr	r0, [r3, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    3a72:	b662      	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    3a74:	4b15      	ldr	r3, [pc, #84]	; (3acc <usb_init_serialnumber+0x84>)
    3a76:	4298      	cmp	r0, r3
    3a78:	bf9c      	itt	ls
    3a7a:	eb00 0080 	addls.w	r0, r0, r0, lsl #2
    3a7e:	0040      	lslls	r0, r0, #1
	ultoa(num, buf, 10);
    3a80:	220a      	movs	r2, #10
    3a82:	a901      	add	r1, sp, #4
    3a84:	f7ff fdf0 	bl	3668 <ultoa>
	for (i=0; i<10; i++) {
		char c = buf[i];
    3a88:	f89d 3004 	ldrb.w	r3, [sp, #4]
		if (!c) break;
    3a8c:	b97b      	cbnz	r3, 3aae <usb_init_serialnumber+0x66>
    3a8e:	e008      	b.n	3aa2 <usb_init_serialnumber+0x5a>
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
    3a90:	f810 2f01 	ldrb.w	r2, [r0, #1]!
		if (!c) break;
    3a94:	b132      	cbz	r2, 3aa4 <usb_init_serialnumber+0x5c>
		usb_string_serial_number_default.wString[i] = c;
    3a96:	f821 2f02 	strh.w	r2, [r1, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    3a9a:	3301      	adds	r3, #1
    3a9c:	2b0a      	cmp	r3, #10
    3a9e:	d1f7      	bne.n	3a90 <usb_init_serialnumber+0x48>
    3aa0:	e000      	b.n	3aa4 <usb_init_serialnumber+0x5c>
    3aa2:	2300      	movs	r3, #0
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    3aa4:	3301      	adds	r3, #1
    3aa6:	005b      	lsls	r3, r3, #1
    3aa8:	4a09      	ldr	r2, [pc, #36]	; (3ad0 <usb_init_serialnumber+0x88>)
    3aaa:	7013      	strb	r3, [r2, #0]
}
    3aac:	e005      	b.n	3aba <usb_init_serialnumber+0x72>
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    3aae:	4908      	ldr	r1, [pc, #32]	; (3ad0 <usb_init_serialnumber+0x88>)
    3ab0:	f821 3f02 	strh.w	r3, [r1, #2]!
    3ab4:	a801      	add	r0, sp, #4
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    3ab6:	2301      	movs	r3, #1
    3ab8:	e7ea      	b.n	3a90 <usb_init_serialnumber+0x48>
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
}
    3aba:	b005      	add	sp, #20
    3abc:	f85d fb04 	ldr.w	pc, [sp], #4
    3ac0:	40020000 	.word	0x40020000
    3ac4:	40020007 	.word	0x40020007
    3ac8:	40020008 	.word	0x40020008
    3acc:	0098967f 	.word	0x0098967f
    3ad0:	1fff8e68 	.word	0x1fff8e68

00003ad4 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    3ad4:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3ad6:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    3ada:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    3adc:	4b0c      	ldr	r3, [pc, #48]	; (3b10 <EventResponder::runFromInterrupt()+0x3c>)
    3ade:	6818      	ldr	r0, [r3, #0]
		if (first) {
    3ae0:	b198      	cbz	r0, 3b0a <EventResponder::runFromInterrupt()+0x36>
			firstInterrupt = first->_next;
    3ae2:	461c      	mov	r4, r3
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    3ae4:	2500      	movs	r5, #0
			} else {
				lastInterrupt = nullptr;
    3ae6:	4e0b      	ldr	r6, [pc, #44]	; (3b14 <EventResponder::runFromInterrupt()+0x40>)
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    3ae8:	6943      	ldr	r3, [r0, #20]
    3aea:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    3aec:	b10b      	cbz	r3, 3af2 <EventResponder::runFromInterrupt()+0x1e>
				firstInterrupt->_prev = nullptr;
    3aee:	619d      	str	r5, [r3, #24]
    3af0:	e000      	b.n	3af4 <EventResponder::runFromInterrupt()+0x20>
			} else {
				lastInterrupt = nullptr;
    3af2:	6035      	str	r5, [r6, #0]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3af4:	b902      	cbnz	r2, 3af8 <EventResponder::runFromInterrupt()+0x24>
    3af6:	b662      	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
    3af8:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    3afa:	6883      	ldr	r3, [r0, #8]
    3afc:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3afe:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    3b02:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    3b04:	6820      	ldr	r0, [r4, #0]
		if (first) {
    3b06:	2800      	cmp	r0, #0
    3b08:	d1ee      	bne.n	3ae8 <EventResponder::runFromInterrupt()+0x14>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    3b0a:	b902      	cbnz	r2, 3b0e <EventResponder::runFromInterrupt()+0x3a>
    3b0c:	b662      	cpsie	i
    3b0e:	bd70      	pop	{r4, r5, r6, pc}
    3b10:	1fff9b88 	.word	0x1fff9b88
    3b14:	1fff9b8c 	.word	0x1fff9b8c

00003b18 <pendablesrvreq_isr>:
	}
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
    3b18:	b508      	push	{r3, lr}
	EventResponder::runFromInterrupt();
    3b1a:	f7ff ffdb 	bl	3ad4 <EventResponder::runFromInterrupt()>
    3b1e:	bd08      	pop	{r3, pc}

00003b20 <MillisTimer::addToActiveList()>:
	enableTimerInterrupt(irq);
}

void MillisTimer::addToActiveList() // only called by runFromTimer()
{
	if (listActive == nullptr) {
    3b20:	4b1c      	ldr	r3, [pc, #112]	; (3b94 <MillisTimer::addToActiveList()+0x74>)
    3b22:	681b      	ldr	r3, [r3, #0]
    3b24:	b923      	cbnz	r3, 3b30 <MillisTimer::addToActiveList()+0x10>
		// list is empty, easy case
		_next = nullptr;
    3b26:	6083      	str	r3, [r0, #8]
		_prev = nullptr;
    3b28:	60c3      	str	r3, [r0, #12]
		listActive = this;
    3b2a:	4b1a      	ldr	r3, [pc, #104]	; (3b94 <MillisTimer::addToActiveList()+0x74>)
    3b2c:	6018      	str	r0, [r3, #0]
    3b2e:	e02d      	b.n	3b8c <MillisTimer::addToActiveList()+0x6c>
	} else if (_ms < listActive->_ms) {
    3b30:	6801      	ldr	r1, [r0, #0]
    3b32:	681a      	ldr	r2, [r3, #0]
    3b34:	4291      	cmp	r1, r2
    3b36:	d20a      	bcs.n	3b4e <MillisTimer::addToActiveList()+0x2e>
		// this timer triggers before any on the list
		_next = listActive;
    3b38:	6083      	str	r3, [r0, #8]
		_prev = nullptr;
    3b3a:	2200      	movs	r2, #0
    3b3c:	60c2      	str	r2, [r0, #12]
		listActive->_prev = this;
    3b3e:	60d8      	str	r0, [r3, #12]
		// Decrement the next items wait time be our wait time as to properly handle waits for all other items...
		listActive->_ms -= _ms;	
    3b40:	681a      	ldr	r2, [r3, #0]
    3b42:	6801      	ldr	r1, [r0, #0]
    3b44:	1a52      	subs	r2, r2, r1
    3b46:	601a      	str	r2, [r3, #0]
		listActive = this;
    3b48:	4b12      	ldr	r3, [pc, #72]	; (3b94 <MillisTimer::addToActiveList()+0x74>)
    3b4a:	6018      	str	r0, [r3, #0]
    3b4c:	e01e      	b.n	3b8c <MillisTimer::addToActiveList()+0x6c>
	} else {
		// add this timer somewhere after the first already on the list
		MillisTimer *timer = listActive;
		while (timer->_next) {
    3b4e:	689a      	ldr	r2, [r3, #8]
    3b50:	b1a2      	cbz	r2, 3b7c <MillisTimer::addToActiveList()+0x5c>
			_ms -= timer->_ms;
    3b52:	6802      	ldr	r2, [r0, #0]
    3b54:	6819      	ldr	r1, [r3, #0]
    3b56:	1a52      	subs	r2, r2, r1
    3b58:	6002      	str	r2, [r0, #0]
			timer = timer->_next;
    3b5a:	689b      	ldr	r3, [r3, #8]
			if (_ms < timer->_ms) {
    3b5c:	6819      	ldr	r1, [r3, #0]
    3b5e:	428a      	cmp	r2, r1
    3b60:	d2f5      	bcs.n	3b4e <MillisTimer::addToActiveList()+0x2e>
				// found the right place in the middle of list
				_next = timer;
    3b62:	6083      	str	r3, [r0, #8]
				_prev = timer->_prev;
    3b64:	68da      	ldr	r2, [r3, #12]
    3b66:	60c2      	str	r2, [r0, #12]
				timer->_prev = this;
    3b68:	60d8      	str	r0, [r3, #12]
				_prev->_next = this;
    3b6a:	68c2      	ldr	r2, [r0, #12]
    3b6c:	6090      	str	r0, [r2, #8]
				timer->_ms -= _ms;
    3b6e:	681a      	ldr	r2, [r3, #0]
    3b70:	6801      	ldr	r1, [r0, #0]
    3b72:	1a52      	subs	r2, r2, r1
    3b74:	601a      	str	r2, [r3, #0]
				_state = TimerActive;
    3b76:	2302      	movs	r3, #2
    3b78:	7503      	strb	r3, [r0, #20]
				return;
    3b7a:	4770      	bx	lr
			}
		}
		// add this time at the end of the list
		_ms -= timer->_ms;
    3b7c:	6802      	ldr	r2, [r0, #0]
    3b7e:	6819      	ldr	r1, [r3, #0]
    3b80:	1a52      	subs	r2, r2, r1
    3b82:	6002      	str	r2, [r0, #0]
		_next = nullptr;
    3b84:	2200      	movs	r2, #0
    3b86:	6082      	str	r2, [r0, #8]
		_prev = timer;
    3b88:	60c3      	str	r3, [r0, #12]
		timer->_next = this;
    3b8a:	6098      	str	r0, [r3, #8]
	}
	_state = TimerActive;
    3b8c:	2302      	movs	r3, #2
    3b8e:	7503      	strb	r3, [r0, #20]
    3b90:	4770      	bx	lr
    3b92:	bf00      	nop
    3b94:	1fff9b90 	.word	0x1fff9b90

00003b98 <MillisTimer::runFromTimer()>:
	}
	enableTimerInterrupt(irq);
}

void MillisTimer::runFromTimer()
{
    3b98:	b570      	push	{r4, r5, r6, lr}
	MillisTimer *timer = listActive;
    3b9a:	4b19      	ldr	r3, [pc, #100]	; (3c00 <MillisTimer::runFromTimer()+0x68>)
    3b9c:	681c      	ldr	r4, [r3, #0]
	while (timer) {
    3b9e:	b1ec      	cbz	r4, 3bdc <MillisTimer::runFromTimer()+0x44>
		if (timer->_ms > 0) {
    3ba0:	6823      	ldr	r3, [r4, #0]
    3ba2:	b923      	cbnz	r3, 3bae <MillisTimer::runFromTimer()+0x16>
			timer->_ms--;
			break;
		} else {
			MillisTimer *next = timer->_next;
			if (next) next->_prev = nullptr;
    3ba4:	2500      	movs	r5, #0
			listActive = next;
    3ba6:	4e16      	ldr	r6, [pc, #88]	; (3c00 <MillisTimer::runFromTimer()+0x68>)
    3ba8:	e004      	b.n	3bb4 <MillisTimer::runFromTimer()+0x1c>

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
    3baa:	6823      	ldr	r3, [r4, #0]
    3bac:	b113      	cbz	r3, 3bb4 <MillisTimer::runFromTimer()+0x1c>
			timer->_ms--;
    3bae:	3b01      	subs	r3, #1
    3bb0:	6023      	str	r3, [r4, #0]
			break;
    3bb2:	e013      	b.n	3bdc <MillisTimer::runFromTimer()+0x44>
		} else {
			MillisTimer *next = timer->_next;
    3bb4:	68a3      	ldr	r3, [r4, #8]
			if (next) next->_prev = nullptr;
    3bb6:	b103      	cbz	r3, 3bba <MillisTimer::runFromTimer()+0x22>
    3bb8:	60dd      	str	r5, [r3, #12]
			listActive = next;
    3bba:	6033      	str	r3, [r6, #0]
			timer->_state = TimerOff;
    3bbc:	7525      	strb	r5, [r4, #20]
			EventResponderRef event = *(timer->_event);
    3bbe:	6920      	ldr	r0, [r4, #16]
			event.triggerEvent(0, timer);
    3bc0:	6803      	ldr	r3, [r0, #0]
    3bc2:	681b      	ldr	r3, [r3, #0]
    3bc4:	4622      	mov	r2, r4
    3bc6:	4629      	mov	r1, r5
    3bc8:	4798      	blx	r3
			if (timer->_reload) {
    3bca:	6863      	ldr	r3, [r4, #4]
    3bcc:	b11b      	cbz	r3, 3bd6 <MillisTimer::runFromTimer()+0x3e>
				timer->_ms = timer->_reload;
    3bce:	6023      	str	r3, [r4, #0]
				timer->addToActiveList();
    3bd0:	4620      	mov	r0, r4
    3bd2:	f7ff ffa5 	bl	3b20 <MillisTimer::addToActiveList()>
			}
			timer = listActive;
    3bd6:	6834      	ldr	r4, [r6, #0]
}

void MillisTimer::runFromTimer()
{
	MillisTimer *timer = listActive;
	while (timer) {
    3bd8:	2c00      	cmp	r4, #0
    3bda:	d1e6      	bne.n	3baa <MillisTimer::runFromTimer()+0x12>
	volatile TimerStateType _state = TimerOff;
	static MillisTimer *listWaiting; // single linked list of waiting to start timers
	static MillisTimer *listActive;  // double linked list of running timers
	static bool disableTimerInterrupt() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    3bdc:	f3ef 8310 	mrs	r3, PRIMASK
		__disable_irq();
    3be0:	b672      	cpsid	i
			}
			timer = listActive;
		}
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
    3be2:	4a08      	ldr	r2, [pc, #32]	; (3c04 <MillisTimer::runFromTimer()+0x6c>)
    3be4:	6810      	ldr	r0, [r2, #0]
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
    3be6:	2100      	movs	r1, #0
    3be8:	6011      	str	r1, [r2, #0]
		return (primask == 0) ? true : false;
	}
	static void enableTimerInterrupt(bool doit) {
		if (doit) __enable_irq();
    3bea:	b903      	cbnz	r3, 3bee <MillisTimer::runFromTimer()+0x56>
    3bec:	b662      	cpsie	i
	enableTimerInterrupt(irq);
	while (waiting) {
    3bee:	b128      	cbz	r0, 3bfc <MillisTimer::runFromTimer()+0x64>
		MillisTimer *next = waiting->_next;
    3bf0:	6884      	ldr	r4, [r0, #8]
		waiting->addToActiveList();
    3bf2:	f7ff ff95 	bl	3b20 <MillisTimer::addToActiveList()>
		waiting = next;
    3bf6:	4620      	mov	r0, r4
	}
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
    3bf8:	2c00      	cmp	r4, #0
    3bfa:	d1f9      	bne.n	3bf0 <MillisTimer::runFromTimer()+0x58>
    3bfc:	bd70      	pop	{r4, r5, r6, pc}
    3bfe:	bf00      	nop
    3c00:	1fff9b90 	.word	0x1fff9b90
    3c04:	1fff9ba0 	.word	0x1fff9ba0

00003c08 <systick_isr>:
	}
}

extern "C" volatile uint32_t systick_millis_count;
void systick_isr(void)
{
    3c08:	b508      	push	{r3, lr}
	systick_millis_count++;
    3c0a:	4a03      	ldr	r2, [pc, #12]	; (3c18 <systick_isr+0x10>)
    3c0c:	6813      	ldr	r3, [r2, #0]
    3c0e:	3301      	adds	r3, #1
    3c10:	6013      	str	r3, [r2, #0]
	MillisTimer::runFromTimer();
    3c12:	f7ff ffc1 	bl	3b98 <MillisTimer::runFromTimer()>
    3c16:	bd08      	pop	{r3, pc}
    3c18:	1fff9900 	.word	0x1fff9900

00003c1c <serialEvent1()>:
#include "HardwareSerial.h"

HardwareSerial Serial1;

void serialEvent1() __attribute__((weak));
void serialEvent1() {}
    3c1c:	4770      	bx	lr
    3c1e:	bf00      	nop

00003c20 <serialEvent2()>:
#include "HardwareSerial.h"

HardwareSerial2 Serial2;

void serialEvent2() __attribute__((weak));
void serialEvent2() {}
    3c20:	4770      	bx	lr
    3c22:	bf00      	nop

00003c24 <serialEvent3()>:
#include "HardwareSerial.h"

HardwareSerial3 Serial3;

void serialEvent3() __attribute__((weak));
void serialEvent3() {}
    3c24:	4770      	bx	lr
    3c26:	bf00      	nop

00003c28 <__aeabi_drsub>:
    3c28:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    3c2c:	e002      	b.n	3c34 <__adddf3>
    3c2e:	bf00      	nop

00003c30 <__aeabi_dsub>:
    3c30:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00003c34 <__adddf3>:
    3c34:	b530      	push	{r4, r5, lr}
    3c36:	ea4f 0441 	mov.w	r4, r1, lsl #1
    3c3a:	ea4f 0543 	mov.w	r5, r3, lsl #1
    3c3e:	ea94 0f05 	teq	r4, r5
    3c42:	bf08      	it	eq
    3c44:	ea90 0f02 	teqeq	r0, r2
    3c48:	bf1f      	itttt	ne
    3c4a:	ea54 0c00 	orrsne.w	ip, r4, r0
    3c4e:	ea55 0c02 	orrsne.w	ip, r5, r2
    3c52:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    3c56:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    3c5a:	f000 80e2 	beq.w	3e22 <__adddf3+0x1ee>
    3c5e:	ea4f 5454 	mov.w	r4, r4, lsr #21
    3c62:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    3c66:	bfb8      	it	lt
    3c68:	426d      	neglt	r5, r5
    3c6a:	dd0c      	ble.n	3c86 <__adddf3+0x52>
    3c6c:	442c      	add	r4, r5
    3c6e:	ea80 0202 	eor.w	r2, r0, r2
    3c72:	ea81 0303 	eor.w	r3, r1, r3
    3c76:	ea82 0000 	eor.w	r0, r2, r0
    3c7a:	ea83 0101 	eor.w	r1, r3, r1
    3c7e:	ea80 0202 	eor.w	r2, r0, r2
    3c82:	ea81 0303 	eor.w	r3, r1, r3
    3c86:	2d36      	cmp	r5, #54	; 0x36
    3c88:	bf88      	it	hi
    3c8a:	bd30      	pophi	{r4, r5, pc}
    3c8c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    3c90:	ea4f 3101 	mov.w	r1, r1, lsl #12
    3c94:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    3c98:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    3c9c:	d002      	beq.n	3ca4 <__adddf3+0x70>
    3c9e:	4240      	negs	r0, r0
    3ca0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    3ca4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    3ca8:	ea4f 3303 	mov.w	r3, r3, lsl #12
    3cac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    3cb0:	d002      	beq.n	3cb8 <__adddf3+0x84>
    3cb2:	4252      	negs	r2, r2
    3cb4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    3cb8:	ea94 0f05 	teq	r4, r5
    3cbc:	f000 80a7 	beq.w	3e0e <__adddf3+0x1da>
    3cc0:	f1a4 0401 	sub.w	r4, r4, #1
    3cc4:	f1d5 0e20 	rsbs	lr, r5, #32
    3cc8:	db0d      	blt.n	3ce6 <__adddf3+0xb2>
    3cca:	fa02 fc0e 	lsl.w	ip, r2, lr
    3cce:	fa22 f205 	lsr.w	r2, r2, r5
    3cd2:	1880      	adds	r0, r0, r2
    3cd4:	f141 0100 	adc.w	r1, r1, #0
    3cd8:	fa03 f20e 	lsl.w	r2, r3, lr
    3cdc:	1880      	adds	r0, r0, r2
    3cde:	fa43 f305 	asr.w	r3, r3, r5
    3ce2:	4159      	adcs	r1, r3
    3ce4:	e00e      	b.n	3d04 <__adddf3+0xd0>
    3ce6:	f1a5 0520 	sub.w	r5, r5, #32
    3cea:	f10e 0e20 	add.w	lr, lr, #32
    3cee:	2a01      	cmp	r2, #1
    3cf0:	fa03 fc0e 	lsl.w	ip, r3, lr
    3cf4:	bf28      	it	cs
    3cf6:	f04c 0c02 	orrcs.w	ip, ip, #2
    3cfa:	fa43 f305 	asr.w	r3, r3, r5
    3cfe:	18c0      	adds	r0, r0, r3
    3d00:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    3d04:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    3d08:	d507      	bpl.n	3d1a <__adddf3+0xe6>
    3d0a:	f04f 0e00 	mov.w	lr, #0
    3d0e:	f1dc 0c00 	rsbs	ip, ip, #0
    3d12:	eb7e 0000 	sbcs.w	r0, lr, r0
    3d16:	eb6e 0101 	sbc.w	r1, lr, r1
    3d1a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    3d1e:	d31b      	bcc.n	3d58 <__adddf3+0x124>
    3d20:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    3d24:	d30c      	bcc.n	3d40 <__adddf3+0x10c>
    3d26:	0849      	lsrs	r1, r1, #1
    3d28:	ea5f 0030 	movs.w	r0, r0, rrx
    3d2c:	ea4f 0c3c 	mov.w	ip, ip, rrx
    3d30:	f104 0401 	add.w	r4, r4, #1
    3d34:	ea4f 5244 	mov.w	r2, r4, lsl #21
    3d38:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    3d3c:	f080 809a 	bcs.w	3e74 <__adddf3+0x240>
    3d40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    3d44:	bf08      	it	eq
    3d46:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    3d4a:	f150 0000 	adcs.w	r0, r0, #0
    3d4e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    3d52:	ea41 0105 	orr.w	r1, r1, r5
    3d56:	bd30      	pop	{r4, r5, pc}
    3d58:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    3d5c:	4140      	adcs	r0, r0
    3d5e:	eb41 0101 	adc.w	r1, r1, r1
    3d62:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    3d66:	f1a4 0401 	sub.w	r4, r4, #1
    3d6a:	d1e9      	bne.n	3d40 <__adddf3+0x10c>
    3d6c:	f091 0f00 	teq	r1, #0
    3d70:	bf04      	itt	eq
    3d72:	4601      	moveq	r1, r0
    3d74:	2000      	moveq	r0, #0
    3d76:	fab1 f381 	clz	r3, r1
    3d7a:	bf08      	it	eq
    3d7c:	3320      	addeq	r3, #32
    3d7e:	f1a3 030b 	sub.w	r3, r3, #11
    3d82:	f1b3 0220 	subs.w	r2, r3, #32
    3d86:	da0c      	bge.n	3da2 <__adddf3+0x16e>
    3d88:	320c      	adds	r2, #12
    3d8a:	dd08      	ble.n	3d9e <__adddf3+0x16a>
    3d8c:	f102 0c14 	add.w	ip, r2, #20
    3d90:	f1c2 020c 	rsb	r2, r2, #12
    3d94:	fa01 f00c 	lsl.w	r0, r1, ip
    3d98:	fa21 f102 	lsr.w	r1, r1, r2
    3d9c:	e00c      	b.n	3db8 <__adddf3+0x184>
    3d9e:	f102 0214 	add.w	r2, r2, #20
    3da2:	bfd8      	it	le
    3da4:	f1c2 0c20 	rsble	ip, r2, #32
    3da8:	fa01 f102 	lsl.w	r1, r1, r2
    3dac:	fa20 fc0c 	lsr.w	ip, r0, ip
    3db0:	bfdc      	itt	le
    3db2:	ea41 010c 	orrle.w	r1, r1, ip
    3db6:	4090      	lslle	r0, r2
    3db8:	1ae4      	subs	r4, r4, r3
    3dba:	bfa2      	ittt	ge
    3dbc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    3dc0:	4329      	orrge	r1, r5
    3dc2:	bd30      	popge	{r4, r5, pc}
    3dc4:	ea6f 0404 	mvn.w	r4, r4
    3dc8:	3c1f      	subs	r4, #31
    3dca:	da1c      	bge.n	3e06 <__adddf3+0x1d2>
    3dcc:	340c      	adds	r4, #12
    3dce:	dc0e      	bgt.n	3dee <__adddf3+0x1ba>
    3dd0:	f104 0414 	add.w	r4, r4, #20
    3dd4:	f1c4 0220 	rsb	r2, r4, #32
    3dd8:	fa20 f004 	lsr.w	r0, r0, r4
    3ddc:	fa01 f302 	lsl.w	r3, r1, r2
    3de0:	ea40 0003 	orr.w	r0, r0, r3
    3de4:	fa21 f304 	lsr.w	r3, r1, r4
    3de8:	ea45 0103 	orr.w	r1, r5, r3
    3dec:	bd30      	pop	{r4, r5, pc}
    3dee:	f1c4 040c 	rsb	r4, r4, #12
    3df2:	f1c4 0220 	rsb	r2, r4, #32
    3df6:	fa20 f002 	lsr.w	r0, r0, r2
    3dfa:	fa01 f304 	lsl.w	r3, r1, r4
    3dfe:	ea40 0003 	orr.w	r0, r0, r3
    3e02:	4629      	mov	r1, r5
    3e04:	bd30      	pop	{r4, r5, pc}
    3e06:	fa21 f004 	lsr.w	r0, r1, r4
    3e0a:	4629      	mov	r1, r5
    3e0c:	bd30      	pop	{r4, r5, pc}
    3e0e:	f094 0f00 	teq	r4, #0
    3e12:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    3e16:	bf06      	itte	eq
    3e18:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    3e1c:	3401      	addeq	r4, #1
    3e1e:	3d01      	subne	r5, #1
    3e20:	e74e      	b.n	3cc0 <__adddf3+0x8c>
    3e22:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    3e26:	bf18      	it	ne
    3e28:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    3e2c:	d029      	beq.n	3e82 <__adddf3+0x24e>
    3e2e:	ea94 0f05 	teq	r4, r5
    3e32:	bf08      	it	eq
    3e34:	ea90 0f02 	teqeq	r0, r2
    3e38:	d005      	beq.n	3e46 <__adddf3+0x212>
    3e3a:	ea54 0c00 	orrs.w	ip, r4, r0
    3e3e:	bf04      	itt	eq
    3e40:	4619      	moveq	r1, r3
    3e42:	4610      	moveq	r0, r2
    3e44:	bd30      	pop	{r4, r5, pc}
    3e46:	ea91 0f03 	teq	r1, r3
    3e4a:	bf1e      	ittt	ne
    3e4c:	2100      	movne	r1, #0
    3e4e:	2000      	movne	r0, #0
    3e50:	bd30      	popne	{r4, r5, pc}
    3e52:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    3e56:	d105      	bne.n	3e64 <__adddf3+0x230>
    3e58:	0040      	lsls	r0, r0, #1
    3e5a:	4149      	adcs	r1, r1
    3e5c:	bf28      	it	cs
    3e5e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    3e62:	bd30      	pop	{r4, r5, pc}
    3e64:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    3e68:	bf3c      	itt	cc
    3e6a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    3e6e:	bd30      	popcc	{r4, r5, pc}
    3e70:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    3e74:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    3e78:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    3e7c:	f04f 0000 	mov.w	r0, #0
    3e80:	bd30      	pop	{r4, r5, pc}
    3e82:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    3e86:	bf1a      	itte	ne
    3e88:	4619      	movne	r1, r3
    3e8a:	4610      	movne	r0, r2
    3e8c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    3e90:	bf1c      	itt	ne
    3e92:	460b      	movne	r3, r1
    3e94:	4602      	movne	r2, r0
    3e96:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    3e9a:	bf06      	itte	eq
    3e9c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    3ea0:	ea91 0f03 	teqeq	r1, r3
    3ea4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    3ea8:	bd30      	pop	{r4, r5, pc}
    3eaa:	bf00      	nop

00003eac <__aeabi_ui2d>:
    3eac:	f090 0f00 	teq	r0, #0
    3eb0:	bf04      	itt	eq
    3eb2:	2100      	moveq	r1, #0
    3eb4:	4770      	bxeq	lr
    3eb6:	b530      	push	{r4, r5, lr}
    3eb8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    3ebc:	f104 0432 	add.w	r4, r4, #50	; 0x32
    3ec0:	f04f 0500 	mov.w	r5, #0
    3ec4:	f04f 0100 	mov.w	r1, #0
    3ec8:	e750      	b.n	3d6c <__adddf3+0x138>
    3eca:	bf00      	nop

00003ecc <__aeabi_i2d>:
    3ecc:	f090 0f00 	teq	r0, #0
    3ed0:	bf04      	itt	eq
    3ed2:	2100      	moveq	r1, #0
    3ed4:	4770      	bxeq	lr
    3ed6:	b530      	push	{r4, r5, lr}
    3ed8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    3edc:	f104 0432 	add.w	r4, r4, #50	; 0x32
    3ee0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    3ee4:	bf48      	it	mi
    3ee6:	4240      	negmi	r0, r0
    3ee8:	f04f 0100 	mov.w	r1, #0
    3eec:	e73e      	b.n	3d6c <__adddf3+0x138>
    3eee:	bf00      	nop

00003ef0 <__aeabi_f2d>:
    3ef0:	0042      	lsls	r2, r0, #1
    3ef2:	ea4f 01e2 	mov.w	r1, r2, asr #3
    3ef6:	ea4f 0131 	mov.w	r1, r1, rrx
    3efa:	ea4f 7002 	mov.w	r0, r2, lsl #28
    3efe:	bf1f      	itttt	ne
    3f00:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    3f04:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    3f08:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    3f0c:	4770      	bxne	lr
    3f0e:	f092 0f00 	teq	r2, #0
    3f12:	bf14      	ite	ne
    3f14:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    3f18:	4770      	bxeq	lr
    3f1a:	b530      	push	{r4, r5, lr}
    3f1c:	f44f 7460 	mov.w	r4, #896	; 0x380
    3f20:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    3f24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    3f28:	e720      	b.n	3d6c <__adddf3+0x138>
    3f2a:	bf00      	nop

00003f2c <__aeabi_ul2d>:
    3f2c:	ea50 0201 	orrs.w	r2, r0, r1
    3f30:	bf08      	it	eq
    3f32:	4770      	bxeq	lr
    3f34:	b530      	push	{r4, r5, lr}
    3f36:	f04f 0500 	mov.w	r5, #0
    3f3a:	e00a      	b.n	3f52 <__aeabi_l2d+0x16>

00003f3c <__aeabi_l2d>:
    3f3c:	ea50 0201 	orrs.w	r2, r0, r1
    3f40:	bf08      	it	eq
    3f42:	4770      	bxeq	lr
    3f44:	b530      	push	{r4, r5, lr}
    3f46:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    3f4a:	d502      	bpl.n	3f52 <__aeabi_l2d+0x16>
    3f4c:	4240      	negs	r0, r0
    3f4e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    3f52:	f44f 6480 	mov.w	r4, #1024	; 0x400
    3f56:	f104 0432 	add.w	r4, r4, #50	; 0x32
    3f5a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    3f5e:	f43f aedc 	beq.w	3d1a <__adddf3+0xe6>
    3f62:	f04f 0203 	mov.w	r2, #3
    3f66:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    3f6a:	bf18      	it	ne
    3f6c:	3203      	addne	r2, #3
    3f6e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    3f72:	bf18      	it	ne
    3f74:	3203      	addne	r2, #3
    3f76:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    3f7a:	f1c2 0320 	rsb	r3, r2, #32
    3f7e:	fa00 fc03 	lsl.w	ip, r0, r3
    3f82:	fa20 f002 	lsr.w	r0, r0, r2
    3f86:	fa01 fe03 	lsl.w	lr, r1, r3
    3f8a:	ea40 000e 	orr.w	r0, r0, lr
    3f8e:	fa21 f102 	lsr.w	r1, r1, r2
    3f92:	4414      	add	r4, r2
    3f94:	e6c1      	b.n	3d1a <__adddf3+0xe6>
    3f96:	bf00      	nop

00003f98 <__aeabi_dmul>:
    3f98:	b570      	push	{r4, r5, r6, lr}
    3f9a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    3f9e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    3fa2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    3fa6:	bf1d      	ittte	ne
    3fa8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    3fac:	ea94 0f0c 	teqne	r4, ip
    3fb0:	ea95 0f0c 	teqne	r5, ip
    3fb4:	f000 f8de 	bleq	4174 <__aeabi_dmul+0x1dc>
    3fb8:	442c      	add	r4, r5
    3fba:	ea81 0603 	eor.w	r6, r1, r3
    3fbe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    3fc2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    3fc6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    3fca:	bf18      	it	ne
    3fcc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    3fd0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    3fd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    3fd8:	d038      	beq.n	404c <__aeabi_dmul+0xb4>
    3fda:	fba0 ce02 	umull	ip, lr, r0, r2
    3fde:	f04f 0500 	mov.w	r5, #0
    3fe2:	fbe1 e502 	umlal	lr, r5, r1, r2
    3fe6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    3fea:	fbe0 e503 	umlal	lr, r5, r0, r3
    3fee:	f04f 0600 	mov.w	r6, #0
    3ff2:	fbe1 5603 	umlal	r5, r6, r1, r3
    3ff6:	f09c 0f00 	teq	ip, #0
    3ffa:	bf18      	it	ne
    3ffc:	f04e 0e01 	orrne.w	lr, lr, #1
    4000:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    4004:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    4008:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    400c:	d204      	bcs.n	4018 <__aeabi_dmul+0x80>
    400e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    4012:	416d      	adcs	r5, r5
    4014:	eb46 0606 	adc.w	r6, r6, r6
    4018:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    401c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    4020:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    4024:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    4028:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    402c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    4030:	bf88      	it	hi
    4032:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    4036:	d81e      	bhi.n	4076 <__aeabi_dmul+0xde>
    4038:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    403c:	bf08      	it	eq
    403e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    4042:	f150 0000 	adcs.w	r0, r0, #0
    4046:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    404a:	bd70      	pop	{r4, r5, r6, pc}
    404c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    4050:	ea46 0101 	orr.w	r1, r6, r1
    4054:	ea40 0002 	orr.w	r0, r0, r2
    4058:	ea81 0103 	eor.w	r1, r1, r3
    405c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    4060:	bfc2      	ittt	gt
    4062:	ebd4 050c 	rsbsgt	r5, r4, ip
    4066:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    406a:	bd70      	popgt	{r4, r5, r6, pc}
    406c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    4070:	f04f 0e00 	mov.w	lr, #0
    4074:	3c01      	subs	r4, #1
    4076:	f300 80ab 	bgt.w	41d0 <__aeabi_dmul+0x238>
    407a:	f114 0f36 	cmn.w	r4, #54	; 0x36
    407e:	bfde      	ittt	le
    4080:	2000      	movle	r0, #0
    4082:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    4086:	bd70      	pople	{r4, r5, r6, pc}
    4088:	f1c4 0400 	rsb	r4, r4, #0
    408c:	3c20      	subs	r4, #32
    408e:	da35      	bge.n	40fc <__aeabi_dmul+0x164>
    4090:	340c      	adds	r4, #12
    4092:	dc1b      	bgt.n	40cc <__aeabi_dmul+0x134>
    4094:	f104 0414 	add.w	r4, r4, #20
    4098:	f1c4 0520 	rsb	r5, r4, #32
    409c:	fa00 f305 	lsl.w	r3, r0, r5
    40a0:	fa20 f004 	lsr.w	r0, r0, r4
    40a4:	fa01 f205 	lsl.w	r2, r1, r5
    40a8:	ea40 0002 	orr.w	r0, r0, r2
    40ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    40b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    40b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    40b8:	fa21 f604 	lsr.w	r6, r1, r4
    40bc:	eb42 0106 	adc.w	r1, r2, r6
    40c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    40c4:	bf08      	it	eq
    40c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    40ca:	bd70      	pop	{r4, r5, r6, pc}
    40cc:	f1c4 040c 	rsb	r4, r4, #12
    40d0:	f1c4 0520 	rsb	r5, r4, #32
    40d4:	fa00 f304 	lsl.w	r3, r0, r4
    40d8:	fa20 f005 	lsr.w	r0, r0, r5
    40dc:	fa01 f204 	lsl.w	r2, r1, r4
    40e0:	ea40 0002 	orr.w	r0, r0, r2
    40e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    40e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    40ec:	f141 0100 	adc.w	r1, r1, #0
    40f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    40f4:	bf08      	it	eq
    40f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    40fa:	bd70      	pop	{r4, r5, r6, pc}
    40fc:	f1c4 0520 	rsb	r5, r4, #32
    4100:	fa00 f205 	lsl.w	r2, r0, r5
    4104:	ea4e 0e02 	orr.w	lr, lr, r2
    4108:	fa20 f304 	lsr.w	r3, r0, r4
    410c:	fa01 f205 	lsl.w	r2, r1, r5
    4110:	ea43 0302 	orr.w	r3, r3, r2
    4114:	fa21 f004 	lsr.w	r0, r1, r4
    4118:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    411c:	fa21 f204 	lsr.w	r2, r1, r4
    4120:	ea20 0002 	bic.w	r0, r0, r2
    4124:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    4128:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    412c:	bf08      	it	eq
    412e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    4132:	bd70      	pop	{r4, r5, r6, pc}
    4134:	f094 0f00 	teq	r4, #0
    4138:	d10f      	bne.n	415a <__aeabi_dmul+0x1c2>
    413a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    413e:	0040      	lsls	r0, r0, #1
    4140:	eb41 0101 	adc.w	r1, r1, r1
    4144:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    4148:	bf08      	it	eq
    414a:	3c01      	subeq	r4, #1
    414c:	d0f7      	beq.n	413e <__aeabi_dmul+0x1a6>
    414e:	ea41 0106 	orr.w	r1, r1, r6
    4152:	f095 0f00 	teq	r5, #0
    4156:	bf18      	it	ne
    4158:	4770      	bxne	lr
    415a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    415e:	0052      	lsls	r2, r2, #1
    4160:	eb43 0303 	adc.w	r3, r3, r3
    4164:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    4168:	bf08      	it	eq
    416a:	3d01      	subeq	r5, #1
    416c:	d0f7      	beq.n	415e <__aeabi_dmul+0x1c6>
    416e:	ea43 0306 	orr.w	r3, r3, r6
    4172:	4770      	bx	lr
    4174:	ea94 0f0c 	teq	r4, ip
    4178:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    417c:	bf18      	it	ne
    417e:	ea95 0f0c 	teqne	r5, ip
    4182:	d00c      	beq.n	419e <__aeabi_dmul+0x206>
    4184:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    4188:	bf18      	it	ne
    418a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    418e:	d1d1      	bne.n	4134 <__aeabi_dmul+0x19c>
    4190:	ea81 0103 	eor.w	r1, r1, r3
    4194:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    4198:	f04f 0000 	mov.w	r0, #0
    419c:	bd70      	pop	{r4, r5, r6, pc}
    419e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    41a2:	bf06      	itte	eq
    41a4:	4610      	moveq	r0, r2
    41a6:	4619      	moveq	r1, r3
    41a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    41ac:	d019      	beq.n	41e2 <__aeabi_dmul+0x24a>
    41ae:	ea94 0f0c 	teq	r4, ip
    41b2:	d102      	bne.n	41ba <__aeabi_dmul+0x222>
    41b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    41b8:	d113      	bne.n	41e2 <__aeabi_dmul+0x24a>
    41ba:	ea95 0f0c 	teq	r5, ip
    41be:	d105      	bne.n	41cc <__aeabi_dmul+0x234>
    41c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    41c4:	bf1c      	itt	ne
    41c6:	4610      	movne	r0, r2
    41c8:	4619      	movne	r1, r3
    41ca:	d10a      	bne.n	41e2 <__aeabi_dmul+0x24a>
    41cc:	ea81 0103 	eor.w	r1, r1, r3
    41d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    41d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    41d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    41dc:	f04f 0000 	mov.w	r0, #0
    41e0:	bd70      	pop	{r4, r5, r6, pc}
    41e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    41e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    41ea:	bd70      	pop	{r4, r5, r6, pc}

000041ec <__aeabi_ddiv>:
    41ec:	b570      	push	{r4, r5, r6, lr}
    41ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
    41f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    41f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    41fa:	bf1d      	ittte	ne
    41fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    4200:	ea94 0f0c 	teqne	r4, ip
    4204:	ea95 0f0c 	teqne	r5, ip
    4208:	f000 f8a7 	bleq	435a <__aeabi_ddiv+0x16e>
    420c:	eba4 0405 	sub.w	r4, r4, r5
    4210:	ea81 0e03 	eor.w	lr, r1, r3
    4214:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    4218:	ea4f 3101 	mov.w	r1, r1, lsl #12
    421c:	f000 8088 	beq.w	4330 <__aeabi_ddiv+0x144>
    4220:	ea4f 3303 	mov.w	r3, r3, lsl #12
    4224:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    4228:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    422c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    4230:	ea4f 2202 	mov.w	r2, r2, lsl #8
    4234:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    4238:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    423c:	ea4f 2600 	mov.w	r6, r0, lsl #8
    4240:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    4244:	429d      	cmp	r5, r3
    4246:	bf08      	it	eq
    4248:	4296      	cmpeq	r6, r2
    424a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    424e:	f504 7440 	add.w	r4, r4, #768	; 0x300
    4252:	d202      	bcs.n	425a <__aeabi_ddiv+0x6e>
    4254:	085b      	lsrs	r3, r3, #1
    4256:	ea4f 0232 	mov.w	r2, r2, rrx
    425a:	1ab6      	subs	r6, r6, r2
    425c:	eb65 0503 	sbc.w	r5, r5, r3
    4260:	085b      	lsrs	r3, r3, #1
    4262:	ea4f 0232 	mov.w	r2, r2, rrx
    4266:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    426a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    426e:	ebb6 0e02 	subs.w	lr, r6, r2
    4272:	eb75 0e03 	sbcs.w	lr, r5, r3
    4276:	bf22      	ittt	cs
    4278:	1ab6      	subcs	r6, r6, r2
    427a:	4675      	movcs	r5, lr
    427c:	ea40 000c 	orrcs.w	r0, r0, ip
    4280:	085b      	lsrs	r3, r3, #1
    4282:	ea4f 0232 	mov.w	r2, r2, rrx
    4286:	ebb6 0e02 	subs.w	lr, r6, r2
    428a:	eb75 0e03 	sbcs.w	lr, r5, r3
    428e:	bf22      	ittt	cs
    4290:	1ab6      	subcs	r6, r6, r2
    4292:	4675      	movcs	r5, lr
    4294:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    4298:	085b      	lsrs	r3, r3, #1
    429a:	ea4f 0232 	mov.w	r2, r2, rrx
    429e:	ebb6 0e02 	subs.w	lr, r6, r2
    42a2:	eb75 0e03 	sbcs.w	lr, r5, r3
    42a6:	bf22      	ittt	cs
    42a8:	1ab6      	subcs	r6, r6, r2
    42aa:	4675      	movcs	r5, lr
    42ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    42b0:	085b      	lsrs	r3, r3, #1
    42b2:	ea4f 0232 	mov.w	r2, r2, rrx
    42b6:	ebb6 0e02 	subs.w	lr, r6, r2
    42ba:	eb75 0e03 	sbcs.w	lr, r5, r3
    42be:	bf22      	ittt	cs
    42c0:	1ab6      	subcs	r6, r6, r2
    42c2:	4675      	movcs	r5, lr
    42c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    42c8:	ea55 0e06 	orrs.w	lr, r5, r6
    42cc:	d018      	beq.n	4300 <__aeabi_ddiv+0x114>
    42ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
    42d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    42d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
    42da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    42de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    42e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    42e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    42ea:	d1c0      	bne.n	426e <__aeabi_ddiv+0x82>
    42ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    42f0:	d10b      	bne.n	430a <__aeabi_ddiv+0x11e>
    42f2:	ea41 0100 	orr.w	r1, r1, r0
    42f6:	f04f 0000 	mov.w	r0, #0
    42fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    42fe:	e7b6      	b.n	426e <__aeabi_ddiv+0x82>
    4300:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    4304:	bf04      	itt	eq
    4306:	4301      	orreq	r1, r0
    4308:	2000      	moveq	r0, #0
    430a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    430e:	bf88      	it	hi
    4310:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    4314:	f63f aeaf 	bhi.w	4076 <__aeabi_dmul+0xde>
    4318:	ebb5 0c03 	subs.w	ip, r5, r3
    431c:	bf04      	itt	eq
    431e:	ebb6 0c02 	subseq.w	ip, r6, r2
    4322:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    4326:	f150 0000 	adcs.w	r0, r0, #0
    432a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    432e:	bd70      	pop	{r4, r5, r6, pc}
    4330:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    4334:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    4338:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    433c:	bfc2      	ittt	gt
    433e:	ebd4 050c 	rsbsgt	r5, r4, ip
    4342:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    4346:	bd70      	popgt	{r4, r5, r6, pc}
    4348:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    434c:	f04f 0e00 	mov.w	lr, #0
    4350:	3c01      	subs	r4, #1
    4352:	e690      	b.n	4076 <__aeabi_dmul+0xde>
    4354:	ea45 0e06 	orr.w	lr, r5, r6
    4358:	e68d      	b.n	4076 <__aeabi_dmul+0xde>
    435a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    435e:	ea94 0f0c 	teq	r4, ip
    4362:	bf08      	it	eq
    4364:	ea95 0f0c 	teqeq	r5, ip
    4368:	f43f af3b 	beq.w	41e2 <__aeabi_dmul+0x24a>
    436c:	ea94 0f0c 	teq	r4, ip
    4370:	d10a      	bne.n	4388 <__aeabi_ddiv+0x19c>
    4372:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    4376:	f47f af34 	bne.w	41e2 <__aeabi_dmul+0x24a>
    437a:	ea95 0f0c 	teq	r5, ip
    437e:	f47f af25 	bne.w	41cc <__aeabi_dmul+0x234>
    4382:	4610      	mov	r0, r2
    4384:	4619      	mov	r1, r3
    4386:	e72c      	b.n	41e2 <__aeabi_dmul+0x24a>
    4388:	ea95 0f0c 	teq	r5, ip
    438c:	d106      	bne.n	439c <__aeabi_ddiv+0x1b0>
    438e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    4392:	f43f aefd 	beq.w	4190 <__aeabi_dmul+0x1f8>
    4396:	4610      	mov	r0, r2
    4398:	4619      	mov	r1, r3
    439a:	e722      	b.n	41e2 <__aeabi_dmul+0x24a>
    439c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    43a0:	bf18      	it	ne
    43a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    43a6:	f47f aec5 	bne.w	4134 <__aeabi_dmul+0x19c>
    43aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    43ae:	f47f af0d 	bne.w	41cc <__aeabi_dmul+0x234>
    43b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    43b6:	f47f aeeb 	bne.w	4190 <__aeabi_dmul+0x1f8>
    43ba:	e712      	b.n	41e2 <__aeabi_dmul+0x24a>

000043bc <__gedf2>:
    43bc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    43c0:	e006      	b.n	43d0 <__cmpdf2+0x4>
    43c2:	bf00      	nop

000043c4 <__ledf2>:
    43c4:	f04f 0c01 	mov.w	ip, #1
    43c8:	e002      	b.n	43d0 <__cmpdf2+0x4>
    43ca:	bf00      	nop

000043cc <__cmpdf2>:
    43cc:	f04f 0c01 	mov.w	ip, #1
    43d0:	f84d cd04 	str.w	ip, [sp, #-4]!
    43d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    43d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    43dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    43e0:	bf18      	it	ne
    43e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    43e6:	d01b      	beq.n	4420 <__cmpdf2+0x54>
    43e8:	b001      	add	sp, #4
    43ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    43ee:	bf0c      	ite	eq
    43f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    43f4:	ea91 0f03 	teqne	r1, r3
    43f8:	bf02      	ittt	eq
    43fa:	ea90 0f02 	teqeq	r0, r2
    43fe:	2000      	moveq	r0, #0
    4400:	4770      	bxeq	lr
    4402:	f110 0f00 	cmn.w	r0, #0
    4406:	ea91 0f03 	teq	r1, r3
    440a:	bf58      	it	pl
    440c:	4299      	cmppl	r1, r3
    440e:	bf08      	it	eq
    4410:	4290      	cmpeq	r0, r2
    4412:	bf2c      	ite	cs
    4414:	17d8      	asrcs	r0, r3, #31
    4416:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    441a:	f040 0001 	orr.w	r0, r0, #1
    441e:	4770      	bx	lr
    4420:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    4424:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    4428:	d102      	bne.n	4430 <__cmpdf2+0x64>
    442a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    442e:	d107      	bne.n	4440 <__cmpdf2+0x74>
    4430:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    4434:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    4438:	d1d6      	bne.n	43e8 <__cmpdf2+0x1c>
    443a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    443e:	d0d3      	beq.n	43e8 <__cmpdf2+0x1c>
    4440:	f85d 0b04 	ldr.w	r0, [sp], #4
    4444:	4770      	bx	lr
    4446:	bf00      	nop

00004448 <__aeabi_cdrcmple>:
    4448:	4684      	mov	ip, r0
    444a:	4610      	mov	r0, r2
    444c:	4662      	mov	r2, ip
    444e:	468c      	mov	ip, r1
    4450:	4619      	mov	r1, r3
    4452:	4663      	mov	r3, ip
    4454:	e000      	b.n	4458 <__aeabi_cdcmpeq>
    4456:	bf00      	nop

00004458 <__aeabi_cdcmpeq>:
    4458:	b501      	push	{r0, lr}
    445a:	f7ff ffb7 	bl	43cc <__cmpdf2>
    445e:	2800      	cmp	r0, #0
    4460:	bf48      	it	mi
    4462:	f110 0f00 	cmnmi.w	r0, #0
    4466:	bd01      	pop	{r0, pc}

00004468 <__aeabi_dcmpeq>:
    4468:	f84d ed08 	str.w	lr, [sp, #-8]!
    446c:	f7ff fff4 	bl	4458 <__aeabi_cdcmpeq>
    4470:	bf0c      	ite	eq
    4472:	2001      	moveq	r0, #1
    4474:	2000      	movne	r0, #0
    4476:	f85d fb08 	ldr.w	pc, [sp], #8
    447a:	bf00      	nop

0000447c <__aeabi_dcmplt>:
    447c:	f84d ed08 	str.w	lr, [sp, #-8]!
    4480:	f7ff ffea 	bl	4458 <__aeabi_cdcmpeq>
    4484:	bf34      	ite	cc
    4486:	2001      	movcc	r0, #1
    4488:	2000      	movcs	r0, #0
    448a:	f85d fb08 	ldr.w	pc, [sp], #8
    448e:	bf00      	nop

00004490 <__aeabi_dcmple>:
    4490:	f84d ed08 	str.w	lr, [sp, #-8]!
    4494:	f7ff ffe0 	bl	4458 <__aeabi_cdcmpeq>
    4498:	bf94      	ite	ls
    449a:	2001      	movls	r0, #1
    449c:	2000      	movhi	r0, #0
    449e:	f85d fb08 	ldr.w	pc, [sp], #8
    44a2:	bf00      	nop

000044a4 <__aeabi_dcmpge>:
    44a4:	f84d ed08 	str.w	lr, [sp, #-8]!
    44a8:	f7ff ffce 	bl	4448 <__aeabi_cdrcmple>
    44ac:	bf94      	ite	ls
    44ae:	2001      	movls	r0, #1
    44b0:	2000      	movhi	r0, #0
    44b2:	f85d fb08 	ldr.w	pc, [sp], #8
    44b6:	bf00      	nop

000044b8 <__aeabi_dcmpgt>:
    44b8:	f84d ed08 	str.w	lr, [sp, #-8]!
    44bc:	f7ff ffc4 	bl	4448 <__aeabi_cdrcmple>
    44c0:	bf34      	ite	cc
    44c2:	2001      	movcc	r0, #1
    44c4:	2000      	movcs	r0, #0
    44c6:	f85d fb08 	ldr.w	pc, [sp], #8
    44ca:	bf00      	nop

000044cc <__aeabi_dcmpun>:
    44cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    44d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    44d4:	d102      	bne.n	44dc <__aeabi_dcmpun+0x10>
    44d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    44da:	d10a      	bne.n	44f2 <__aeabi_dcmpun+0x26>
    44dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    44e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    44e4:	d102      	bne.n	44ec <__aeabi_dcmpun+0x20>
    44e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    44ea:	d102      	bne.n	44f2 <__aeabi_dcmpun+0x26>
    44ec:	f04f 0000 	mov.w	r0, #0
    44f0:	4770      	bx	lr
    44f2:	f04f 0001 	mov.w	r0, #1
    44f6:	4770      	bx	lr

000044f8 <__aeabi_atexit>:
    44f8:	460b      	mov	r3, r1
    44fa:	4601      	mov	r1, r0
    44fc:	4618      	mov	r0, r3
    44fe:	f000 b801 	b.w	4504 <__cxa_atexit>
    4502:	bf00      	nop

00004504 <__cxa_atexit>:
    4504:	4613      	mov	r3, r2
    4506:	460a      	mov	r2, r1
    4508:	4601      	mov	r1, r0
    450a:	2002      	movs	r0, #2
    450c:	f000 be9c 	b.w	5248 <__register_exitproc>

00004510 <__errno>:
    4510:	4b01      	ldr	r3, [pc, #4]	; (4518 <__errno+0x8>)
    4512:	6818      	ldr	r0, [r3, #0]
    4514:	4770      	bx	lr
    4516:	bf00      	nop
    4518:	1fff92a8 	.word	0x1fff92a8

0000451c <__libc_init_array>:
    451c:	b570      	push	{r4, r5, r6, lr}
    451e:	4e0f      	ldr	r6, [pc, #60]	; (455c <__libc_init_array+0x40>)
    4520:	4d0f      	ldr	r5, [pc, #60]	; (4560 <__libc_init_array+0x44>)
    4522:	1b76      	subs	r6, r6, r5
    4524:	10b6      	asrs	r6, r6, #2
    4526:	bf18      	it	ne
    4528:	2400      	movne	r4, #0
    452a:	d005      	beq.n	4538 <__libc_init_array+0x1c>
    452c:	3401      	adds	r4, #1
    452e:	f855 3b04 	ldr.w	r3, [r5], #4
    4532:	4798      	blx	r3
    4534:	42a6      	cmp	r6, r4
    4536:	d1f9      	bne.n	452c <__libc_init_array+0x10>
    4538:	4e0a      	ldr	r6, [pc, #40]	; (4564 <__libc_init_array+0x48>)
    453a:	4d0b      	ldr	r5, [pc, #44]	; (4568 <__libc_init_array+0x4c>)
    453c:	1b76      	subs	r6, r6, r5
    453e:	f004 fd4d 	bl	8fdc <_init>
    4542:	10b6      	asrs	r6, r6, #2
    4544:	bf18      	it	ne
    4546:	2400      	movne	r4, #0
    4548:	d006      	beq.n	4558 <__libc_init_array+0x3c>
    454a:	3401      	adds	r4, #1
    454c:	f855 3b04 	ldr.w	r3, [r5], #4
    4550:	4798      	blx	r3
    4552:	42a6      	cmp	r6, r4
    4554:	d1f9      	bne.n	454a <__libc_init_array+0x2e>
    4556:	bd70      	pop	{r4, r5, r6, pc}
    4558:	bd70      	pop	{r4, r5, r6, pc}
    455a:	bf00      	nop
    455c:	00008fe8 	.word	0x00008fe8
    4560:	00008fe8 	.word	0x00008fe8
    4564:	00008ff8 	.word	0x00008ff8
    4568:	00008fe8 	.word	0x00008fe8

0000456c <malloc>:
    456c:	4b02      	ldr	r3, [pc, #8]	; (4578 <malloc+0xc>)
    456e:	4601      	mov	r1, r0
    4570:	6818      	ldr	r0, [r3, #0]
    4572:	f000 b80b 	b.w	458c <_malloc_r>
    4576:	bf00      	nop
    4578:	1fff92a8 	.word	0x1fff92a8

0000457c <free>:
    457c:	4b02      	ldr	r3, [pc, #8]	; (4588 <free+0xc>)
    457e:	4601      	mov	r1, r0
    4580:	6818      	ldr	r0, [r3, #0]
    4582:	f000 bf25 	b.w	53d0 <_free_r>
    4586:	bf00      	nop
    4588:	1fff92a8 	.word	0x1fff92a8

0000458c <_malloc_r>:
    458c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4590:	f101 050b 	add.w	r5, r1, #11
    4594:	2d16      	cmp	r5, #22
    4596:	b083      	sub	sp, #12
    4598:	4606      	mov	r6, r0
    459a:	f240 809f 	bls.w	46dc <_malloc_r+0x150>
    459e:	f035 0507 	bics.w	r5, r5, #7
    45a2:	f100 80bf 	bmi.w	4724 <_malloc_r+0x198>
    45a6:	42a9      	cmp	r1, r5
    45a8:	f200 80bc 	bhi.w	4724 <_malloc_r+0x198>
    45ac:	f000 fb6e 	bl	4c8c <__malloc_lock>
    45b0:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
    45b4:	f0c0 829c 	bcc.w	4af0 <_malloc_r+0x564>
    45b8:	0a6b      	lsrs	r3, r5, #9
    45ba:	f000 80ba 	beq.w	4732 <_malloc_r+0x1a6>
    45be:	2b04      	cmp	r3, #4
    45c0:	f200 8183 	bhi.w	48ca <_malloc_r+0x33e>
    45c4:	09a8      	lsrs	r0, r5, #6
    45c6:	f100 0e39 	add.w	lr, r0, #57	; 0x39
    45ca:	ea4f 034e 	mov.w	r3, lr, lsl #1
    45ce:	3038      	adds	r0, #56	; 0x38
    45d0:	4fc4      	ldr	r7, [pc, #784]	; (48e4 <_malloc_r+0x358>)
    45d2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    45d6:	f1a3 0108 	sub.w	r1, r3, #8
    45da:	685c      	ldr	r4, [r3, #4]
    45dc:	42a1      	cmp	r1, r4
    45de:	d107      	bne.n	45f0 <_malloc_r+0x64>
    45e0:	e0ac      	b.n	473c <_malloc_r+0x1b0>
    45e2:	2a00      	cmp	r2, #0
    45e4:	f280 80ac 	bge.w	4740 <_malloc_r+0x1b4>
    45e8:	68e4      	ldr	r4, [r4, #12]
    45ea:	42a1      	cmp	r1, r4
    45ec:	f000 80a6 	beq.w	473c <_malloc_r+0x1b0>
    45f0:	6863      	ldr	r3, [r4, #4]
    45f2:	f023 0303 	bic.w	r3, r3, #3
    45f6:	1b5a      	subs	r2, r3, r5
    45f8:	2a0f      	cmp	r2, #15
    45fa:	ddf2      	ble.n	45e2 <_malloc_r+0x56>
    45fc:	49b9      	ldr	r1, [pc, #740]	; (48e4 <_malloc_r+0x358>)
    45fe:	693c      	ldr	r4, [r7, #16]
    4600:	f101 0e08 	add.w	lr, r1, #8
    4604:	4574      	cmp	r4, lr
    4606:	f000 81b3 	beq.w	4970 <_malloc_r+0x3e4>
    460a:	6863      	ldr	r3, [r4, #4]
    460c:	f023 0303 	bic.w	r3, r3, #3
    4610:	1b5a      	subs	r2, r3, r5
    4612:	2a0f      	cmp	r2, #15
    4614:	f300 8199 	bgt.w	494a <_malloc_r+0x3be>
    4618:	2a00      	cmp	r2, #0
    461a:	f8c1 e014 	str.w	lr, [r1, #20]
    461e:	f8c1 e010 	str.w	lr, [r1, #16]
    4622:	f280 809e 	bge.w	4762 <_malloc_r+0x1d6>
    4626:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    462a:	f080 8167 	bcs.w	48fc <_malloc_r+0x370>
    462e:	08db      	lsrs	r3, r3, #3
    4630:	f103 0c01 	add.w	ip, r3, #1
    4634:	2201      	movs	r2, #1
    4636:	109b      	asrs	r3, r3, #2
    4638:	fa02 f303 	lsl.w	r3, r2, r3
    463c:	684a      	ldr	r2, [r1, #4]
    463e:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
    4642:	f8c4 8008 	str.w	r8, [r4, #8]
    4646:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
    464a:	431a      	orrs	r2, r3
    464c:	f1a9 0308 	sub.w	r3, r9, #8
    4650:	60e3      	str	r3, [r4, #12]
    4652:	604a      	str	r2, [r1, #4]
    4654:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
    4658:	f8c8 400c 	str.w	r4, [r8, #12]
    465c:	1083      	asrs	r3, r0, #2
    465e:	2401      	movs	r4, #1
    4660:	409c      	lsls	r4, r3
    4662:	4294      	cmp	r4, r2
    4664:	f200 808a 	bhi.w	477c <_malloc_r+0x1f0>
    4668:	4214      	tst	r4, r2
    466a:	d106      	bne.n	467a <_malloc_r+0xee>
    466c:	f020 0003 	bic.w	r0, r0, #3
    4670:	0064      	lsls	r4, r4, #1
    4672:	4214      	tst	r4, r2
    4674:	f100 0004 	add.w	r0, r0, #4
    4678:	d0fa      	beq.n	4670 <_malloc_r+0xe4>
    467a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    467e:	46cc      	mov	ip, r9
    4680:	4680      	mov	r8, r0
    4682:	f8dc 100c 	ldr.w	r1, [ip, #12]
    4686:	458c      	cmp	ip, r1
    4688:	d107      	bne.n	469a <_malloc_r+0x10e>
    468a:	e173      	b.n	4974 <_malloc_r+0x3e8>
    468c:	2a00      	cmp	r2, #0
    468e:	f280 8181 	bge.w	4994 <_malloc_r+0x408>
    4692:	68c9      	ldr	r1, [r1, #12]
    4694:	458c      	cmp	ip, r1
    4696:	f000 816d 	beq.w	4974 <_malloc_r+0x3e8>
    469a:	684b      	ldr	r3, [r1, #4]
    469c:	f023 0303 	bic.w	r3, r3, #3
    46a0:	1b5a      	subs	r2, r3, r5
    46a2:	2a0f      	cmp	r2, #15
    46a4:	ddf2      	ble.n	468c <_malloc_r+0x100>
    46a6:	460c      	mov	r4, r1
    46a8:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    46ac:	f854 8f08 	ldr.w	r8, [r4, #8]!
    46b0:	194b      	adds	r3, r1, r5
    46b2:	f045 0501 	orr.w	r5, r5, #1
    46b6:	604d      	str	r5, [r1, #4]
    46b8:	f042 0101 	orr.w	r1, r2, #1
    46bc:	f8c8 c00c 	str.w	ip, [r8, #12]
    46c0:	4630      	mov	r0, r6
    46c2:	f8cc 8008 	str.w	r8, [ip, #8]
    46c6:	617b      	str	r3, [r7, #20]
    46c8:	613b      	str	r3, [r7, #16]
    46ca:	f8c3 e00c 	str.w	lr, [r3, #12]
    46ce:	f8c3 e008 	str.w	lr, [r3, #8]
    46d2:	6059      	str	r1, [r3, #4]
    46d4:	509a      	str	r2, [r3, r2]
    46d6:	f000 fadb 	bl	4c90 <__malloc_unlock>
    46da:	e01f      	b.n	471c <_malloc_r+0x190>
    46dc:	2910      	cmp	r1, #16
    46de:	d821      	bhi.n	4724 <_malloc_r+0x198>
    46e0:	f000 fad4 	bl	4c8c <__malloc_lock>
    46e4:	2510      	movs	r5, #16
    46e6:	2306      	movs	r3, #6
    46e8:	2002      	movs	r0, #2
    46ea:	4f7e      	ldr	r7, [pc, #504]	; (48e4 <_malloc_r+0x358>)
    46ec:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    46f0:	f1a3 0208 	sub.w	r2, r3, #8
    46f4:	685c      	ldr	r4, [r3, #4]
    46f6:	4294      	cmp	r4, r2
    46f8:	f000 8145 	beq.w	4986 <_malloc_r+0x3fa>
    46fc:	6863      	ldr	r3, [r4, #4]
    46fe:	68e1      	ldr	r1, [r4, #12]
    4700:	68a5      	ldr	r5, [r4, #8]
    4702:	f023 0303 	bic.w	r3, r3, #3
    4706:	4423      	add	r3, r4
    4708:	4630      	mov	r0, r6
    470a:	685a      	ldr	r2, [r3, #4]
    470c:	60e9      	str	r1, [r5, #12]
    470e:	f042 0201 	orr.w	r2, r2, #1
    4712:	608d      	str	r5, [r1, #8]
    4714:	605a      	str	r2, [r3, #4]
    4716:	f000 fabb 	bl	4c90 <__malloc_unlock>
    471a:	3408      	adds	r4, #8
    471c:	4620      	mov	r0, r4
    471e:	b003      	add	sp, #12
    4720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4724:	2400      	movs	r4, #0
    4726:	230c      	movs	r3, #12
    4728:	4620      	mov	r0, r4
    472a:	6033      	str	r3, [r6, #0]
    472c:	b003      	add	sp, #12
    472e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4732:	2380      	movs	r3, #128	; 0x80
    4734:	f04f 0e40 	mov.w	lr, #64	; 0x40
    4738:	203f      	movs	r0, #63	; 0x3f
    473a:	e749      	b.n	45d0 <_malloc_r+0x44>
    473c:	4670      	mov	r0, lr
    473e:	e75d      	b.n	45fc <_malloc_r+0x70>
    4740:	4423      	add	r3, r4
    4742:	68e1      	ldr	r1, [r4, #12]
    4744:	685a      	ldr	r2, [r3, #4]
    4746:	68a5      	ldr	r5, [r4, #8]
    4748:	f042 0201 	orr.w	r2, r2, #1
    474c:	60e9      	str	r1, [r5, #12]
    474e:	4630      	mov	r0, r6
    4750:	608d      	str	r5, [r1, #8]
    4752:	605a      	str	r2, [r3, #4]
    4754:	f000 fa9c 	bl	4c90 <__malloc_unlock>
    4758:	3408      	adds	r4, #8
    475a:	4620      	mov	r0, r4
    475c:	b003      	add	sp, #12
    475e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4762:	4423      	add	r3, r4
    4764:	4630      	mov	r0, r6
    4766:	685a      	ldr	r2, [r3, #4]
    4768:	f042 0201 	orr.w	r2, r2, #1
    476c:	605a      	str	r2, [r3, #4]
    476e:	f000 fa8f 	bl	4c90 <__malloc_unlock>
    4772:	3408      	adds	r4, #8
    4774:	4620      	mov	r0, r4
    4776:	b003      	add	sp, #12
    4778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    477c:	68bc      	ldr	r4, [r7, #8]
    477e:	6863      	ldr	r3, [r4, #4]
    4780:	f023 0803 	bic.w	r8, r3, #3
    4784:	45a8      	cmp	r8, r5
    4786:	d304      	bcc.n	4792 <_malloc_r+0x206>
    4788:	ebc5 0308 	rsb	r3, r5, r8
    478c:	2b0f      	cmp	r3, #15
    478e:	f300 808c 	bgt.w	48aa <_malloc_r+0x31e>
    4792:	4b55      	ldr	r3, [pc, #340]	; (48e8 <_malloc_r+0x35c>)
    4794:	f8df 9160 	ldr.w	r9, [pc, #352]	; 48f8 <_malloc_r+0x36c>
    4798:	681a      	ldr	r2, [r3, #0]
    479a:	f8d9 3000 	ldr.w	r3, [r9]
    479e:	3301      	adds	r3, #1
    47a0:	442a      	add	r2, r5
    47a2:	eb04 0a08 	add.w	sl, r4, r8
    47a6:	f000 8160 	beq.w	4a6a <_malloc_r+0x4de>
    47aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    47ae:	320f      	adds	r2, #15
    47b0:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
    47b4:	f022 020f 	bic.w	r2, r2, #15
    47b8:	4611      	mov	r1, r2
    47ba:	4630      	mov	r0, r6
    47bc:	9201      	str	r2, [sp, #4]
    47be:	f000 fc59 	bl	5074 <_sbrk_r>
    47c2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    47c6:	4683      	mov	fp, r0
    47c8:	9a01      	ldr	r2, [sp, #4]
    47ca:	f000 8158 	beq.w	4a7e <_malloc_r+0x4f2>
    47ce:	4582      	cmp	sl, r0
    47d0:	f200 80fc 	bhi.w	49cc <_malloc_r+0x440>
    47d4:	4b45      	ldr	r3, [pc, #276]	; (48ec <_malloc_r+0x360>)
    47d6:	6819      	ldr	r1, [r3, #0]
    47d8:	45da      	cmp	sl, fp
    47da:	4411      	add	r1, r2
    47dc:	6019      	str	r1, [r3, #0]
    47de:	f000 8153 	beq.w	4a88 <_malloc_r+0x4fc>
    47e2:	f8d9 0000 	ldr.w	r0, [r9]
    47e6:	f8df e110 	ldr.w	lr, [pc, #272]	; 48f8 <_malloc_r+0x36c>
    47ea:	3001      	adds	r0, #1
    47ec:	bf1b      	ittet	ne
    47ee:	ebca 0a0b 	rsbne	sl, sl, fp
    47f2:	4451      	addne	r1, sl
    47f4:	f8ce b000 	streq.w	fp, [lr]
    47f8:	6019      	strne	r1, [r3, #0]
    47fa:	f01b 0107 	ands.w	r1, fp, #7
    47fe:	f000 8117 	beq.w	4a30 <_malloc_r+0x4a4>
    4802:	f1c1 0008 	rsb	r0, r1, #8
    4806:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
    480a:	4483      	add	fp, r0
    480c:	3108      	adds	r1, #8
    480e:	445a      	add	r2, fp
    4810:	f3c2 020b 	ubfx	r2, r2, #0, #12
    4814:	ebc2 0901 	rsb	r9, r2, r1
    4818:	4649      	mov	r1, r9
    481a:	4630      	mov	r0, r6
    481c:	9301      	str	r3, [sp, #4]
    481e:	f000 fc29 	bl	5074 <_sbrk_r>
    4822:	1c43      	adds	r3, r0, #1
    4824:	9b01      	ldr	r3, [sp, #4]
    4826:	f000 813f 	beq.w	4aa8 <_malloc_r+0x51c>
    482a:	ebcb 0200 	rsb	r2, fp, r0
    482e:	444a      	add	r2, r9
    4830:	f042 0201 	orr.w	r2, r2, #1
    4834:	6819      	ldr	r1, [r3, #0]
    4836:	f8c7 b008 	str.w	fp, [r7, #8]
    483a:	4449      	add	r1, r9
    483c:	42bc      	cmp	r4, r7
    483e:	f8cb 2004 	str.w	r2, [fp, #4]
    4842:	6019      	str	r1, [r3, #0]
    4844:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 48ec <_malloc_r+0x360>
    4848:	d016      	beq.n	4878 <_malloc_r+0x2ec>
    484a:	f1b8 0f0f 	cmp.w	r8, #15
    484e:	f240 80fd 	bls.w	4a4c <_malloc_r+0x4c0>
    4852:	6862      	ldr	r2, [r4, #4]
    4854:	f1a8 030c 	sub.w	r3, r8, #12
    4858:	f023 0307 	bic.w	r3, r3, #7
    485c:	18e0      	adds	r0, r4, r3
    485e:	f002 0201 	and.w	r2, r2, #1
    4862:	f04f 0e05 	mov.w	lr, #5
    4866:	431a      	orrs	r2, r3
    4868:	2b0f      	cmp	r3, #15
    486a:	6062      	str	r2, [r4, #4]
    486c:	f8c0 e004 	str.w	lr, [r0, #4]
    4870:	f8c0 e008 	str.w	lr, [r0, #8]
    4874:	f200 811c 	bhi.w	4ab0 <_malloc_r+0x524>
    4878:	4b1d      	ldr	r3, [pc, #116]	; (48f0 <_malloc_r+0x364>)
    487a:	68bc      	ldr	r4, [r7, #8]
    487c:	681a      	ldr	r2, [r3, #0]
    487e:	4291      	cmp	r1, r2
    4880:	bf88      	it	hi
    4882:	6019      	strhi	r1, [r3, #0]
    4884:	4b1b      	ldr	r3, [pc, #108]	; (48f4 <_malloc_r+0x368>)
    4886:	681a      	ldr	r2, [r3, #0]
    4888:	4291      	cmp	r1, r2
    488a:	6862      	ldr	r2, [r4, #4]
    488c:	bf88      	it	hi
    488e:	6019      	strhi	r1, [r3, #0]
    4890:	f022 0203 	bic.w	r2, r2, #3
    4894:	4295      	cmp	r5, r2
    4896:	eba2 0305 	sub.w	r3, r2, r5
    489a:	d801      	bhi.n	48a0 <_malloc_r+0x314>
    489c:	2b0f      	cmp	r3, #15
    489e:	dc04      	bgt.n	48aa <_malloc_r+0x31e>
    48a0:	4630      	mov	r0, r6
    48a2:	f000 f9f5 	bl	4c90 <__malloc_unlock>
    48a6:	2400      	movs	r4, #0
    48a8:	e738      	b.n	471c <_malloc_r+0x190>
    48aa:	1962      	adds	r2, r4, r5
    48ac:	f043 0301 	orr.w	r3, r3, #1
    48b0:	f045 0501 	orr.w	r5, r5, #1
    48b4:	6065      	str	r5, [r4, #4]
    48b6:	4630      	mov	r0, r6
    48b8:	60ba      	str	r2, [r7, #8]
    48ba:	6053      	str	r3, [r2, #4]
    48bc:	f000 f9e8 	bl	4c90 <__malloc_unlock>
    48c0:	3408      	adds	r4, #8
    48c2:	4620      	mov	r0, r4
    48c4:	b003      	add	sp, #12
    48c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    48ca:	2b14      	cmp	r3, #20
    48cc:	d971      	bls.n	49b2 <_malloc_r+0x426>
    48ce:	2b54      	cmp	r3, #84	; 0x54
    48d0:	f200 80a4 	bhi.w	4a1c <_malloc_r+0x490>
    48d4:	0b28      	lsrs	r0, r5, #12
    48d6:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
    48da:	ea4f 034e 	mov.w	r3, lr, lsl #1
    48de:	306e      	adds	r0, #110	; 0x6e
    48e0:	e676      	b.n	45d0 <_malloc_r+0x44>
    48e2:	bf00      	nop
    48e4:	1fff9418 	.word	0x1fff9418
    48e8:	1fff9bac 	.word	0x1fff9bac
    48ec:	1fff9bb0 	.word	0x1fff9bb0
    48f0:	1fff9ba8 	.word	0x1fff9ba8
    48f4:	1fff9ba4 	.word	0x1fff9ba4
    48f8:	1fff9824 	.word	0x1fff9824
    48fc:	0a5a      	lsrs	r2, r3, #9
    48fe:	2a04      	cmp	r2, #4
    4900:	d95e      	bls.n	49c0 <_malloc_r+0x434>
    4902:	2a14      	cmp	r2, #20
    4904:	f200 80b3 	bhi.w	4a6e <_malloc_r+0x4e2>
    4908:	f102 015c 	add.w	r1, r2, #92	; 0x5c
    490c:	0049      	lsls	r1, r1, #1
    490e:	325b      	adds	r2, #91	; 0x5b
    4910:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
    4914:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
    4918:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 4af8 <_malloc_r+0x56c>
    491c:	f1ac 0c08 	sub.w	ip, ip, #8
    4920:	458c      	cmp	ip, r1
    4922:	f000 8088 	beq.w	4a36 <_malloc_r+0x4aa>
    4926:	684a      	ldr	r2, [r1, #4]
    4928:	f022 0203 	bic.w	r2, r2, #3
    492c:	4293      	cmp	r3, r2
    492e:	d202      	bcs.n	4936 <_malloc_r+0x3aa>
    4930:	6889      	ldr	r1, [r1, #8]
    4932:	458c      	cmp	ip, r1
    4934:	d1f7      	bne.n	4926 <_malloc_r+0x39a>
    4936:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    493a:	687a      	ldr	r2, [r7, #4]
    493c:	f8c4 c00c 	str.w	ip, [r4, #12]
    4940:	60a1      	str	r1, [r4, #8]
    4942:	f8cc 4008 	str.w	r4, [ip, #8]
    4946:	60cc      	str	r4, [r1, #12]
    4948:	e688      	b.n	465c <_malloc_r+0xd0>
    494a:	1963      	adds	r3, r4, r5
    494c:	f042 0701 	orr.w	r7, r2, #1
    4950:	f045 0501 	orr.w	r5, r5, #1
    4954:	6065      	str	r5, [r4, #4]
    4956:	4630      	mov	r0, r6
    4958:	614b      	str	r3, [r1, #20]
    495a:	610b      	str	r3, [r1, #16]
    495c:	f8c3 e00c 	str.w	lr, [r3, #12]
    4960:	f8c3 e008 	str.w	lr, [r3, #8]
    4964:	605f      	str	r7, [r3, #4]
    4966:	509a      	str	r2, [r3, r2]
    4968:	3408      	adds	r4, #8
    496a:	f000 f991 	bl	4c90 <__malloc_unlock>
    496e:	e6d5      	b.n	471c <_malloc_r+0x190>
    4970:	684a      	ldr	r2, [r1, #4]
    4972:	e673      	b.n	465c <_malloc_r+0xd0>
    4974:	f108 0801 	add.w	r8, r8, #1
    4978:	f018 0f03 	tst.w	r8, #3
    497c:	f10c 0c08 	add.w	ip, ip, #8
    4980:	f47f ae7f 	bne.w	4682 <_malloc_r+0xf6>
    4984:	e030      	b.n	49e8 <_malloc_r+0x45c>
    4986:	68dc      	ldr	r4, [r3, #12]
    4988:	42a3      	cmp	r3, r4
    498a:	bf08      	it	eq
    498c:	3002      	addeq	r0, #2
    498e:	f43f ae35 	beq.w	45fc <_malloc_r+0x70>
    4992:	e6b3      	b.n	46fc <_malloc_r+0x170>
    4994:	440b      	add	r3, r1
    4996:	460c      	mov	r4, r1
    4998:	685a      	ldr	r2, [r3, #4]
    499a:	68c9      	ldr	r1, [r1, #12]
    499c:	f854 5f08 	ldr.w	r5, [r4, #8]!
    49a0:	f042 0201 	orr.w	r2, r2, #1
    49a4:	605a      	str	r2, [r3, #4]
    49a6:	4630      	mov	r0, r6
    49a8:	60e9      	str	r1, [r5, #12]
    49aa:	608d      	str	r5, [r1, #8]
    49ac:	f000 f970 	bl	4c90 <__malloc_unlock>
    49b0:	e6b4      	b.n	471c <_malloc_r+0x190>
    49b2:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
    49b6:	f103 005b 	add.w	r0, r3, #91	; 0x5b
    49ba:	ea4f 034e 	mov.w	r3, lr, lsl #1
    49be:	e607      	b.n	45d0 <_malloc_r+0x44>
    49c0:	099a      	lsrs	r2, r3, #6
    49c2:	f102 0139 	add.w	r1, r2, #57	; 0x39
    49c6:	0049      	lsls	r1, r1, #1
    49c8:	3238      	adds	r2, #56	; 0x38
    49ca:	e7a1      	b.n	4910 <_malloc_r+0x384>
    49cc:	42bc      	cmp	r4, r7
    49ce:	4b4a      	ldr	r3, [pc, #296]	; (4af8 <_malloc_r+0x56c>)
    49d0:	f43f af00 	beq.w	47d4 <_malloc_r+0x248>
    49d4:	689c      	ldr	r4, [r3, #8]
    49d6:	6862      	ldr	r2, [r4, #4]
    49d8:	f022 0203 	bic.w	r2, r2, #3
    49dc:	e75a      	b.n	4894 <_malloc_r+0x308>
    49de:	f859 3908 	ldr.w	r3, [r9], #-8
    49e2:	4599      	cmp	r9, r3
    49e4:	f040 8082 	bne.w	4aec <_malloc_r+0x560>
    49e8:	f010 0f03 	tst.w	r0, #3
    49ec:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
    49f0:	d1f5      	bne.n	49de <_malloc_r+0x452>
    49f2:	687b      	ldr	r3, [r7, #4]
    49f4:	ea23 0304 	bic.w	r3, r3, r4
    49f8:	607b      	str	r3, [r7, #4]
    49fa:	0064      	lsls	r4, r4, #1
    49fc:	429c      	cmp	r4, r3
    49fe:	f63f aebd 	bhi.w	477c <_malloc_r+0x1f0>
    4a02:	2c00      	cmp	r4, #0
    4a04:	f43f aeba 	beq.w	477c <_malloc_r+0x1f0>
    4a08:	421c      	tst	r4, r3
    4a0a:	4640      	mov	r0, r8
    4a0c:	f47f ae35 	bne.w	467a <_malloc_r+0xee>
    4a10:	0064      	lsls	r4, r4, #1
    4a12:	421c      	tst	r4, r3
    4a14:	f100 0004 	add.w	r0, r0, #4
    4a18:	d0fa      	beq.n	4a10 <_malloc_r+0x484>
    4a1a:	e62e      	b.n	467a <_malloc_r+0xee>
    4a1c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    4a20:	d818      	bhi.n	4a54 <_malloc_r+0x4c8>
    4a22:	0be8      	lsrs	r0, r5, #15
    4a24:	f100 0e78 	add.w	lr, r0, #120	; 0x78
    4a28:	ea4f 034e 	mov.w	r3, lr, lsl #1
    4a2c:	3077      	adds	r0, #119	; 0x77
    4a2e:	e5cf      	b.n	45d0 <_malloc_r+0x44>
    4a30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    4a34:	e6eb      	b.n	480e <_malloc_r+0x282>
    4a36:	2101      	movs	r1, #1
    4a38:	f8d8 3004 	ldr.w	r3, [r8, #4]
    4a3c:	1092      	asrs	r2, r2, #2
    4a3e:	fa01 f202 	lsl.w	r2, r1, r2
    4a42:	431a      	orrs	r2, r3
    4a44:	f8c8 2004 	str.w	r2, [r8, #4]
    4a48:	4661      	mov	r1, ip
    4a4a:	e777      	b.n	493c <_malloc_r+0x3b0>
    4a4c:	2301      	movs	r3, #1
    4a4e:	f8cb 3004 	str.w	r3, [fp, #4]
    4a52:	e725      	b.n	48a0 <_malloc_r+0x314>
    4a54:	f240 5254 	movw	r2, #1364	; 0x554
    4a58:	4293      	cmp	r3, r2
    4a5a:	d820      	bhi.n	4a9e <_malloc_r+0x512>
    4a5c:	0ca8      	lsrs	r0, r5, #18
    4a5e:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
    4a62:	ea4f 034e 	mov.w	r3, lr, lsl #1
    4a66:	307c      	adds	r0, #124	; 0x7c
    4a68:	e5b2      	b.n	45d0 <_malloc_r+0x44>
    4a6a:	3210      	adds	r2, #16
    4a6c:	e6a4      	b.n	47b8 <_malloc_r+0x22c>
    4a6e:	2a54      	cmp	r2, #84	; 0x54
    4a70:	d826      	bhi.n	4ac0 <_malloc_r+0x534>
    4a72:	0b1a      	lsrs	r2, r3, #12
    4a74:	f102 016f 	add.w	r1, r2, #111	; 0x6f
    4a78:	0049      	lsls	r1, r1, #1
    4a7a:	326e      	adds	r2, #110	; 0x6e
    4a7c:	e748      	b.n	4910 <_malloc_r+0x384>
    4a7e:	68bc      	ldr	r4, [r7, #8]
    4a80:	6862      	ldr	r2, [r4, #4]
    4a82:	f022 0203 	bic.w	r2, r2, #3
    4a86:	e705      	b.n	4894 <_malloc_r+0x308>
    4a88:	f3ca 000b 	ubfx	r0, sl, #0, #12
    4a8c:	2800      	cmp	r0, #0
    4a8e:	f47f aea8 	bne.w	47e2 <_malloc_r+0x256>
    4a92:	4442      	add	r2, r8
    4a94:	68bb      	ldr	r3, [r7, #8]
    4a96:	f042 0201 	orr.w	r2, r2, #1
    4a9a:	605a      	str	r2, [r3, #4]
    4a9c:	e6ec      	b.n	4878 <_malloc_r+0x2ec>
    4a9e:	23fe      	movs	r3, #254	; 0xfe
    4aa0:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
    4aa4:	207e      	movs	r0, #126	; 0x7e
    4aa6:	e593      	b.n	45d0 <_malloc_r+0x44>
    4aa8:	2201      	movs	r2, #1
    4aaa:	f04f 0900 	mov.w	r9, #0
    4aae:	e6c1      	b.n	4834 <_malloc_r+0x2a8>
    4ab0:	f104 0108 	add.w	r1, r4, #8
    4ab4:	4630      	mov	r0, r6
    4ab6:	f000 fc8b 	bl	53d0 <_free_r>
    4aba:	f8d9 1000 	ldr.w	r1, [r9]
    4abe:	e6db      	b.n	4878 <_malloc_r+0x2ec>
    4ac0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    4ac4:	d805      	bhi.n	4ad2 <_malloc_r+0x546>
    4ac6:	0bda      	lsrs	r2, r3, #15
    4ac8:	f102 0178 	add.w	r1, r2, #120	; 0x78
    4acc:	0049      	lsls	r1, r1, #1
    4ace:	3277      	adds	r2, #119	; 0x77
    4ad0:	e71e      	b.n	4910 <_malloc_r+0x384>
    4ad2:	f240 5154 	movw	r1, #1364	; 0x554
    4ad6:	428a      	cmp	r2, r1
    4ad8:	d805      	bhi.n	4ae6 <_malloc_r+0x55a>
    4ada:	0c9a      	lsrs	r2, r3, #18
    4adc:	f102 017d 	add.w	r1, r2, #125	; 0x7d
    4ae0:	0049      	lsls	r1, r1, #1
    4ae2:	327c      	adds	r2, #124	; 0x7c
    4ae4:	e714      	b.n	4910 <_malloc_r+0x384>
    4ae6:	21fe      	movs	r1, #254	; 0xfe
    4ae8:	227e      	movs	r2, #126	; 0x7e
    4aea:	e711      	b.n	4910 <_malloc_r+0x384>
    4aec:	687b      	ldr	r3, [r7, #4]
    4aee:	e784      	b.n	49fa <_malloc_r+0x46e>
    4af0:	08e8      	lsrs	r0, r5, #3
    4af2:	1c43      	adds	r3, r0, #1
    4af4:	005b      	lsls	r3, r3, #1
    4af6:	e5f8      	b.n	46ea <_malloc_r+0x15e>
    4af8:	1fff9418 	.word	0x1fff9418

00004afc <__ascii_mbtowc>:
    4afc:	b082      	sub	sp, #8
    4afe:	b149      	cbz	r1, 4b14 <__ascii_mbtowc+0x18>
    4b00:	b15a      	cbz	r2, 4b1a <__ascii_mbtowc+0x1e>
    4b02:	b16b      	cbz	r3, 4b20 <__ascii_mbtowc+0x24>
    4b04:	7813      	ldrb	r3, [r2, #0]
    4b06:	600b      	str	r3, [r1, #0]
    4b08:	7812      	ldrb	r2, [r2, #0]
    4b0a:	1c10      	adds	r0, r2, #0
    4b0c:	bf18      	it	ne
    4b0e:	2001      	movne	r0, #1
    4b10:	b002      	add	sp, #8
    4b12:	4770      	bx	lr
    4b14:	a901      	add	r1, sp, #4
    4b16:	2a00      	cmp	r2, #0
    4b18:	d1f3      	bne.n	4b02 <__ascii_mbtowc+0x6>
    4b1a:	4610      	mov	r0, r2
    4b1c:	b002      	add	sp, #8
    4b1e:	4770      	bx	lr
    4b20:	f06f 0001 	mvn.w	r0, #1
    4b24:	e7f4      	b.n	4b10 <__ascii_mbtowc+0x14>
    4b26:	bf00      	nop

00004b28 <memmove>:
    4b28:	4288      	cmp	r0, r1
    4b2a:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b2c:	d90d      	bls.n	4b4a <memmove+0x22>
    4b2e:	188b      	adds	r3, r1, r2
    4b30:	4298      	cmp	r0, r3
    4b32:	d20a      	bcs.n	4b4a <memmove+0x22>
    4b34:	1881      	adds	r1, r0, r2
    4b36:	2a00      	cmp	r2, #0
    4b38:	d051      	beq.n	4bde <memmove+0xb6>
    4b3a:	1a9a      	subs	r2, r3, r2
    4b3c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    4b40:	f801 4d01 	strb.w	r4, [r1, #-1]!
    4b44:	4293      	cmp	r3, r2
    4b46:	d1f9      	bne.n	4b3c <memmove+0x14>
    4b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4b4a:	2a0f      	cmp	r2, #15
    4b4c:	d948      	bls.n	4be0 <memmove+0xb8>
    4b4e:	ea41 0300 	orr.w	r3, r1, r0
    4b52:	079b      	lsls	r3, r3, #30
    4b54:	d146      	bne.n	4be4 <memmove+0xbc>
    4b56:	f100 0410 	add.w	r4, r0, #16
    4b5a:	f101 0310 	add.w	r3, r1, #16
    4b5e:	4615      	mov	r5, r2
    4b60:	f853 6c10 	ldr.w	r6, [r3, #-16]
    4b64:	f844 6c10 	str.w	r6, [r4, #-16]
    4b68:	f853 6c0c 	ldr.w	r6, [r3, #-12]
    4b6c:	f844 6c0c 	str.w	r6, [r4, #-12]
    4b70:	f853 6c08 	ldr.w	r6, [r3, #-8]
    4b74:	f844 6c08 	str.w	r6, [r4, #-8]
    4b78:	3d10      	subs	r5, #16
    4b7a:	f853 6c04 	ldr.w	r6, [r3, #-4]
    4b7e:	f844 6c04 	str.w	r6, [r4, #-4]
    4b82:	2d0f      	cmp	r5, #15
    4b84:	f103 0310 	add.w	r3, r3, #16
    4b88:	f104 0410 	add.w	r4, r4, #16
    4b8c:	d8e8      	bhi.n	4b60 <memmove+0x38>
    4b8e:	f1a2 0310 	sub.w	r3, r2, #16
    4b92:	f023 030f 	bic.w	r3, r3, #15
    4b96:	f002 0e0f 	and.w	lr, r2, #15
    4b9a:	3310      	adds	r3, #16
    4b9c:	f1be 0f03 	cmp.w	lr, #3
    4ba0:	4419      	add	r1, r3
    4ba2:	4403      	add	r3, r0
    4ba4:	d921      	bls.n	4bea <memmove+0xc2>
    4ba6:	1f1e      	subs	r6, r3, #4
    4ba8:	460d      	mov	r5, r1
    4baa:	4674      	mov	r4, lr
    4bac:	3c04      	subs	r4, #4
    4bae:	f855 7b04 	ldr.w	r7, [r5], #4
    4bb2:	f846 7f04 	str.w	r7, [r6, #4]!
    4bb6:	2c03      	cmp	r4, #3
    4bb8:	d8f8      	bhi.n	4bac <memmove+0x84>
    4bba:	f1ae 0404 	sub.w	r4, lr, #4
    4bbe:	f024 0403 	bic.w	r4, r4, #3
    4bc2:	3404      	adds	r4, #4
    4bc4:	4423      	add	r3, r4
    4bc6:	4421      	add	r1, r4
    4bc8:	f002 0203 	and.w	r2, r2, #3
    4bcc:	b162      	cbz	r2, 4be8 <memmove+0xc0>
    4bce:	3b01      	subs	r3, #1
    4bd0:	440a      	add	r2, r1
    4bd2:	f811 4b01 	ldrb.w	r4, [r1], #1
    4bd6:	f803 4f01 	strb.w	r4, [r3, #1]!
    4bda:	428a      	cmp	r2, r1
    4bdc:	d1f9      	bne.n	4bd2 <memmove+0xaa>
    4bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4be0:	4603      	mov	r3, r0
    4be2:	e7f3      	b.n	4bcc <memmove+0xa4>
    4be4:	4603      	mov	r3, r0
    4be6:	e7f2      	b.n	4bce <memmove+0xa6>
    4be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4bea:	4672      	mov	r2, lr
    4bec:	e7ee      	b.n	4bcc <memmove+0xa4>
    4bee:	bf00      	nop

00004bf0 <memset>:
    4bf0:	b470      	push	{r4, r5, r6}
    4bf2:	0784      	lsls	r4, r0, #30
    4bf4:	d046      	beq.n	4c84 <memset+0x94>
    4bf6:	1e54      	subs	r4, r2, #1
    4bf8:	2a00      	cmp	r2, #0
    4bfa:	d041      	beq.n	4c80 <memset+0x90>
    4bfc:	b2cd      	uxtb	r5, r1
    4bfe:	4603      	mov	r3, r0
    4c00:	e002      	b.n	4c08 <memset+0x18>
    4c02:	1e62      	subs	r2, r4, #1
    4c04:	b3e4      	cbz	r4, 4c80 <memset+0x90>
    4c06:	4614      	mov	r4, r2
    4c08:	f803 5b01 	strb.w	r5, [r3], #1
    4c0c:	079a      	lsls	r2, r3, #30
    4c0e:	d1f8      	bne.n	4c02 <memset+0x12>
    4c10:	2c03      	cmp	r4, #3
    4c12:	d92e      	bls.n	4c72 <memset+0x82>
    4c14:	b2cd      	uxtb	r5, r1
    4c16:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    4c1a:	2c0f      	cmp	r4, #15
    4c1c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    4c20:	d919      	bls.n	4c56 <memset+0x66>
    4c22:	f103 0210 	add.w	r2, r3, #16
    4c26:	4626      	mov	r6, r4
    4c28:	3e10      	subs	r6, #16
    4c2a:	2e0f      	cmp	r6, #15
    4c2c:	f842 5c10 	str.w	r5, [r2, #-16]
    4c30:	f842 5c0c 	str.w	r5, [r2, #-12]
    4c34:	f842 5c08 	str.w	r5, [r2, #-8]
    4c38:	f842 5c04 	str.w	r5, [r2, #-4]
    4c3c:	f102 0210 	add.w	r2, r2, #16
    4c40:	d8f2      	bhi.n	4c28 <memset+0x38>
    4c42:	f1a4 0210 	sub.w	r2, r4, #16
    4c46:	f022 020f 	bic.w	r2, r2, #15
    4c4a:	f004 040f 	and.w	r4, r4, #15
    4c4e:	3210      	adds	r2, #16
    4c50:	2c03      	cmp	r4, #3
    4c52:	4413      	add	r3, r2
    4c54:	d90d      	bls.n	4c72 <memset+0x82>
    4c56:	461e      	mov	r6, r3
    4c58:	4622      	mov	r2, r4
    4c5a:	3a04      	subs	r2, #4
    4c5c:	2a03      	cmp	r2, #3
    4c5e:	f846 5b04 	str.w	r5, [r6], #4
    4c62:	d8fa      	bhi.n	4c5a <memset+0x6a>
    4c64:	1f22      	subs	r2, r4, #4
    4c66:	f022 0203 	bic.w	r2, r2, #3
    4c6a:	3204      	adds	r2, #4
    4c6c:	4413      	add	r3, r2
    4c6e:	f004 0403 	and.w	r4, r4, #3
    4c72:	b12c      	cbz	r4, 4c80 <memset+0x90>
    4c74:	b2c9      	uxtb	r1, r1
    4c76:	441c      	add	r4, r3
    4c78:	f803 1b01 	strb.w	r1, [r3], #1
    4c7c:	42a3      	cmp	r3, r4
    4c7e:	d1fb      	bne.n	4c78 <memset+0x88>
    4c80:	bc70      	pop	{r4, r5, r6}
    4c82:	4770      	bx	lr
    4c84:	4614      	mov	r4, r2
    4c86:	4603      	mov	r3, r0
    4c88:	e7c2      	b.n	4c10 <memset+0x20>
    4c8a:	bf00      	nop

00004c8c <__malloc_lock>:
    4c8c:	4770      	bx	lr
    4c8e:	bf00      	nop

00004c90 <__malloc_unlock>:
    4c90:	4770      	bx	lr
    4c92:	bf00      	nop

00004c94 <_realloc_r>:
    4c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4c98:	4617      	mov	r7, r2
    4c9a:	b083      	sub	sp, #12
    4c9c:	2900      	cmp	r1, #0
    4c9e:	f000 80c1 	beq.w	4e24 <_realloc_r+0x190>
    4ca2:	460e      	mov	r6, r1
    4ca4:	4681      	mov	r9, r0
    4ca6:	f107 050b 	add.w	r5, r7, #11
    4caa:	f7ff ffef 	bl	4c8c <__malloc_lock>
    4cae:	f856 ec04 	ldr.w	lr, [r6, #-4]
    4cb2:	2d16      	cmp	r5, #22
    4cb4:	f02e 0403 	bic.w	r4, lr, #3
    4cb8:	f1a6 0808 	sub.w	r8, r6, #8
    4cbc:	d840      	bhi.n	4d40 <_realloc_r+0xac>
    4cbe:	2210      	movs	r2, #16
    4cc0:	4615      	mov	r5, r2
    4cc2:	42af      	cmp	r7, r5
    4cc4:	d841      	bhi.n	4d4a <_realloc_r+0xb6>
    4cc6:	4294      	cmp	r4, r2
    4cc8:	da75      	bge.n	4db6 <_realloc_r+0x122>
    4cca:	4bc9      	ldr	r3, [pc, #804]	; (4ff0 <_realloc_r+0x35c>)
    4ccc:	6899      	ldr	r1, [r3, #8]
    4cce:	eb08 0004 	add.w	r0, r8, r4
    4cd2:	4288      	cmp	r0, r1
    4cd4:	6841      	ldr	r1, [r0, #4]
    4cd6:	f000 80d9 	beq.w	4e8c <_realloc_r+0x1f8>
    4cda:	f021 0301 	bic.w	r3, r1, #1
    4cde:	4403      	add	r3, r0
    4ce0:	685b      	ldr	r3, [r3, #4]
    4ce2:	07db      	lsls	r3, r3, #31
    4ce4:	d57d      	bpl.n	4de2 <_realloc_r+0x14e>
    4ce6:	f01e 0f01 	tst.w	lr, #1
    4cea:	d035      	beq.n	4d58 <_realloc_r+0xc4>
    4cec:	4639      	mov	r1, r7
    4cee:	4648      	mov	r0, r9
    4cf0:	f7ff fc4c 	bl	458c <_malloc_r>
    4cf4:	4607      	mov	r7, r0
    4cf6:	b1e0      	cbz	r0, 4d32 <_realloc_r+0x9e>
    4cf8:	f856 3c04 	ldr.w	r3, [r6, #-4]
    4cfc:	f023 0301 	bic.w	r3, r3, #1
    4d00:	4443      	add	r3, r8
    4d02:	f1a0 0208 	sub.w	r2, r0, #8
    4d06:	429a      	cmp	r2, r3
    4d08:	f000 8144 	beq.w	4f94 <_realloc_r+0x300>
    4d0c:	1f22      	subs	r2, r4, #4
    4d0e:	2a24      	cmp	r2, #36	; 0x24
    4d10:	f200 8131 	bhi.w	4f76 <_realloc_r+0x2e2>
    4d14:	2a13      	cmp	r2, #19
    4d16:	f200 8104 	bhi.w	4f22 <_realloc_r+0x28e>
    4d1a:	4603      	mov	r3, r0
    4d1c:	4632      	mov	r2, r6
    4d1e:	6811      	ldr	r1, [r2, #0]
    4d20:	6019      	str	r1, [r3, #0]
    4d22:	6851      	ldr	r1, [r2, #4]
    4d24:	6059      	str	r1, [r3, #4]
    4d26:	6892      	ldr	r2, [r2, #8]
    4d28:	609a      	str	r2, [r3, #8]
    4d2a:	4631      	mov	r1, r6
    4d2c:	4648      	mov	r0, r9
    4d2e:	f000 fb4f 	bl	53d0 <_free_r>
    4d32:	4648      	mov	r0, r9
    4d34:	f7ff ffac 	bl	4c90 <__malloc_unlock>
    4d38:	4638      	mov	r0, r7
    4d3a:	b003      	add	sp, #12
    4d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4d40:	f025 0507 	bic.w	r5, r5, #7
    4d44:	2d00      	cmp	r5, #0
    4d46:	462a      	mov	r2, r5
    4d48:	dabb      	bge.n	4cc2 <_realloc_r+0x2e>
    4d4a:	230c      	movs	r3, #12
    4d4c:	2000      	movs	r0, #0
    4d4e:	f8c9 3000 	str.w	r3, [r9]
    4d52:	b003      	add	sp, #12
    4d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4d58:	f856 3c08 	ldr.w	r3, [r6, #-8]
    4d5c:	ebc3 0a08 	rsb	sl, r3, r8
    4d60:	f8da 3004 	ldr.w	r3, [sl, #4]
    4d64:	f023 0c03 	bic.w	ip, r3, #3
    4d68:	eb04 030c 	add.w	r3, r4, ip
    4d6c:	4293      	cmp	r3, r2
    4d6e:	dbbd      	blt.n	4cec <_realloc_r+0x58>
    4d70:	4657      	mov	r7, sl
    4d72:	f8da 100c 	ldr.w	r1, [sl, #12]
    4d76:	f857 0f08 	ldr.w	r0, [r7, #8]!
    4d7a:	1f22      	subs	r2, r4, #4
    4d7c:	2a24      	cmp	r2, #36	; 0x24
    4d7e:	60c1      	str	r1, [r0, #12]
    4d80:	6088      	str	r0, [r1, #8]
    4d82:	f200 8117 	bhi.w	4fb4 <_realloc_r+0x320>
    4d86:	2a13      	cmp	r2, #19
    4d88:	f240 8112 	bls.w	4fb0 <_realloc_r+0x31c>
    4d8c:	6831      	ldr	r1, [r6, #0]
    4d8e:	f8ca 1008 	str.w	r1, [sl, #8]
    4d92:	6871      	ldr	r1, [r6, #4]
    4d94:	f8ca 100c 	str.w	r1, [sl, #12]
    4d98:	2a1b      	cmp	r2, #27
    4d9a:	f200 812b 	bhi.w	4ff4 <_realloc_r+0x360>
    4d9e:	3608      	adds	r6, #8
    4da0:	f10a 0210 	add.w	r2, sl, #16
    4da4:	6831      	ldr	r1, [r6, #0]
    4da6:	6011      	str	r1, [r2, #0]
    4da8:	6871      	ldr	r1, [r6, #4]
    4daa:	6051      	str	r1, [r2, #4]
    4dac:	68b1      	ldr	r1, [r6, #8]
    4dae:	6091      	str	r1, [r2, #8]
    4db0:	463e      	mov	r6, r7
    4db2:	461c      	mov	r4, r3
    4db4:	46d0      	mov	r8, sl
    4db6:	1b63      	subs	r3, r4, r5
    4db8:	2b0f      	cmp	r3, #15
    4dba:	d81d      	bhi.n	4df8 <_realloc_r+0x164>
    4dbc:	f8d8 3004 	ldr.w	r3, [r8, #4]
    4dc0:	f003 0301 	and.w	r3, r3, #1
    4dc4:	4323      	orrs	r3, r4
    4dc6:	4444      	add	r4, r8
    4dc8:	f8c8 3004 	str.w	r3, [r8, #4]
    4dcc:	6863      	ldr	r3, [r4, #4]
    4dce:	f043 0301 	orr.w	r3, r3, #1
    4dd2:	6063      	str	r3, [r4, #4]
    4dd4:	4648      	mov	r0, r9
    4dd6:	f7ff ff5b 	bl	4c90 <__malloc_unlock>
    4dda:	4630      	mov	r0, r6
    4ddc:	b003      	add	sp, #12
    4dde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4de2:	f021 0103 	bic.w	r1, r1, #3
    4de6:	4421      	add	r1, r4
    4de8:	4291      	cmp	r1, r2
    4dea:	db21      	blt.n	4e30 <_realloc_r+0x19c>
    4dec:	68c3      	ldr	r3, [r0, #12]
    4dee:	6882      	ldr	r2, [r0, #8]
    4df0:	460c      	mov	r4, r1
    4df2:	60d3      	str	r3, [r2, #12]
    4df4:	609a      	str	r2, [r3, #8]
    4df6:	e7de      	b.n	4db6 <_realloc_r+0x122>
    4df8:	f8d8 2004 	ldr.w	r2, [r8, #4]
    4dfc:	eb08 0105 	add.w	r1, r8, r5
    4e00:	f002 0201 	and.w	r2, r2, #1
    4e04:	4315      	orrs	r5, r2
    4e06:	f043 0201 	orr.w	r2, r3, #1
    4e0a:	440b      	add	r3, r1
    4e0c:	f8c8 5004 	str.w	r5, [r8, #4]
    4e10:	604a      	str	r2, [r1, #4]
    4e12:	685a      	ldr	r2, [r3, #4]
    4e14:	f042 0201 	orr.w	r2, r2, #1
    4e18:	3108      	adds	r1, #8
    4e1a:	605a      	str	r2, [r3, #4]
    4e1c:	4648      	mov	r0, r9
    4e1e:	f000 fad7 	bl	53d0 <_free_r>
    4e22:	e7d7      	b.n	4dd4 <_realloc_r+0x140>
    4e24:	4611      	mov	r1, r2
    4e26:	b003      	add	sp, #12
    4e28:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4e2c:	f7ff bbae 	b.w	458c <_malloc_r>
    4e30:	f01e 0f01 	tst.w	lr, #1
    4e34:	f47f af5a 	bne.w	4cec <_realloc_r+0x58>
    4e38:	f856 3c08 	ldr.w	r3, [r6, #-8]
    4e3c:	ebc3 0a08 	rsb	sl, r3, r8
    4e40:	f8da 3004 	ldr.w	r3, [sl, #4]
    4e44:	f023 0c03 	bic.w	ip, r3, #3
    4e48:	eb01 0e0c 	add.w	lr, r1, ip
    4e4c:	4596      	cmp	lr, r2
    4e4e:	db8b      	blt.n	4d68 <_realloc_r+0xd4>
    4e50:	68c3      	ldr	r3, [r0, #12]
    4e52:	6882      	ldr	r2, [r0, #8]
    4e54:	4657      	mov	r7, sl
    4e56:	60d3      	str	r3, [r2, #12]
    4e58:	609a      	str	r2, [r3, #8]
    4e5a:	f857 1f08 	ldr.w	r1, [r7, #8]!
    4e5e:	f8da 300c 	ldr.w	r3, [sl, #12]
    4e62:	60cb      	str	r3, [r1, #12]
    4e64:	1f22      	subs	r2, r4, #4
    4e66:	2a24      	cmp	r2, #36	; 0x24
    4e68:	6099      	str	r1, [r3, #8]
    4e6a:	f200 8099 	bhi.w	4fa0 <_realloc_r+0x30c>
    4e6e:	2a13      	cmp	r2, #19
    4e70:	d962      	bls.n	4f38 <_realloc_r+0x2a4>
    4e72:	6833      	ldr	r3, [r6, #0]
    4e74:	f8ca 3008 	str.w	r3, [sl, #8]
    4e78:	6873      	ldr	r3, [r6, #4]
    4e7a:	f8ca 300c 	str.w	r3, [sl, #12]
    4e7e:	2a1b      	cmp	r2, #27
    4e80:	f200 80a0 	bhi.w	4fc4 <_realloc_r+0x330>
    4e84:	3608      	adds	r6, #8
    4e86:	f10a 0310 	add.w	r3, sl, #16
    4e8a:	e056      	b.n	4f3a <_realloc_r+0x2a6>
    4e8c:	f021 0b03 	bic.w	fp, r1, #3
    4e90:	44a3      	add	fp, r4
    4e92:	f105 0010 	add.w	r0, r5, #16
    4e96:	4583      	cmp	fp, r0
    4e98:	da59      	bge.n	4f4e <_realloc_r+0x2ba>
    4e9a:	f01e 0f01 	tst.w	lr, #1
    4e9e:	f47f af25 	bne.w	4cec <_realloc_r+0x58>
    4ea2:	f856 1c08 	ldr.w	r1, [r6, #-8]
    4ea6:	ebc1 0a08 	rsb	sl, r1, r8
    4eaa:	f8da 1004 	ldr.w	r1, [sl, #4]
    4eae:	f021 0c03 	bic.w	ip, r1, #3
    4eb2:	44e3      	add	fp, ip
    4eb4:	4558      	cmp	r0, fp
    4eb6:	f73f af57 	bgt.w	4d68 <_realloc_r+0xd4>
    4eba:	4657      	mov	r7, sl
    4ebc:	f8da 100c 	ldr.w	r1, [sl, #12]
    4ec0:	f857 0f08 	ldr.w	r0, [r7, #8]!
    4ec4:	1f22      	subs	r2, r4, #4
    4ec6:	2a24      	cmp	r2, #36	; 0x24
    4ec8:	60c1      	str	r1, [r0, #12]
    4eca:	6088      	str	r0, [r1, #8]
    4ecc:	f200 80b4 	bhi.w	5038 <_realloc_r+0x3a4>
    4ed0:	2a13      	cmp	r2, #19
    4ed2:	f240 80a5 	bls.w	5020 <_realloc_r+0x38c>
    4ed6:	6831      	ldr	r1, [r6, #0]
    4ed8:	f8ca 1008 	str.w	r1, [sl, #8]
    4edc:	6871      	ldr	r1, [r6, #4]
    4ede:	f8ca 100c 	str.w	r1, [sl, #12]
    4ee2:	2a1b      	cmp	r2, #27
    4ee4:	f200 80af 	bhi.w	5046 <_realloc_r+0x3b2>
    4ee8:	3608      	adds	r6, #8
    4eea:	f10a 0210 	add.w	r2, sl, #16
    4eee:	6831      	ldr	r1, [r6, #0]
    4ef0:	6011      	str	r1, [r2, #0]
    4ef2:	6871      	ldr	r1, [r6, #4]
    4ef4:	6051      	str	r1, [r2, #4]
    4ef6:	68b1      	ldr	r1, [r6, #8]
    4ef8:	6091      	str	r1, [r2, #8]
    4efa:	eb0a 0105 	add.w	r1, sl, r5
    4efe:	ebc5 020b 	rsb	r2, r5, fp
    4f02:	f042 0201 	orr.w	r2, r2, #1
    4f06:	6099      	str	r1, [r3, #8]
    4f08:	604a      	str	r2, [r1, #4]
    4f0a:	f8da 3004 	ldr.w	r3, [sl, #4]
    4f0e:	f003 0301 	and.w	r3, r3, #1
    4f12:	431d      	orrs	r5, r3
    4f14:	4648      	mov	r0, r9
    4f16:	f8ca 5004 	str.w	r5, [sl, #4]
    4f1a:	f7ff feb9 	bl	4c90 <__malloc_unlock>
    4f1e:	4638      	mov	r0, r7
    4f20:	e75c      	b.n	4ddc <_realloc_r+0x148>
    4f22:	6833      	ldr	r3, [r6, #0]
    4f24:	6003      	str	r3, [r0, #0]
    4f26:	6873      	ldr	r3, [r6, #4]
    4f28:	6043      	str	r3, [r0, #4]
    4f2a:	2a1b      	cmp	r2, #27
    4f2c:	d827      	bhi.n	4f7e <_realloc_r+0x2ea>
    4f2e:	f100 0308 	add.w	r3, r0, #8
    4f32:	f106 0208 	add.w	r2, r6, #8
    4f36:	e6f2      	b.n	4d1e <_realloc_r+0x8a>
    4f38:	463b      	mov	r3, r7
    4f3a:	6832      	ldr	r2, [r6, #0]
    4f3c:	601a      	str	r2, [r3, #0]
    4f3e:	6872      	ldr	r2, [r6, #4]
    4f40:	605a      	str	r2, [r3, #4]
    4f42:	68b2      	ldr	r2, [r6, #8]
    4f44:	609a      	str	r2, [r3, #8]
    4f46:	463e      	mov	r6, r7
    4f48:	4674      	mov	r4, lr
    4f4a:	46d0      	mov	r8, sl
    4f4c:	e733      	b.n	4db6 <_realloc_r+0x122>
    4f4e:	eb08 0105 	add.w	r1, r8, r5
    4f52:	ebc5 0b0b 	rsb	fp, r5, fp
    4f56:	f04b 0201 	orr.w	r2, fp, #1
    4f5a:	6099      	str	r1, [r3, #8]
    4f5c:	604a      	str	r2, [r1, #4]
    4f5e:	f856 3c04 	ldr.w	r3, [r6, #-4]
    4f62:	f003 0301 	and.w	r3, r3, #1
    4f66:	431d      	orrs	r5, r3
    4f68:	4648      	mov	r0, r9
    4f6a:	f846 5c04 	str.w	r5, [r6, #-4]
    4f6e:	f7ff fe8f 	bl	4c90 <__malloc_unlock>
    4f72:	4630      	mov	r0, r6
    4f74:	e732      	b.n	4ddc <_realloc_r+0x148>
    4f76:	4631      	mov	r1, r6
    4f78:	f7ff fdd6 	bl	4b28 <memmove>
    4f7c:	e6d5      	b.n	4d2a <_realloc_r+0x96>
    4f7e:	68b3      	ldr	r3, [r6, #8]
    4f80:	6083      	str	r3, [r0, #8]
    4f82:	68f3      	ldr	r3, [r6, #12]
    4f84:	60c3      	str	r3, [r0, #12]
    4f86:	2a24      	cmp	r2, #36	; 0x24
    4f88:	d028      	beq.n	4fdc <_realloc_r+0x348>
    4f8a:	f100 0310 	add.w	r3, r0, #16
    4f8e:	f106 0210 	add.w	r2, r6, #16
    4f92:	e6c4      	b.n	4d1e <_realloc_r+0x8a>
    4f94:	f850 3c04 	ldr.w	r3, [r0, #-4]
    4f98:	f023 0303 	bic.w	r3, r3, #3
    4f9c:	441c      	add	r4, r3
    4f9e:	e70a      	b.n	4db6 <_realloc_r+0x122>
    4fa0:	4631      	mov	r1, r6
    4fa2:	4638      	mov	r0, r7
    4fa4:	4674      	mov	r4, lr
    4fa6:	46d0      	mov	r8, sl
    4fa8:	f7ff fdbe 	bl	4b28 <memmove>
    4fac:	463e      	mov	r6, r7
    4fae:	e702      	b.n	4db6 <_realloc_r+0x122>
    4fb0:	463a      	mov	r2, r7
    4fb2:	e6f7      	b.n	4da4 <_realloc_r+0x110>
    4fb4:	4631      	mov	r1, r6
    4fb6:	4638      	mov	r0, r7
    4fb8:	461c      	mov	r4, r3
    4fba:	46d0      	mov	r8, sl
    4fbc:	f7ff fdb4 	bl	4b28 <memmove>
    4fc0:	463e      	mov	r6, r7
    4fc2:	e6f8      	b.n	4db6 <_realloc_r+0x122>
    4fc4:	68b3      	ldr	r3, [r6, #8]
    4fc6:	f8ca 3010 	str.w	r3, [sl, #16]
    4fca:	68f3      	ldr	r3, [r6, #12]
    4fcc:	f8ca 3014 	str.w	r3, [sl, #20]
    4fd0:	2a24      	cmp	r2, #36	; 0x24
    4fd2:	d01b      	beq.n	500c <_realloc_r+0x378>
    4fd4:	3610      	adds	r6, #16
    4fd6:	f10a 0318 	add.w	r3, sl, #24
    4fda:	e7ae      	b.n	4f3a <_realloc_r+0x2a6>
    4fdc:	6933      	ldr	r3, [r6, #16]
    4fde:	6103      	str	r3, [r0, #16]
    4fe0:	6973      	ldr	r3, [r6, #20]
    4fe2:	6143      	str	r3, [r0, #20]
    4fe4:	f106 0218 	add.w	r2, r6, #24
    4fe8:	f100 0318 	add.w	r3, r0, #24
    4fec:	e697      	b.n	4d1e <_realloc_r+0x8a>
    4fee:	bf00      	nop
    4ff0:	1fff9418 	.word	0x1fff9418
    4ff4:	68b1      	ldr	r1, [r6, #8]
    4ff6:	f8ca 1010 	str.w	r1, [sl, #16]
    4ffa:	68f1      	ldr	r1, [r6, #12]
    4ffc:	f8ca 1014 	str.w	r1, [sl, #20]
    5000:	2a24      	cmp	r2, #36	; 0x24
    5002:	d00f      	beq.n	5024 <_realloc_r+0x390>
    5004:	3610      	adds	r6, #16
    5006:	f10a 0218 	add.w	r2, sl, #24
    500a:	e6cb      	b.n	4da4 <_realloc_r+0x110>
    500c:	6933      	ldr	r3, [r6, #16]
    500e:	f8ca 3018 	str.w	r3, [sl, #24]
    5012:	6973      	ldr	r3, [r6, #20]
    5014:	f8ca 301c 	str.w	r3, [sl, #28]
    5018:	3618      	adds	r6, #24
    501a:	f10a 0320 	add.w	r3, sl, #32
    501e:	e78c      	b.n	4f3a <_realloc_r+0x2a6>
    5020:	463a      	mov	r2, r7
    5022:	e764      	b.n	4eee <_realloc_r+0x25a>
    5024:	6932      	ldr	r2, [r6, #16]
    5026:	f8ca 2018 	str.w	r2, [sl, #24]
    502a:	6972      	ldr	r2, [r6, #20]
    502c:	f8ca 201c 	str.w	r2, [sl, #28]
    5030:	3618      	adds	r6, #24
    5032:	f10a 0220 	add.w	r2, sl, #32
    5036:	e6b5      	b.n	4da4 <_realloc_r+0x110>
    5038:	4631      	mov	r1, r6
    503a:	4638      	mov	r0, r7
    503c:	9301      	str	r3, [sp, #4]
    503e:	f7ff fd73 	bl	4b28 <memmove>
    5042:	9b01      	ldr	r3, [sp, #4]
    5044:	e759      	b.n	4efa <_realloc_r+0x266>
    5046:	68b1      	ldr	r1, [r6, #8]
    5048:	f8ca 1010 	str.w	r1, [sl, #16]
    504c:	68f1      	ldr	r1, [r6, #12]
    504e:	f8ca 1014 	str.w	r1, [sl, #20]
    5052:	2a24      	cmp	r2, #36	; 0x24
    5054:	d003      	beq.n	505e <_realloc_r+0x3ca>
    5056:	3610      	adds	r6, #16
    5058:	f10a 0218 	add.w	r2, sl, #24
    505c:	e747      	b.n	4eee <_realloc_r+0x25a>
    505e:	6932      	ldr	r2, [r6, #16]
    5060:	f8ca 2018 	str.w	r2, [sl, #24]
    5064:	6972      	ldr	r2, [r6, #20]
    5066:	f8ca 201c 	str.w	r2, [sl, #28]
    506a:	3618      	adds	r6, #24
    506c:	f10a 0220 	add.w	r2, sl, #32
    5070:	e73d      	b.n	4eee <_realloc_r+0x25a>
    5072:	bf00      	nop

00005074 <_sbrk_r>:
    5074:	b538      	push	{r3, r4, r5, lr}
    5076:	4c07      	ldr	r4, [pc, #28]	; (5094 <_sbrk_r+0x20>)
    5078:	2300      	movs	r3, #0
    507a:	4605      	mov	r5, r0
    507c:	4608      	mov	r0, r1
    507e:	6023      	str	r3, [r4, #0]
    5080:	f7fc ffca 	bl	2018 <_sbrk>
    5084:	1c43      	adds	r3, r0, #1
    5086:	d000      	beq.n	508a <_sbrk_r+0x16>
    5088:	bd38      	pop	{r3, r4, r5, pc}
    508a:	6823      	ldr	r3, [r4, #0]
    508c:	2b00      	cmp	r3, #0
    508e:	d0fb      	beq.n	5088 <_sbrk_r+0x14>
    5090:	602b      	str	r3, [r5, #0]
    5092:	bd38      	pop	{r3, r4, r5, pc}
    5094:	1fff9bec 	.word	0x1fff9bec
    5098:	ffffffff 	.word	0xffffffff
    509c:	ffffffff 	.word	0xffffffff
    50a0:	ffffffff 	.word	0xffffffff
    50a4:	ffffffff 	.word	0xffffffff
    50a8:	ffffffff 	.word	0xffffffff
    50ac:	ffffffff 	.word	0xffffffff
    50b0:	ffffffff 	.word	0xffffffff
    50b4:	ffffffff 	.word	0xffffffff
    50b8:	ffffffff 	.word	0xffffffff
    50bc:	ffffffff 	.word	0xffffffff

000050c0 <strlen>:
    50c0:	f890 f000 	pld	[r0]
    50c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    50c8:	f020 0107 	bic.w	r1, r0, #7
    50cc:	f06f 0c00 	mvn.w	ip, #0
    50d0:	f010 0407 	ands.w	r4, r0, #7
    50d4:	f891 f020 	pld	[r1, #32]
    50d8:	f040 8049 	bne.w	516e <strlen+0xae>
    50dc:	f04f 0400 	mov.w	r4, #0
    50e0:	f06f 0007 	mvn.w	r0, #7
    50e4:	e9d1 2300 	ldrd	r2, r3, [r1]
    50e8:	f891 f040 	pld	[r1, #64]	; 0x40
    50ec:	f100 0008 	add.w	r0, r0, #8
    50f0:	fa82 f24c 	uadd8	r2, r2, ip
    50f4:	faa4 f28c 	sel	r2, r4, ip
    50f8:	fa83 f34c 	uadd8	r3, r3, ip
    50fc:	faa2 f38c 	sel	r3, r2, ip
    5100:	bb4b      	cbnz	r3, 5156 <strlen+0x96>
    5102:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    5106:	fa82 f24c 	uadd8	r2, r2, ip
    510a:	f100 0008 	add.w	r0, r0, #8
    510e:	faa4 f28c 	sel	r2, r4, ip
    5112:	fa83 f34c 	uadd8	r3, r3, ip
    5116:	faa2 f38c 	sel	r3, r2, ip
    511a:	b9e3      	cbnz	r3, 5156 <strlen+0x96>
    511c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    5120:	fa82 f24c 	uadd8	r2, r2, ip
    5124:	f100 0008 	add.w	r0, r0, #8
    5128:	faa4 f28c 	sel	r2, r4, ip
    512c:	fa83 f34c 	uadd8	r3, r3, ip
    5130:	faa2 f38c 	sel	r3, r2, ip
    5134:	b97b      	cbnz	r3, 5156 <strlen+0x96>
    5136:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    513a:	f101 0120 	add.w	r1, r1, #32
    513e:	fa82 f24c 	uadd8	r2, r2, ip
    5142:	f100 0008 	add.w	r0, r0, #8
    5146:	faa4 f28c 	sel	r2, r4, ip
    514a:	fa83 f34c 	uadd8	r3, r3, ip
    514e:	faa2 f38c 	sel	r3, r2, ip
    5152:	2b00      	cmp	r3, #0
    5154:	d0c6      	beq.n	50e4 <strlen+0x24>
    5156:	2a00      	cmp	r2, #0
    5158:	bf04      	itt	eq
    515a:	3004      	addeq	r0, #4
    515c:	461a      	moveq	r2, r3
    515e:	ba12      	rev	r2, r2
    5160:	fab2 f282 	clz	r2, r2
    5164:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    5168:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    516c:	4770      	bx	lr
    516e:	e9d1 2300 	ldrd	r2, r3, [r1]
    5172:	f004 0503 	and.w	r5, r4, #3
    5176:	f1c4 0000 	rsb	r0, r4, #0
    517a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    517e:	f014 0f04 	tst.w	r4, #4
    5182:	f891 f040 	pld	[r1, #64]	; 0x40
    5186:	fa0c f505 	lsl.w	r5, ip, r5
    518a:	ea62 0205 	orn	r2, r2, r5
    518e:	bf1c      	itt	ne
    5190:	ea63 0305 	ornne	r3, r3, r5
    5194:	4662      	movne	r2, ip
    5196:	f04f 0400 	mov.w	r4, #0
    519a:	e7a9      	b.n	50f0 <strlen+0x30>

0000519c <_vdprintf_r>:
    519c:	b5f0      	push	{r4, r5, r6, r7, lr}
    519e:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
    51a2:	ad04      	add	r5, sp, #16
    51a4:	9300      	str	r3, [sp, #0]
    51a6:	460f      	mov	r7, r1
    51a8:	4613      	mov	r3, r2
    51aa:	f44f 7400 	mov.w	r4, #512	; 0x200
    51ae:	aa03      	add	r2, sp, #12
    51b0:	4629      	mov	r1, r5
    51b2:	9403      	str	r4, [sp, #12]
    51b4:	4606      	mov	r6, r0
    51b6:	f000 fd61 	bl	5c7c <_vasnprintf_r>
    51ba:	b188      	cbz	r0, 51e0 <_vdprintf_r+0x44>
    51bc:	4604      	mov	r4, r0
    51be:	4602      	mov	r2, r0
    51c0:	4639      	mov	r1, r7
    51c2:	9b03      	ldr	r3, [sp, #12]
    51c4:	4630      	mov	r0, r6
    51c6:	f000 f829 	bl	521c <_write_r>
    51ca:	42ac      	cmp	r4, r5
    51cc:	9003      	str	r0, [sp, #12]
    51ce:	d004      	beq.n	51da <_vdprintf_r+0x3e>
    51d0:	4630      	mov	r0, r6
    51d2:	4621      	mov	r1, r4
    51d4:	f000 f8fc 	bl	53d0 <_free_r>
    51d8:	9803      	ldr	r0, [sp, #12]
    51da:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
    51de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    51e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    51e4:	e7f9      	b.n	51da <_vdprintf_r+0x3e>
    51e6:	bf00      	nop

000051e8 <vdprintf>:
    51e8:	b410      	push	{r4}
    51ea:	4c04      	ldr	r4, [pc, #16]	; (51fc <vdprintf+0x14>)
    51ec:	4613      	mov	r3, r2
    51ee:	460a      	mov	r2, r1
    51f0:	4601      	mov	r1, r0
    51f2:	6820      	ldr	r0, [r4, #0]
    51f4:	bc10      	pop	{r4}
    51f6:	f7ff bfd1 	b.w	519c <_vdprintf_r>
    51fa:	bf00      	nop
    51fc:	1fff92a8 	.word	0x1fff92a8

00005200 <__ascii_wctomb>:
    5200:	b121      	cbz	r1, 520c <__ascii_wctomb+0xc>
    5202:	2aff      	cmp	r2, #255	; 0xff
    5204:	d804      	bhi.n	5210 <__ascii_wctomb+0x10>
    5206:	700a      	strb	r2, [r1, #0]
    5208:	2001      	movs	r0, #1
    520a:	4770      	bx	lr
    520c:	4608      	mov	r0, r1
    520e:	4770      	bx	lr
    5210:	238a      	movs	r3, #138	; 0x8a
    5212:	6003      	str	r3, [r0, #0]
    5214:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5218:	4770      	bx	lr
    521a:	bf00      	nop

0000521c <_write_r>:
    521c:	b570      	push	{r4, r5, r6, lr}
    521e:	460d      	mov	r5, r1
    5220:	4c08      	ldr	r4, [pc, #32]	; (5244 <_write_r+0x28>)
    5222:	4611      	mov	r1, r2
    5224:	4606      	mov	r6, r0
    5226:	461a      	mov	r2, r3
    5228:	4628      	mov	r0, r5
    522a:	2300      	movs	r3, #0
    522c:	6023      	str	r3, [r4, #0]
    522e:	f7fe f815 	bl	325c <_write>
    5232:	1c43      	adds	r3, r0, #1
    5234:	d000      	beq.n	5238 <_write_r+0x1c>
    5236:	bd70      	pop	{r4, r5, r6, pc}
    5238:	6823      	ldr	r3, [r4, #0]
    523a:	2b00      	cmp	r3, #0
    523c:	d0fb      	beq.n	5236 <_write_r+0x1a>
    523e:	6033      	str	r3, [r6, #0]
    5240:	bd70      	pop	{r4, r5, r6, pc}
    5242:	bf00      	nop
    5244:	1fff9bec 	.word	0x1fff9bec

00005248 <__register_exitproc>:
    5248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    524c:	4c25      	ldr	r4, [pc, #148]	; (52e4 <__register_exitproc+0x9c>)
    524e:	6825      	ldr	r5, [r4, #0]
    5250:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    5254:	4606      	mov	r6, r0
    5256:	4688      	mov	r8, r1
    5258:	4692      	mov	sl, r2
    525a:	4699      	mov	r9, r3
    525c:	b3c4      	cbz	r4, 52d0 <__register_exitproc+0x88>
    525e:	6860      	ldr	r0, [r4, #4]
    5260:	281f      	cmp	r0, #31
    5262:	dc17      	bgt.n	5294 <__register_exitproc+0x4c>
    5264:	1c43      	adds	r3, r0, #1
    5266:	b176      	cbz	r6, 5286 <__register_exitproc+0x3e>
    5268:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    526c:	2201      	movs	r2, #1
    526e:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
    5272:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
    5276:	4082      	lsls	r2, r0
    5278:	4311      	orrs	r1, r2
    527a:	2e02      	cmp	r6, #2
    527c:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
    5280:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
    5284:	d01e      	beq.n	52c4 <__register_exitproc+0x7c>
    5286:	3002      	adds	r0, #2
    5288:	6063      	str	r3, [r4, #4]
    528a:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
    528e:	2000      	movs	r0, #0
    5290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5294:	4b14      	ldr	r3, [pc, #80]	; (52e8 <__register_exitproc+0xa0>)
    5296:	b303      	cbz	r3, 52da <__register_exitproc+0x92>
    5298:	f44f 70c8 	mov.w	r0, #400	; 0x190
    529c:	f7ff f966 	bl	456c <malloc>
    52a0:	4604      	mov	r4, r0
    52a2:	b1d0      	cbz	r0, 52da <__register_exitproc+0x92>
    52a4:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    52a8:	2700      	movs	r7, #0
    52aa:	e880 0088 	stmia.w	r0, {r3, r7}
    52ae:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    52b2:	4638      	mov	r0, r7
    52b4:	2301      	movs	r3, #1
    52b6:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    52ba:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    52be:	2e00      	cmp	r6, #0
    52c0:	d0e1      	beq.n	5286 <__register_exitproc+0x3e>
    52c2:	e7d1      	b.n	5268 <__register_exitproc+0x20>
    52c4:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
    52c8:	430a      	orrs	r2, r1
    52ca:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    52ce:	e7da      	b.n	5286 <__register_exitproc+0x3e>
    52d0:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    52d4:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    52d8:	e7c1      	b.n	525e <__register_exitproc+0x16>
    52da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    52de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    52e2:	bf00      	nop
    52e4:	00008d4c 	.word	0x00008d4c
    52e8:	0000456d 	.word	0x0000456d

000052ec <register_fini>:
    52ec:	4b02      	ldr	r3, [pc, #8]	; (52f8 <register_fini+0xc>)
    52ee:	b113      	cbz	r3, 52f6 <register_fini+0xa>
    52f0:	4802      	ldr	r0, [pc, #8]	; (52fc <register_fini+0x10>)
    52f2:	f000 b805 	b.w	5300 <atexit>
    52f6:	4770      	bx	lr
    52f8:	00000000 	.word	0x00000000
    52fc:	0000530d 	.word	0x0000530d

00005300 <atexit>:
    5300:	2300      	movs	r3, #0
    5302:	4601      	mov	r1, r0
    5304:	461a      	mov	r2, r3
    5306:	4618      	mov	r0, r3
    5308:	f7ff bf9e 	b.w	5248 <__register_exitproc>

0000530c <__libc_fini_array>:
    530c:	b538      	push	{r3, r4, r5, lr}
    530e:	4d07      	ldr	r5, [pc, #28]	; (532c <__libc_fini_array+0x20>)
    5310:	4c07      	ldr	r4, [pc, #28]	; (5330 <__libc_fini_array+0x24>)
    5312:	1b2c      	subs	r4, r5, r4
    5314:	10a4      	asrs	r4, r4, #2
    5316:	d005      	beq.n	5324 <__libc_fini_array+0x18>
    5318:	3c01      	subs	r4, #1
    531a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    531e:	4798      	blx	r3
    5320:	2c00      	cmp	r4, #0
    5322:	d1f9      	bne.n	5318 <__libc_fini_array+0xc>
    5324:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5328:	f003 be66 	b.w	8ff8 <__init_array_end>
	...

00005334 <_malloc_trim_r>:
    5334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5336:	4f23      	ldr	r7, [pc, #140]	; (53c4 <_malloc_trim_r+0x90>)
    5338:	460c      	mov	r4, r1
    533a:	4606      	mov	r6, r0
    533c:	f7ff fca6 	bl	4c8c <__malloc_lock>
    5340:	68bb      	ldr	r3, [r7, #8]
    5342:	685d      	ldr	r5, [r3, #4]
    5344:	f025 0503 	bic.w	r5, r5, #3
    5348:	1b29      	subs	r1, r5, r4
    534a:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
    534e:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    5352:	f021 010f 	bic.w	r1, r1, #15
    5356:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
    535a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    535e:	db07      	blt.n	5370 <_malloc_trim_r+0x3c>
    5360:	2100      	movs	r1, #0
    5362:	4630      	mov	r0, r6
    5364:	f7ff fe86 	bl	5074 <_sbrk_r>
    5368:	68bb      	ldr	r3, [r7, #8]
    536a:	442b      	add	r3, r5
    536c:	4298      	cmp	r0, r3
    536e:	d004      	beq.n	537a <_malloc_trim_r+0x46>
    5370:	4630      	mov	r0, r6
    5372:	f7ff fc8d 	bl	4c90 <__malloc_unlock>
    5376:	2000      	movs	r0, #0
    5378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    537a:	4261      	negs	r1, r4
    537c:	4630      	mov	r0, r6
    537e:	f7ff fe79 	bl	5074 <_sbrk_r>
    5382:	3001      	adds	r0, #1
    5384:	d00d      	beq.n	53a2 <_malloc_trim_r+0x6e>
    5386:	4b10      	ldr	r3, [pc, #64]	; (53c8 <_malloc_trim_r+0x94>)
    5388:	68ba      	ldr	r2, [r7, #8]
    538a:	6819      	ldr	r1, [r3, #0]
    538c:	1b2d      	subs	r5, r5, r4
    538e:	f045 0501 	orr.w	r5, r5, #1
    5392:	4630      	mov	r0, r6
    5394:	1b09      	subs	r1, r1, r4
    5396:	6055      	str	r5, [r2, #4]
    5398:	6019      	str	r1, [r3, #0]
    539a:	f7ff fc79 	bl	4c90 <__malloc_unlock>
    539e:	2001      	movs	r0, #1
    53a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    53a2:	2100      	movs	r1, #0
    53a4:	4630      	mov	r0, r6
    53a6:	f7ff fe65 	bl	5074 <_sbrk_r>
    53aa:	68ba      	ldr	r2, [r7, #8]
    53ac:	1a83      	subs	r3, r0, r2
    53ae:	2b0f      	cmp	r3, #15
    53b0:	ddde      	ble.n	5370 <_malloc_trim_r+0x3c>
    53b2:	4c06      	ldr	r4, [pc, #24]	; (53cc <_malloc_trim_r+0x98>)
    53b4:	4904      	ldr	r1, [pc, #16]	; (53c8 <_malloc_trim_r+0x94>)
    53b6:	6824      	ldr	r4, [r4, #0]
    53b8:	f043 0301 	orr.w	r3, r3, #1
    53bc:	1b00      	subs	r0, r0, r4
    53be:	6053      	str	r3, [r2, #4]
    53c0:	6008      	str	r0, [r1, #0]
    53c2:	e7d5      	b.n	5370 <_malloc_trim_r+0x3c>
    53c4:	1fff9418 	.word	0x1fff9418
    53c8:	1fff9bb0 	.word	0x1fff9bb0
    53cc:	1fff9824 	.word	0x1fff9824

000053d0 <_free_r>:
    53d0:	2900      	cmp	r1, #0
    53d2:	d045      	beq.n	5460 <_free_r+0x90>
    53d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    53d8:	460d      	mov	r5, r1
    53da:	4680      	mov	r8, r0
    53dc:	f7ff fc56 	bl	4c8c <__malloc_lock>
    53e0:	f855 7c04 	ldr.w	r7, [r5, #-4]
    53e4:	496a      	ldr	r1, [pc, #424]	; (5590 <_free_r+0x1c0>)
    53e6:	f027 0301 	bic.w	r3, r7, #1
    53ea:	f1a5 0408 	sub.w	r4, r5, #8
    53ee:	18e2      	adds	r2, r4, r3
    53f0:	688e      	ldr	r6, [r1, #8]
    53f2:	6850      	ldr	r0, [r2, #4]
    53f4:	42b2      	cmp	r2, r6
    53f6:	f020 0003 	bic.w	r0, r0, #3
    53fa:	d062      	beq.n	54c2 <_free_r+0xf2>
    53fc:	07fe      	lsls	r6, r7, #31
    53fe:	6050      	str	r0, [r2, #4]
    5400:	d40b      	bmi.n	541a <_free_r+0x4a>
    5402:	f855 7c08 	ldr.w	r7, [r5, #-8]
    5406:	1be4      	subs	r4, r4, r7
    5408:	f101 0e08 	add.w	lr, r1, #8
    540c:	68a5      	ldr	r5, [r4, #8]
    540e:	4575      	cmp	r5, lr
    5410:	443b      	add	r3, r7
    5412:	d06f      	beq.n	54f4 <_free_r+0x124>
    5414:	68e7      	ldr	r7, [r4, #12]
    5416:	60ef      	str	r7, [r5, #12]
    5418:	60bd      	str	r5, [r7, #8]
    541a:	1815      	adds	r5, r2, r0
    541c:	686d      	ldr	r5, [r5, #4]
    541e:	07ed      	lsls	r5, r5, #31
    5420:	d542      	bpl.n	54a8 <_free_r+0xd8>
    5422:	f043 0201 	orr.w	r2, r3, #1
    5426:	6062      	str	r2, [r4, #4]
    5428:	50e3      	str	r3, [r4, r3]
    542a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    542e:	d218      	bcs.n	5462 <_free_r+0x92>
    5430:	08db      	lsrs	r3, r3, #3
    5432:	1c5a      	adds	r2, r3, #1
    5434:	684d      	ldr	r5, [r1, #4]
    5436:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
    543a:	60a7      	str	r7, [r4, #8]
    543c:	2001      	movs	r0, #1
    543e:	109b      	asrs	r3, r3, #2
    5440:	fa00 f303 	lsl.w	r3, r0, r3
    5444:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    5448:	431d      	orrs	r5, r3
    544a:	3808      	subs	r0, #8
    544c:	60e0      	str	r0, [r4, #12]
    544e:	604d      	str	r5, [r1, #4]
    5450:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
    5454:	60fc      	str	r4, [r7, #12]
    5456:	4640      	mov	r0, r8
    5458:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    545c:	f7ff bc18 	b.w	4c90 <__malloc_unlock>
    5460:	4770      	bx	lr
    5462:	0a5a      	lsrs	r2, r3, #9
    5464:	2a04      	cmp	r2, #4
    5466:	d853      	bhi.n	5510 <_free_r+0x140>
    5468:	099a      	lsrs	r2, r3, #6
    546a:	f102 0739 	add.w	r7, r2, #57	; 0x39
    546e:	007f      	lsls	r7, r7, #1
    5470:	f102 0538 	add.w	r5, r2, #56	; 0x38
    5474:	eb01 0087 	add.w	r0, r1, r7, lsl #2
    5478:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
    547c:	4944      	ldr	r1, [pc, #272]	; (5590 <_free_r+0x1c0>)
    547e:	3808      	subs	r0, #8
    5480:	4290      	cmp	r0, r2
    5482:	d04d      	beq.n	5520 <_free_r+0x150>
    5484:	6851      	ldr	r1, [r2, #4]
    5486:	f021 0103 	bic.w	r1, r1, #3
    548a:	428b      	cmp	r3, r1
    548c:	d202      	bcs.n	5494 <_free_r+0xc4>
    548e:	6892      	ldr	r2, [r2, #8]
    5490:	4290      	cmp	r0, r2
    5492:	d1f7      	bne.n	5484 <_free_r+0xb4>
    5494:	68d0      	ldr	r0, [r2, #12]
    5496:	60e0      	str	r0, [r4, #12]
    5498:	60a2      	str	r2, [r4, #8]
    549a:	6084      	str	r4, [r0, #8]
    549c:	60d4      	str	r4, [r2, #12]
    549e:	4640      	mov	r0, r8
    54a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    54a4:	f7ff bbf4 	b.w	4c90 <__malloc_unlock>
    54a8:	6895      	ldr	r5, [r2, #8]
    54aa:	4f3a      	ldr	r7, [pc, #232]	; (5594 <_free_r+0x1c4>)
    54ac:	42bd      	cmp	r5, r7
    54ae:	4403      	add	r3, r0
    54b0:	d03f      	beq.n	5532 <_free_r+0x162>
    54b2:	68d0      	ldr	r0, [r2, #12]
    54b4:	60e8      	str	r0, [r5, #12]
    54b6:	f043 0201 	orr.w	r2, r3, #1
    54ba:	6085      	str	r5, [r0, #8]
    54bc:	6062      	str	r2, [r4, #4]
    54be:	50e3      	str	r3, [r4, r3]
    54c0:	e7b3      	b.n	542a <_free_r+0x5a>
    54c2:	07ff      	lsls	r7, r7, #31
    54c4:	4403      	add	r3, r0
    54c6:	d407      	bmi.n	54d8 <_free_r+0x108>
    54c8:	f855 2c08 	ldr.w	r2, [r5, #-8]
    54cc:	1aa4      	subs	r4, r4, r2
    54ce:	4413      	add	r3, r2
    54d0:	68a0      	ldr	r0, [r4, #8]
    54d2:	68e2      	ldr	r2, [r4, #12]
    54d4:	60c2      	str	r2, [r0, #12]
    54d6:	6090      	str	r0, [r2, #8]
    54d8:	4a2f      	ldr	r2, [pc, #188]	; (5598 <_free_r+0x1c8>)
    54da:	6812      	ldr	r2, [r2, #0]
    54dc:	f043 0001 	orr.w	r0, r3, #1
    54e0:	4293      	cmp	r3, r2
    54e2:	6060      	str	r0, [r4, #4]
    54e4:	608c      	str	r4, [r1, #8]
    54e6:	d3b6      	bcc.n	5456 <_free_r+0x86>
    54e8:	4b2c      	ldr	r3, [pc, #176]	; (559c <_free_r+0x1cc>)
    54ea:	4640      	mov	r0, r8
    54ec:	6819      	ldr	r1, [r3, #0]
    54ee:	f7ff ff21 	bl	5334 <_malloc_trim_r>
    54f2:	e7b0      	b.n	5456 <_free_r+0x86>
    54f4:	1811      	adds	r1, r2, r0
    54f6:	6849      	ldr	r1, [r1, #4]
    54f8:	07c9      	lsls	r1, r1, #31
    54fa:	d444      	bmi.n	5586 <_free_r+0x1b6>
    54fc:	6891      	ldr	r1, [r2, #8]
    54fe:	68d2      	ldr	r2, [r2, #12]
    5500:	60ca      	str	r2, [r1, #12]
    5502:	4403      	add	r3, r0
    5504:	f043 0001 	orr.w	r0, r3, #1
    5508:	6091      	str	r1, [r2, #8]
    550a:	6060      	str	r0, [r4, #4]
    550c:	50e3      	str	r3, [r4, r3]
    550e:	e7a2      	b.n	5456 <_free_r+0x86>
    5510:	2a14      	cmp	r2, #20
    5512:	d817      	bhi.n	5544 <_free_r+0x174>
    5514:	f102 075c 	add.w	r7, r2, #92	; 0x5c
    5518:	007f      	lsls	r7, r7, #1
    551a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
    551e:	e7a9      	b.n	5474 <_free_r+0xa4>
    5520:	10aa      	asrs	r2, r5, #2
    5522:	684b      	ldr	r3, [r1, #4]
    5524:	2501      	movs	r5, #1
    5526:	fa05 f202 	lsl.w	r2, r5, r2
    552a:	4313      	orrs	r3, r2
    552c:	604b      	str	r3, [r1, #4]
    552e:	4602      	mov	r2, r0
    5530:	e7b1      	b.n	5496 <_free_r+0xc6>
    5532:	f043 0201 	orr.w	r2, r3, #1
    5536:	614c      	str	r4, [r1, #20]
    5538:	610c      	str	r4, [r1, #16]
    553a:	60e5      	str	r5, [r4, #12]
    553c:	60a5      	str	r5, [r4, #8]
    553e:	6062      	str	r2, [r4, #4]
    5540:	50e3      	str	r3, [r4, r3]
    5542:	e788      	b.n	5456 <_free_r+0x86>
    5544:	2a54      	cmp	r2, #84	; 0x54
    5546:	d806      	bhi.n	5556 <_free_r+0x186>
    5548:	0b1a      	lsrs	r2, r3, #12
    554a:	f102 076f 	add.w	r7, r2, #111	; 0x6f
    554e:	007f      	lsls	r7, r7, #1
    5550:	f102 056e 	add.w	r5, r2, #110	; 0x6e
    5554:	e78e      	b.n	5474 <_free_r+0xa4>
    5556:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    555a:	d806      	bhi.n	556a <_free_r+0x19a>
    555c:	0bda      	lsrs	r2, r3, #15
    555e:	f102 0778 	add.w	r7, r2, #120	; 0x78
    5562:	007f      	lsls	r7, r7, #1
    5564:	f102 0577 	add.w	r5, r2, #119	; 0x77
    5568:	e784      	b.n	5474 <_free_r+0xa4>
    556a:	f240 5054 	movw	r0, #1364	; 0x554
    556e:	4282      	cmp	r2, r0
    5570:	d806      	bhi.n	5580 <_free_r+0x1b0>
    5572:	0c9a      	lsrs	r2, r3, #18
    5574:	f102 077d 	add.w	r7, r2, #125	; 0x7d
    5578:	007f      	lsls	r7, r7, #1
    557a:	f102 057c 	add.w	r5, r2, #124	; 0x7c
    557e:	e779      	b.n	5474 <_free_r+0xa4>
    5580:	27fe      	movs	r7, #254	; 0xfe
    5582:	257e      	movs	r5, #126	; 0x7e
    5584:	e776      	b.n	5474 <_free_r+0xa4>
    5586:	f043 0201 	orr.w	r2, r3, #1
    558a:	6062      	str	r2, [r4, #4]
    558c:	50e3      	str	r3, [r4, r3]
    558e:	e762      	b.n	5456 <_free_r+0x86>
    5590:	1fff9418 	.word	0x1fff9418
    5594:	1fff9420 	.word	0x1fff9420
    5598:	1fff9820 	.word	0x1fff9820
    559c:	1fff9bac 	.word	0x1fff9bac

000055a0 <_localeconv_r>:
    55a0:	4a04      	ldr	r2, [pc, #16]	; (55b4 <_localeconv_r+0x14>)
    55a2:	4b05      	ldr	r3, [pc, #20]	; (55b8 <_localeconv_r+0x18>)
    55a4:	6812      	ldr	r2, [r2, #0]
    55a6:	6b50      	ldr	r0, [r2, #52]	; 0x34
    55a8:	2800      	cmp	r0, #0
    55aa:	bf08      	it	eq
    55ac:	4618      	moveq	r0, r3
    55ae:	30f0      	adds	r0, #240	; 0xf0
    55b0:	4770      	bx	lr
    55b2:	bf00      	nop
    55b4:	1fff92a8 	.word	0x1fff92a8
    55b8:	1fff92ac 	.word	0x1fff92ac
    55bc:	ffffffff 	.word	0xffffffff

000055c0 <memchr>:
    55c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    55c4:	2a10      	cmp	r2, #16
    55c6:	db2b      	blt.n	5620 <memchr+0x60>
    55c8:	f010 0f07 	tst.w	r0, #7
    55cc:	d008      	beq.n	55e0 <memchr+0x20>
    55ce:	f810 3b01 	ldrb.w	r3, [r0], #1
    55d2:	3a01      	subs	r2, #1
    55d4:	428b      	cmp	r3, r1
    55d6:	d02d      	beq.n	5634 <memchr+0x74>
    55d8:	f010 0f07 	tst.w	r0, #7
    55dc:	b342      	cbz	r2, 5630 <memchr+0x70>
    55de:	d1f6      	bne.n	55ce <memchr+0xe>
    55e0:	b4f0      	push	{r4, r5, r6, r7}
    55e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    55e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    55ea:	f022 0407 	bic.w	r4, r2, #7
    55ee:	f07f 0700 	mvns.w	r7, #0
    55f2:	2300      	movs	r3, #0
    55f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    55f8:	3c08      	subs	r4, #8
    55fa:	ea85 0501 	eor.w	r5, r5, r1
    55fe:	ea86 0601 	eor.w	r6, r6, r1
    5602:	fa85 f547 	uadd8	r5, r5, r7
    5606:	faa3 f587 	sel	r5, r3, r7
    560a:	fa86 f647 	uadd8	r6, r6, r7
    560e:	faa5 f687 	sel	r6, r5, r7
    5612:	b98e      	cbnz	r6, 5638 <memchr+0x78>
    5614:	d1ee      	bne.n	55f4 <memchr+0x34>
    5616:	bcf0      	pop	{r4, r5, r6, r7}
    5618:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    561c:	f002 0207 	and.w	r2, r2, #7
    5620:	b132      	cbz	r2, 5630 <memchr+0x70>
    5622:	f810 3b01 	ldrb.w	r3, [r0], #1
    5626:	3a01      	subs	r2, #1
    5628:	ea83 0301 	eor.w	r3, r3, r1
    562c:	b113      	cbz	r3, 5634 <memchr+0x74>
    562e:	d1f8      	bne.n	5622 <memchr+0x62>
    5630:	2000      	movs	r0, #0
    5632:	4770      	bx	lr
    5634:	3801      	subs	r0, #1
    5636:	4770      	bx	lr
    5638:	2d00      	cmp	r5, #0
    563a:	bf06      	itte	eq
    563c:	4635      	moveq	r5, r6
    563e:	3803      	subeq	r0, #3
    5640:	3807      	subne	r0, #7
    5642:	f015 0f01 	tst.w	r5, #1
    5646:	d107      	bne.n	5658 <memchr+0x98>
    5648:	3001      	adds	r0, #1
    564a:	f415 7f80 	tst.w	r5, #256	; 0x100
    564e:	bf02      	ittt	eq
    5650:	3001      	addeq	r0, #1
    5652:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    5656:	3001      	addeq	r0, #1
    5658:	bcf0      	pop	{r4, r5, r6, r7}
    565a:	3801      	subs	r0, #1
    565c:	4770      	bx	lr
    565e:	bf00      	nop

00005660 <_Balloc>:
    5660:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    5662:	b570      	push	{r4, r5, r6, lr}
    5664:	4605      	mov	r5, r0
    5666:	460c      	mov	r4, r1
    5668:	b14b      	cbz	r3, 567e <_Balloc+0x1e>
    566a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    566e:	b180      	cbz	r0, 5692 <_Balloc+0x32>
    5670:	6802      	ldr	r2, [r0, #0]
    5672:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    5676:	2300      	movs	r3, #0
    5678:	6103      	str	r3, [r0, #16]
    567a:	60c3      	str	r3, [r0, #12]
    567c:	bd70      	pop	{r4, r5, r6, pc}
    567e:	2221      	movs	r2, #33	; 0x21
    5680:	2104      	movs	r1, #4
    5682:	f000 fb2b 	bl	5cdc <_calloc_r>
    5686:	64e8      	str	r0, [r5, #76]	; 0x4c
    5688:	4603      	mov	r3, r0
    568a:	2800      	cmp	r0, #0
    568c:	d1ed      	bne.n	566a <_Balloc+0xa>
    568e:	2000      	movs	r0, #0
    5690:	bd70      	pop	{r4, r5, r6, pc}
    5692:	2101      	movs	r1, #1
    5694:	fa01 f604 	lsl.w	r6, r1, r4
    5698:	1d72      	adds	r2, r6, #5
    569a:	4628      	mov	r0, r5
    569c:	0092      	lsls	r2, r2, #2
    569e:	f000 fb1d 	bl	5cdc <_calloc_r>
    56a2:	2800      	cmp	r0, #0
    56a4:	d0f3      	beq.n	568e <_Balloc+0x2e>
    56a6:	6044      	str	r4, [r0, #4]
    56a8:	6086      	str	r6, [r0, #8]
    56aa:	e7e4      	b.n	5676 <_Balloc+0x16>

000056ac <_Bfree>:
    56ac:	b131      	cbz	r1, 56bc <_Bfree+0x10>
    56ae:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    56b0:	684a      	ldr	r2, [r1, #4]
    56b2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    56b6:	6008      	str	r0, [r1, #0]
    56b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    56bc:	4770      	bx	lr
    56be:	bf00      	nop

000056c0 <__multadd>:
    56c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    56c2:	690c      	ldr	r4, [r1, #16]
    56c4:	b083      	sub	sp, #12
    56c6:	460d      	mov	r5, r1
    56c8:	4606      	mov	r6, r0
    56ca:	f101 0e14 	add.w	lr, r1, #20
    56ce:	2700      	movs	r7, #0
    56d0:	f8de 0000 	ldr.w	r0, [lr]
    56d4:	b281      	uxth	r1, r0
    56d6:	fb02 3101 	mla	r1, r2, r1, r3
    56da:	0c0b      	lsrs	r3, r1, #16
    56dc:	0c00      	lsrs	r0, r0, #16
    56de:	fb02 3300 	mla	r3, r2, r0, r3
    56e2:	b289      	uxth	r1, r1
    56e4:	3701      	adds	r7, #1
    56e6:	eb01 4103 	add.w	r1, r1, r3, lsl #16
    56ea:	42bc      	cmp	r4, r7
    56ec:	f84e 1b04 	str.w	r1, [lr], #4
    56f0:	ea4f 4313 	mov.w	r3, r3, lsr #16
    56f4:	dcec      	bgt.n	56d0 <__multadd+0x10>
    56f6:	b13b      	cbz	r3, 5708 <__multadd+0x48>
    56f8:	68aa      	ldr	r2, [r5, #8]
    56fa:	4294      	cmp	r4, r2
    56fc:	da07      	bge.n	570e <__multadd+0x4e>
    56fe:	eb05 0284 	add.w	r2, r5, r4, lsl #2
    5702:	3401      	adds	r4, #1
    5704:	6153      	str	r3, [r2, #20]
    5706:	612c      	str	r4, [r5, #16]
    5708:	4628      	mov	r0, r5
    570a:	b003      	add	sp, #12
    570c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    570e:	6869      	ldr	r1, [r5, #4]
    5710:	9301      	str	r3, [sp, #4]
    5712:	3101      	adds	r1, #1
    5714:	4630      	mov	r0, r6
    5716:	f7ff ffa3 	bl	5660 <_Balloc>
    571a:	692a      	ldr	r2, [r5, #16]
    571c:	3202      	adds	r2, #2
    571e:	f105 010c 	add.w	r1, r5, #12
    5722:	4607      	mov	r7, r0
    5724:	0092      	lsls	r2, r2, #2
    5726:	300c      	adds	r0, #12
    5728:	f7fd fe7a 	bl	3420 <memcpy>
    572c:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
    572e:	6869      	ldr	r1, [r5, #4]
    5730:	9b01      	ldr	r3, [sp, #4]
    5732:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    5736:	6028      	str	r0, [r5, #0]
    5738:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
    573c:	463d      	mov	r5, r7
    573e:	e7de      	b.n	56fe <__multadd+0x3e>

00005740 <__hi0bits>:
    5740:	0c03      	lsrs	r3, r0, #16
    5742:	041b      	lsls	r3, r3, #16
    5744:	b9b3      	cbnz	r3, 5774 <__hi0bits+0x34>
    5746:	0400      	lsls	r0, r0, #16
    5748:	2310      	movs	r3, #16
    574a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    574e:	bf04      	itt	eq
    5750:	0200      	lsleq	r0, r0, #8
    5752:	3308      	addeq	r3, #8
    5754:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    5758:	bf04      	itt	eq
    575a:	0100      	lsleq	r0, r0, #4
    575c:	3304      	addeq	r3, #4
    575e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    5762:	bf04      	itt	eq
    5764:	0080      	lsleq	r0, r0, #2
    5766:	3302      	addeq	r3, #2
    5768:	2800      	cmp	r0, #0
    576a:	db07      	blt.n	577c <__hi0bits+0x3c>
    576c:	0042      	lsls	r2, r0, #1
    576e:	d403      	bmi.n	5778 <__hi0bits+0x38>
    5770:	2020      	movs	r0, #32
    5772:	4770      	bx	lr
    5774:	2300      	movs	r3, #0
    5776:	e7e8      	b.n	574a <__hi0bits+0xa>
    5778:	1c58      	adds	r0, r3, #1
    577a:	4770      	bx	lr
    577c:	4618      	mov	r0, r3
    577e:	4770      	bx	lr

00005780 <__lo0bits>:
    5780:	6803      	ldr	r3, [r0, #0]
    5782:	f013 0207 	ands.w	r2, r3, #7
    5786:	d007      	beq.n	5798 <__lo0bits+0x18>
    5788:	07d9      	lsls	r1, r3, #31
    578a:	d420      	bmi.n	57ce <__lo0bits+0x4e>
    578c:	079a      	lsls	r2, r3, #30
    578e:	d420      	bmi.n	57d2 <__lo0bits+0x52>
    5790:	089b      	lsrs	r3, r3, #2
    5792:	6003      	str	r3, [r0, #0]
    5794:	2002      	movs	r0, #2
    5796:	4770      	bx	lr
    5798:	b299      	uxth	r1, r3
    579a:	b909      	cbnz	r1, 57a0 <__lo0bits+0x20>
    579c:	0c1b      	lsrs	r3, r3, #16
    579e:	2210      	movs	r2, #16
    57a0:	f013 0fff 	tst.w	r3, #255	; 0xff
    57a4:	bf04      	itt	eq
    57a6:	0a1b      	lsreq	r3, r3, #8
    57a8:	3208      	addeq	r2, #8
    57aa:	0719      	lsls	r1, r3, #28
    57ac:	bf04      	itt	eq
    57ae:	091b      	lsreq	r3, r3, #4
    57b0:	3204      	addeq	r2, #4
    57b2:	0799      	lsls	r1, r3, #30
    57b4:	bf04      	itt	eq
    57b6:	089b      	lsreq	r3, r3, #2
    57b8:	3202      	addeq	r2, #2
    57ba:	07d9      	lsls	r1, r3, #31
    57bc:	d404      	bmi.n	57c8 <__lo0bits+0x48>
    57be:	085b      	lsrs	r3, r3, #1
    57c0:	d101      	bne.n	57c6 <__lo0bits+0x46>
    57c2:	2020      	movs	r0, #32
    57c4:	4770      	bx	lr
    57c6:	3201      	adds	r2, #1
    57c8:	6003      	str	r3, [r0, #0]
    57ca:	4610      	mov	r0, r2
    57cc:	4770      	bx	lr
    57ce:	2000      	movs	r0, #0
    57d0:	4770      	bx	lr
    57d2:	085b      	lsrs	r3, r3, #1
    57d4:	6003      	str	r3, [r0, #0]
    57d6:	2001      	movs	r0, #1
    57d8:	4770      	bx	lr
    57da:	bf00      	nop

000057dc <__i2b>:
    57dc:	b510      	push	{r4, lr}
    57de:	460c      	mov	r4, r1
    57e0:	2101      	movs	r1, #1
    57e2:	f7ff ff3d 	bl	5660 <_Balloc>
    57e6:	2201      	movs	r2, #1
    57e8:	6144      	str	r4, [r0, #20]
    57ea:	6102      	str	r2, [r0, #16]
    57ec:	bd10      	pop	{r4, pc}
    57ee:	bf00      	nop

000057f0 <__multiply>:
    57f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    57f4:	690d      	ldr	r5, [r1, #16]
    57f6:	6917      	ldr	r7, [r2, #16]
    57f8:	42bd      	cmp	r5, r7
    57fa:	b083      	sub	sp, #12
    57fc:	460c      	mov	r4, r1
    57fe:	4616      	mov	r6, r2
    5800:	da04      	bge.n	580c <__multiply+0x1c>
    5802:	462a      	mov	r2, r5
    5804:	4634      	mov	r4, r6
    5806:	463d      	mov	r5, r7
    5808:	460e      	mov	r6, r1
    580a:	4617      	mov	r7, r2
    580c:	68a3      	ldr	r3, [r4, #8]
    580e:	6861      	ldr	r1, [r4, #4]
    5810:	eb05 0807 	add.w	r8, r5, r7
    5814:	4598      	cmp	r8, r3
    5816:	bfc8      	it	gt
    5818:	3101      	addgt	r1, #1
    581a:	f7ff ff21 	bl	5660 <_Balloc>
    581e:	f100 0c14 	add.w	ip, r0, #20
    5822:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
    5826:	45cc      	cmp	ip, r9
    5828:	9000      	str	r0, [sp, #0]
    582a:	d205      	bcs.n	5838 <__multiply+0x48>
    582c:	4663      	mov	r3, ip
    582e:	2100      	movs	r1, #0
    5830:	f843 1b04 	str.w	r1, [r3], #4
    5834:	4599      	cmp	r9, r3
    5836:	d8fb      	bhi.n	5830 <__multiply+0x40>
    5838:	f106 0214 	add.w	r2, r6, #20
    583c:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
    5840:	f104 0314 	add.w	r3, r4, #20
    5844:	4552      	cmp	r2, sl
    5846:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
    584a:	d254      	bcs.n	58f6 <__multiply+0x106>
    584c:	f8cd 9004 	str.w	r9, [sp, #4]
    5850:	4699      	mov	r9, r3
    5852:	f852 3b04 	ldr.w	r3, [r2], #4
    5856:	fa1f fb83 	uxth.w	fp, r3
    585a:	f1bb 0f00 	cmp.w	fp, #0
    585e:	d020      	beq.n	58a2 <__multiply+0xb2>
    5860:	2000      	movs	r0, #0
    5862:	464f      	mov	r7, r9
    5864:	4666      	mov	r6, ip
    5866:	4605      	mov	r5, r0
    5868:	e000      	b.n	586c <__multiply+0x7c>
    586a:	461e      	mov	r6, r3
    586c:	f857 4b04 	ldr.w	r4, [r7], #4
    5870:	6830      	ldr	r0, [r6, #0]
    5872:	b2a1      	uxth	r1, r4
    5874:	b283      	uxth	r3, r0
    5876:	fb0b 3101 	mla	r1, fp, r1, r3
    587a:	0c24      	lsrs	r4, r4, #16
    587c:	0c00      	lsrs	r0, r0, #16
    587e:	194b      	adds	r3, r1, r5
    5880:	fb0b 0004 	mla	r0, fp, r4, r0
    5884:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    5888:	b299      	uxth	r1, r3
    588a:	4633      	mov	r3, r6
    588c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    5890:	45be      	cmp	lr, r7
    5892:	ea4f 4510 	mov.w	r5, r0, lsr #16
    5896:	f843 1b04 	str.w	r1, [r3], #4
    589a:	d8e6      	bhi.n	586a <__multiply+0x7a>
    589c:	6075      	str	r5, [r6, #4]
    589e:	f852 3c04 	ldr.w	r3, [r2, #-4]
    58a2:	ea5f 4b13 	movs.w	fp, r3, lsr #16
    58a6:	d020      	beq.n	58ea <__multiply+0xfa>
    58a8:	f8dc 3000 	ldr.w	r3, [ip]
    58ac:	4667      	mov	r7, ip
    58ae:	4618      	mov	r0, r3
    58b0:	464d      	mov	r5, r9
    58b2:	2100      	movs	r1, #0
    58b4:	e000      	b.n	58b8 <__multiply+0xc8>
    58b6:	4637      	mov	r7, r6
    58b8:	882c      	ldrh	r4, [r5, #0]
    58ba:	0c00      	lsrs	r0, r0, #16
    58bc:	fb0b 0004 	mla	r0, fp, r4, r0
    58c0:	4401      	add	r1, r0
    58c2:	b29c      	uxth	r4, r3
    58c4:	463e      	mov	r6, r7
    58c6:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
    58ca:	f846 3b04 	str.w	r3, [r6], #4
    58ce:	6878      	ldr	r0, [r7, #4]
    58d0:	f855 4b04 	ldr.w	r4, [r5], #4
    58d4:	b283      	uxth	r3, r0
    58d6:	0c24      	lsrs	r4, r4, #16
    58d8:	fb0b 3404 	mla	r4, fp, r4, r3
    58dc:	eb04 4311 	add.w	r3, r4, r1, lsr #16
    58e0:	45ae      	cmp	lr, r5
    58e2:	ea4f 4113 	mov.w	r1, r3, lsr #16
    58e6:	d8e6      	bhi.n	58b6 <__multiply+0xc6>
    58e8:	607b      	str	r3, [r7, #4]
    58ea:	4592      	cmp	sl, r2
    58ec:	f10c 0c04 	add.w	ip, ip, #4
    58f0:	d8af      	bhi.n	5852 <__multiply+0x62>
    58f2:	f8dd 9004 	ldr.w	r9, [sp, #4]
    58f6:	f1b8 0f00 	cmp.w	r8, #0
    58fa:	dd0b      	ble.n	5914 <__multiply+0x124>
    58fc:	f859 3c04 	ldr.w	r3, [r9, #-4]
    5900:	f1a9 0904 	sub.w	r9, r9, #4
    5904:	b11b      	cbz	r3, 590e <__multiply+0x11e>
    5906:	e005      	b.n	5914 <__multiply+0x124>
    5908:	f859 3d04 	ldr.w	r3, [r9, #-4]!
    590c:	b913      	cbnz	r3, 5914 <__multiply+0x124>
    590e:	f1b8 0801 	subs.w	r8, r8, #1
    5912:	d1f9      	bne.n	5908 <__multiply+0x118>
    5914:	9800      	ldr	r0, [sp, #0]
    5916:	f8c0 8010 	str.w	r8, [r0, #16]
    591a:	b003      	add	sp, #12
    591c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00005920 <__pow5mult>:
    5920:	f012 0303 	ands.w	r3, r2, #3
    5924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5928:	4614      	mov	r4, r2
    592a:	4607      	mov	r7, r0
    592c:	d12e      	bne.n	598c <__pow5mult+0x6c>
    592e:	460e      	mov	r6, r1
    5930:	10a4      	asrs	r4, r4, #2
    5932:	d01c      	beq.n	596e <__pow5mult+0x4e>
    5934:	6cbd      	ldr	r5, [r7, #72]	; 0x48
    5936:	b395      	cbz	r5, 599e <__pow5mult+0x7e>
    5938:	07e3      	lsls	r3, r4, #31
    593a:	f04f 0800 	mov.w	r8, #0
    593e:	d406      	bmi.n	594e <__pow5mult+0x2e>
    5940:	1064      	asrs	r4, r4, #1
    5942:	d014      	beq.n	596e <__pow5mult+0x4e>
    5944:	6828      	ldr	r0, [r5, #0]
    5946:	b1a8      	cbz	r0, 5974 <__pow5mult+0x54>
    5948:	4605      	mov	r5, r0
    594a:	07e3      	lsls	r3, r4, #31
    594c:	d5f8      	bpl.n	5940 <__pow5mult+0x20>
    594e:	462a      	mov	r2, r5
    5950:	4631      	mov	r1, r6
    5952:	4638      	mov	r0, r7
    5954:	f7ff ff4c 	bl	57f0 <__multiply>
    5958:	b1b6      	cbz	r6, 5988 <__pow5mult+0x68>
    595a:	6872      	ldr	r2, [r6, #4]
    595c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    595e:	1064      	asrs	r4, r4, #1
    5960:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    5964:	6031      	str	r1, [r6, #0]
    5966:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    596a:	4606      	mov	r6, r0
    596c:	d1ea      	bne.n	5944 <__pow5mult+0x24>
    596e:	4630      	mov	r0, r6
    5970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5974:	462a      	mov	r2, r5
    5976:	4629      	mov	r1, r5
    5978:	4638      	mov	r0, r7
    597a:	f7ff ff39 	bl	57f0 <__multiply>
    597e:	6028      	str	r0, [r5, #0]
    5980:	f8c0 8000 	str.w	r8, [r0]
    5984:	4605      	mov	r5, r0
    5986:	e7e0      	b.n	594a <__pow5mult+0x2a>
    5988:	4606      	mov	r6, r0
    598a:	e7d9      	b.n	5940 <__pow5mult+0x20>
    598c:	1e5a      	subs	r2, r3, #1
    598e:	4d0b      	ldr	r5, [pc, #44]	; (59bc <__pow5mult+0x9c>)
    5990:	2300      	movs	r3, #0
    5992:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    5996:	f7ff fe93 	bl	56c0 <__multadd>
    599a:	4606      	mov	r6, r0
    599c:	e7c8      	b.n	5930 <__pow5mult+0x10>
    599e:	2101      	movs	r1, #1
    59a0:	4638      	mov	r0, r7
    59a2:	f7ff fe5d 	bl	5660 <_Balloc>
    59a6:	f240 2171 	movw	r1, #625	; 0x271
    59aa:	2201      	movs	r2, #1
    59ac:	2300      	movs	r3, #0
    59ae:	6141      	str	r1, [r0, #20]
    59b0:	6102      	str	r2, [r0, #16]
    59b2:	4605      	mov	r5, r0
    59b4:	64b8      	str	r0, [r7, #72]	; 0x48
    59b6:	6003      	str	r3, [r0, #0]
    59b8:	e7be      	b.n	5938 <__pow5mult+0x18>
    59ba:	bf00      	nop
    59bc:	00008f30 	.word	0x00008f30

000059c0 <__lshift>:
    59c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    59c4:	4691      	mov	r9, r2
    59c6:	690a      	ldr	r2, [r1, #16]
    59c8:	688b      	ldr	r3, [r1, #8]
    59ca:	ea4f 1469 	mov.w	r4, r9, asr #5
    59ce:	eb04 0802 	add.w	r8, r4, r2
    59d2:	f108 0501 	add.w	r5, r8, #1
    59d6:	429d      	cmp	r5, r3
    59d8:	460e      	mov	r6, r1
    59da:	4682      	mov	sl, r0
    59dc:	6849      	ldr	r1, [r1, #4]
    59de:	dd04      	ble.n	59ea <__lshift+0x2a>
    59e0:	005b      	lsls	r3, r3, #1
    59e2:	429d      	cmp	r5, r3
    59e4:	f101 0101 	add.w	r1, r1, #1
    59e8:	dcfa      	bgt.n	59e0 <__lshift+0x20>
    59ea:	4650      	mov	r0, sl
    59ec:	f7ff fe38 	bl	5660 <_Balloc>
    59f0:	2c00      	cmp	r4, #0
    59f2:	f100 0214 	add.w	r2, r0, #20
    59f6:	dd38      	ble.n	5a6a <__lshift+0xaa>
    59f8:	eb02 0384 	add.w	r3, r2, r4, lsl #2
    59fc:	2100      	movs	r1, #0
    59fe:	f842 1b04 	str.w	r1, [r2], #4
    5a02:	4293      	cmp	r3, r2
    5a04:	d1fb      	bne.n	59fe <__lshift+0x3e>
    5a06:	6934      	ldr	r4, [r6, #16]
    5a08:	f106 0114 	add.w	r1, r6, #20
    5a0c:	f019 091f 	ands.w	r9, r9, #31
    5a10:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
    5a14:	d021      	beq.n	5a5a <__lshift+0x9a>
    5a16:	f1c9 0220 	rsb	r2, r9, #32
    5a1a:	2400      	movs	r4, #0
    5a1c:	680f      	ldr	r7, [r1, #0]
    5a1e:	fa07 fc09 	lsl.w	ip, r7, r9
    5a22:	ea4c 0404 	orr.w	r4, ip, r4
    5a26:	469c      	mov	ip, r3
    5a28:	f843 4b04 	str.w	r4, [r3], #4
    5a2c:	f851 4b04 	ldr.w	r4, [r1], #4
    5a30:	458e      	cmp	lr, r1
    5a32:	fa24 f402 	lsr.w	r4, r4, r2
    5a36:	d8f1      	bhi.n	5a1c <__lshift+0x5c>
    5a38:	f8cc 4004 	str.w	r4, [ip, #4]
    5a3c:	b10c      	cbz	r4, 5a42 <__lshift+0x82>
    5a3e:	f108 0502 	add.w	r5, r8, #2
    5a42:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
    5a46:	6872      	ldr	r2, [r6, #4]
    5a48:	3d01      	subs	r5, #1
    5a4a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    5a4e:	6105      	str	r5, [r0, #16]
    5a50:	6031      	str	r1, [r6, #0]
    5a52:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    5a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5a5a:	3b04      	subs	r3, #4
    5a5c:	f851 2b04 	ldr.w	r2, [r1], #4
    5a60:	f843 2f04 	str.w	r2, [r3, #4]!
    5a64:	458e      	cmp	lr, r1
    5a66:	d8f9      	bhi.n	5a5c <__lshift+0x9c>
    5a68:	e7eb      	b.n	5a42 <__lshift+0x82>
    5a6a:	4613      	mov	r3, r2
    5a6c:	e7cb      	b.n	5a06 <__lshift+0x46>
    5a6e:	bf00      	nop

00005a70 <__mcmp>:
    5a70:	6902      	ldr	r2, [r0, #16]
    5a72:	690b      	ldr	r3, [r1, #16]
    5a74:	1ad2      	subs	r2, r2, r3
    5a76:	d112      	bne.n	5a9e <__mcmp+0x2e>
    5a78:	009b      	lsls	r3, r3, #2
    5a7a:	3014      	adds	r0, #20
    5a7c:	3114      	adds	r1, #20
    5a7e:	4419      	add	r1, r3
    5a80:	b410      	push	{r4}
    5a82:	4403      	add	r3, r0
    5a84:	e001      	b.n	5a8a <__mcmp+0x1a>
    5a86:	4298      	cmp	r0, r3
    5a88:	d20b      	bcs.n	5aa2 <__mcmp+0x32>
    5a8a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
    5a8e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
    5a92:	4294      	cmp	r4, r2
    5a94:	d0f7      	beq.n	5a86 <__mcmp+0x16>
    5a96:	d307      	bcc.n	5aa8 <__mcmp+0x38>
    5a98:	2001      	movs	r0, #1
    5a9a:	bc10      	pop	{r4}
    5a9c:	4770      	bx	lr
    5a9e:	4610      	mov	r0, r2
    5aa0:	4770      	bx	lr
    5aa2:	2000      	movs	r0, #0
    5aa4:	bc10      	pop	{r4}
    5aa6:	4770      	bx	lr
    5aa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5aac:	e7f5      	b.n	5a9a <__mcmp+0x2a>
    5aae:	bf00      	nop

00005ab0 <__mdiff>:
    5ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5ab4:	690b      	ldr	r3, [r1, #16]
    5ab6:	460f      	mov	r7, r1
    5ab8:	6911      	ldr	r1, [r2, #16]
    5aba:	1a5b      	subs	r3, r3, r1
    5abc:	2b00      	cmp	r3, #0
    5abe:	4690      	mov	r8, r2
    5ac0:	d117      	bne.n	5af2 <__mdiff+0x42>
    5ac2:	0089      	lsls	r1, r1, #2
    5ac4:	f107 0214 	add.w	r2, r7, #20
    5ac8:	f108 0514 	add.w	r5, r8, #20
    5acc:	1853      	adds	r3, r2, r1
    5ace:	4429      	add	r1, r5
    5ad0:	e001      	b.n	5ad6 <__mdiff+0x26>
    5ad2:	429a      	cmp	r2, r3
    5ad4:	d25e      	bcs.n	5b94 <__mdiff+0xe4>
    5ad6:	f853 6d04 	ldr.w	r6, [r3, #-4]!
    5ada:	f851 4d04 	ldr.w	r4, [r1, #-4]!
    5ade:	42a6      	cmp	r6, r4
    5ae0:	d0f7      	beq.n	5ad2 <__mdiff+0x22>
    5ae2:	d260      	bcs.n	5ba6 <__mdiff+0xf6>
    5ae4:	463b      	mov	r3, r7
    5ae6:	4614      	mov	r4, r2
    5ae8:	4647      	mov	r7, r8
    5aea:	f04f 0901 	mov.w	r9, #1
    5aee:	4698      	mov	r8, r3
    5af0:	e006      	b.n	5b00 <__mdiff+0x50>
    5af2:	db5d      	blt.n	5bb0 <__mdiff+0x100>
    5af4:	f107 0514 	add.w	r5, r7, #20
    5af8:	f102 0414 	add.w	r4, r2, #20
    5afc:	f04f 0900 	mov.w	r9, #0
    5b00:	6879      	ldr	r1, [r7, #4]
    5b02:	f7ff fdad 	bl	5660 <_Balloc>
    5b06:	f8d8 3010 	ldr.w	r3, [r8, #16]
    5b0a:	693e      	ldr	r6, [r7, #16]
    5b0c:	f8c0 900c 	str.w	r9, [r0, #12]
    5b10:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
    5b14:	46a6      	mov	lr, r4
    5b16:	eb05 0786 	add.w	r7, r5, r6, lsl #2
    5b1a:	f100 0414 	add.w	r4, r0, #20
    5b1e:	2300      	movs	r3, #0
    5b20:	f85e 1b04 	ldr.w	r1, [lr], #4
    5b24:	f855 8b04 	ldr.w	r8, [r5], #4
    5b28:	b28a      	uxth	r2, r1
    5b2a:	fa13 f388 	uxtah	r3, r3, r8
    5b2e:	0c09      	lsrs	r1, r1, #16
    5b30:	1a9a      	subs	r2, r3, r2
    5b32:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
    5b36:	eb03 4322 	add.w	r3, r3, r2, asr #16
    5b3a:	b292      	uxth	r2, r2
    5b3c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    5b40:	45f4      	cmp	ip, lr
    5b42:	f844 2b04 	str.w	r2, [r4], #4
    5b46:	ea4f 4323 	mov.w	r3, r3, asr #16
    5b4a:	d8e9      	bhi.n	5b20 <__mdiff+0x70>
    5b4c:	42af      	cmp	r7, r5
    5b4e:	d917      	bls.n	5b80 <__mdiff+0xd0>
    5b50:	46a4      	mov	ip, r4
    5b52:	4629      	mov	r1, r5
    5b54:	f851 eb04 	ldr.w	lr, [r1], #4
    5b58:	fa13 f28e 	uxtah	r2, r3, lr
    5b5c:	1413      	asrs	r3, r2, #16
    5b5e:	eb03 431e 	add.w	r3, r3, lr, lsr #16
    5b62:	b292      	uxth	r2, r2
    5b64:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    5b68:	428f      	cmp	r7, r1
    5b6a:	f84c 2b04 	str.w	r2, [ip], #4
    5b6e:	ea4f 4323 	mov.w	r3, r3, asr #16
    5b72:	d8ef      	bhi.n	5b54 <__mdiff+0xa4>
    5b74:	43ed      	mvns	r5, r5
    5b76:	443d      	add	r5, r7
    5b78:	f025 0503 	bic.w	r5, r5, #3
    5b7c:	3504      	adds	r5, #4
    5b7e:	442c      	add	r4, r5
    5b80:	3c04      	subs	r4, #4
    5b82:	b922      	cbnz	r2, 5b8e <__mdiff+0xde>
    5b84:	f854 3d04 	ldr.w	r3, [r4, #-4]!
    5b88:	3e01      	subs	r6, #1
    5b8a:	2b00      	cmp	r3, #0
    5b8c:	d0fa      	beq.n	5b84 <__mdiff+0xd4>
    5b8e:	6106      	str	r6, [r0, #16]
    5b90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5b94:	2100      	movs	r1, #0
    5b96:	f7ff fd63 	bl	5660 <_Balloc>
    5b9a:	2201      	movs	r2, #1
    5b9c:	2300      	movs	r3, #0
    5b9e:	6102      	str	r2, [r0, #16]
    5ba0:	6143      	str	r3, [r0, #20]
    5ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5ba6:	462c      	mov	r4, r5
    5ba8:	f04f 0900 	mov.w	r9, #0
    5bac:	4615      	mov	r5, r2
    5bae:	e7a7      	b.n	5b00 <__mdiff+0x50>
    5bb0:	463b      	mov	r3, r7
    5bb2:	f107 0414 	add.w	r4, r7, #20
    5bb6:	f108 0514 	add.w	r5, r8, #20
    5bba:	4647      	mov	r7, r8
    5bbc:	f04f 0901 	mov.w	r9, #1
    5bc0:	4698      	mov	r8, r3
    5bc2:	e79d      	b.n	5b00 <__mdiff+0x50>

00005bc4 <__d2b>:
    5bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5bc8:	b082      	sub	sp, #8
    5bca:	2101      	movs	r1, #1
    5bcc:	461c      	mov	r4, r3
    5bce:	f3c3 570a 	ubfx	r7, r3, #20, #11
    5bd2:	4615      	mov	r5, r2
    5bd4:	9e08      	ldr	r6, [sp, #32]
    5bd6:	f7ff fd43 	bl	5660 <_Balloc>
    5bda:	f3c4 0413 	ubfx	r4, r4, #0, #20
    5bde:	4680      	mov	r8, r0
    5be0:	b10f      	cbz	r7, 5be6 <__d2b+0x22>
    5be2:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
    5be6:	9401      	str	r4, [sp, #4]
    5be8:	b31d      	cbz	r5, 5c32 <__d2b+0x6e>
    5bea:	a802      	add	r0, sp, #8
    5bec:	f840 5d08 	str.w	r5, [r0, #-8]!
    5bf0:	f7ff fdc6 	bl	5780 <__lo0bits>
    5bf4:	2800      	cmp	r0, #0
    5bf6:	d134      	bne.n	5c62 <__d2b+0x9e>
    5bf8:	e89d 000c 	ldmia.w	sp, {r2, r3}
    5bfc:	f8c8 2014 	str.w	r2, [r8, #20]
    5c00:	2b00      	cmp	r3, #0
    5c02:	bf0c      	ite	eq
    5c04:	2101      	moveq	r1, #1
    5c06:	2102      	movne	r1, #2
    5c08:	f8c8 3018 	str.w	r3, [r8, #24]
    5c0c:	f8c8 1010 	str.w	r1, [r8, #16]
    5c10:	b9df      	cbnz	r7, 5c4a <__d2b+0x86>
    5c12:	eb08 0381 	add.w	r3, r8, r1, lsl #2
    5c16:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
    5c1a:	6030      	str	r0, [r6, #0]
    5c1c:	6918      	ldr	r0, [r3, #16]
    5c1e:	f7ff fd8f 	bl	5740 <__hi0bits>
    5c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5c24:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
    5c28:	6018      	str	r0, [r3, #0]
    5c2a:	4640      	mov	r0, r8
    5c2c:	b002      	add	sp, #8
    5c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5c32:	a801      	add	r0, sp, #4
    5c34:	f7ff fda4 	bl	5780 <__lo0bits>
    5c38:	9b01      	ldr	r3, [sp, #4]
    5c3a:	f8c8 3014 	str.w	r3, [r8, #20]
    5c3e:	2101      	movs	r1, #1
    5c40:	3020      	adds	r0, #32
    5c42:	f8c8 1010 	str.w	r1, [r8, #16]
    5c46:	2f00      	cmp	r7, #0
    5c48:	d0e3      	beq.n	5c12 <__d2b+0x4e>
    5c4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5c4c:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
    5c50:	4407      	add	r7, r0
    5c52:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
    5c56:	6037      	str	r7, [r6, #0]
    5c58:	6018      	str	r0, [r3, #0]
    5c5a:	4640      	mov	r0, r8
    5c5c:	b002      	add	sp, #8
    5c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5c62:	e89d 000c 	ldmia.w	sp, {r2, r3}
    5c66:	f1c0 0120 	rsb	r1, r0, #32
    5c6a:	fa03 f101 	lsl.w	r1, r3, r1
    5c6e:	430a      	orrs	r2, r1
    5c70:	40c3      	lsrs	r3, r0
    5c72:	9301      	str	r3, [sp, #4]
    5c74:	f8c8 2014 	str.w	r2, [r8, #20]
    5c78:	e7c2      	b.n	5c00 <__d2b+0x3c>
    5c7a:	bf00      	nop

00005c7c <_vasnprintf_r>:
    5c7c:	b570      	push	{r4, r5, r6, lr}
    5c7e:	4615      	mov	r5, r2
    5c80:	b09a      	sub	sp, #104	; 0x68
    5c82:	6814      	ldr	r4, [r2, #0]
    5c84:	b109      	cbz	r1, 5c8a <_vasnprintf_r+0xe>
    5c86:	2c00      	cmp	r4, #0
    5c88:	d11a      	bne.n	5cc0 <_vasnprintf_r+0x44>
    5c8a:	2400      	movs	r4, #0
    5c8c:	f44f 7222 	mov.w	r2, #648	; 0x288
    5c90:	f8ad 200c 	strh.w	r2, [sp, #12]
    5c94:	9400      	str	r4, [sp, #0]
    5c96:	9404      	str	r4, [sp, #16]
    5c98:	461a      	mov	r2, r3
    5c9a:	f64f 76ff 	movw	r6, #65535	; 0xffff
    5c9e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    5ca0:	9402      	str	r4, [sp, #8]
    5ca2:	4669      	mov	r1, sp
    5ca4:	9405      	str	r4, [sp, #20]
    5ca6:	f8ad 600e 	strh.w	r6, [sp, #14]
    5caa:	f001 f809 	bl	6cc0 <_svfprintf_r>
    5cae:	2800      	cmp	r0, #0
    5cb0:	db11      	blt.n	5cd6 <_vasnprintf_r+0x5a>
    5cb2:	9b00      	ldr	r3, [sp, #0]
    5cb4:	6028      	str	r0, [r5, #0]
    5cb6:	2200      	movs	r2, #0
    5cb8:	701a      	strb	r2, [r3, #0]
    5cba:	9804      	ldr	r0, [sp, #16]
    5cbc:	b01a      	add	sp, #104	; 0x68
    5cbe:	bd70      	pop	{r4, r5, r6, pc}
    5cc0:	f44f 62c1 	mov.w	r2, #1544	; 0x608
    5cc4:	9100      	str	r1, [sp, #0]
    5cc6:	9104      	str	r1, [sp, #16]
    5cc8:	f8ad 200c 	strh.w	r2, [sp, #12]
    5ccc:	dae4      	bge.n	5c98 <_vasnprintf_r+0x1c>
    5cce:	238b      	movs	r3, #139	; 0x8b
    5cd0:	6003      	str	r3, [r0, #0]
    5cd2:	2000      	movs	r0, #0
    5cd4:	e7f2      	b.n	5cbc <_vasnprintf_r+0x40>
    5cd6:	2000      	movs	r0, #0
    5cd8:	e7f0      	b.n	5cbc <_vasnprintf_r+0x40>
    5cda:	bf00      	nop

00005cdc <_calloc_r>:
    5cdc:	b510      	push	{r4, lr}
    5cde:	fb02 f101 	mul.w	r1, r2, r1
    5ce2:	f7fe fc53 	bl	458c <_malloc_r>
    5ce6:	4604      	mov	r4, r0
    5ce8:	b1d8      	cbz	r0, 5d22 <_calloc_r+0x46>
    5cea:	f850 2c04 	ldr.w	r2, [r0, #-4]
    5cee:	f022 0203 	bic.w	r2, r2, #3
    5cf2:	3a04      	subs	r2, #4
    5cf4:	2a24      	cmp	r2, #36	; 0x24
    5cf6:	d818      	bhi.n	5d2a <_calloc_r+0x4e>
    5cf8:	2a13      	cmp	r2, #19
    5cfa:	d914      	bls.n	5d26 <_calloc_r+0x4a>
    5cfc:	2300      	movs	r3, #0
    5cfe:	2a1b      	cmp	r2, #27
    5d00:	6003      	str	r3, [r0, #0]
    5d02:	6043      	str	r3, [r0, #4]
    5d04:	d916      	bls.n	5d34 <_calloc_r+0x58>
    5d06:	2a24      	cmp	r2, #36	; 0x24
    5d08:	6083      	str	r3, [r0, #8]
    5d0a:	60c3      	str	r3, [r0, #12]
    5d0c:	bf11      	iteee	ne
    5d0e:	f100 0210 	addne.w	r2, r0, #16
    5d12:	6103      	streq	r3, [r0, #16]
    5d14:	6143      	streq	r3, [r0, #20]
    5d16:	f100 0218 	addeq.w	r2, r0, #24
    5d1a:	2300      	movs	r3, #0
    5d1c:	6013      	str	r3, [r2, #0]
    5d1e:	6053      	str	r3, [r2, #4]
    5d20:	6093      	str	r3, [r2, #8]
    5d22:	4620      	mov	r0, r4
    5d24:	bd10      	pop	{r4, pc}
    5d26:	4602      	mov	r2, r0
    5d28:	e7f7      	b.n	5d1a <_calloc_r+0x3e>
    5d2a:	2100      	movs	r1, #0
    5d2c:	f7fe ff60 	bl	4bf0 <memset>
    5d30:	4620      	mov	r0, r4
    5d32:	bd10      	pop	{r4, pc}
    5d34:	f100 0208 	add.w	r2, r0, #8
    5d38:	e7ef      	b.n	5d1a <_calloc_r+0x3e>
    5d3a:	bf00      	nop

00005d3c <quorem>:
    5d3c:	6902      	ldr	r2, [r0, #16]
    5d3e:	690b      	ldr	r3, [r1, #16]
    5d40:	4293      	cmp	r3, r2
    5d42:	f300 808d 	bgt.w	5e60 <quorem+0x124>
    5d46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5d4a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
    5d4e:	f101 0714 	add.w	r7, r1, #20
    5d52:	f100 0b14 	add.w	fp, r0, #20
    5d56:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
    5d5a:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
    5d5e:	ea4f 0488 	mov.w	r4, r8, lsl #2
    5d62:	b083      	sub	sp, #12
    5d64:	3201      	adds	r2, #1
    5d66:	fbb3 f9f2 	udiv	r9, r3, r2
    5d6a:	eb0b 0304 	add.w	r3, fp, r4
    5d6e:	9400      	str	r4, [sp, #0]
    5d70:	eb07 0a04 	add.w	sl, r7, r4
    5d74:	9301      	str	r3, [sp, #4]
    5d76:	f1b9 0f00 	cmp.w	r9, #0
    5d7a:	d039      	beq.n	5df0 <quorem+0xb4>
    5d7c:	2500      	movs	r5, #0
    5d7e:	46bc      	mov	ip, r7
    5d80:	46de      	mov	lr, fp
    5d82:	462b      	mov	r3, r5
    5d84:	f85c 6b04 	ldr.w	r6, [ip], #4
    5d88:	f8de 2000 	ldr.w	r2, [lr]
    5d8c:	b2b4      	uxth	r4, r6
    5d8e:	fb09 5504 	mla	r5, r9, r4, r5
    5d92:	0c36      	lsrs	r6, r6, #16
    5d94:	0c2c      	lsrs	r4, r5, #16
    5d96:	fb09 4406 	mla	r4, r9, r6, r4
    5d9a:	b2ad      	uxth	r5, r5
    5d9c:	1b5b      	subs	r3, r3, r5
    5d9e:	b2a6      	uxth	r6, r4
    5da0:	fa13 f382 	uxtah	r3, r3, r2
    5da4:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
    5da8:	eb06 4623 	add.w	r6, r6, r3, asr #16
    5dac:	b29b      	uxth	r3, r3
    5dae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    5db2:	45e2      	cmp	sl, ip
    5db4:	f84e 3b04 	str.w	r3, [lr], #4
    5db8:	ea4f 4514 	mov.w	r5, r4, lsr #16
    5dbc:	ea4f 4326 	mov.w	r3, r6, asr #16
    5dc0:	d2e0      	bcs.n	5d84 <quorem+0x48>
    5dc2:	9b00      	ldr	r3, [sp, #0]
    5dc4:	f85b 3003 	ldr.w	r3, [fp, r3]
    5dc8:	b993      	cbnz	r3, 5df0 <quorem+0xb4>
    5dca:	9c01      	ldr	r4, [sp, #4]
    5dcc:	1f23      	subs	r3, r4, #4
    5dce:	459b      	cmp	fp, r3
    5dd0:	d20c      	bcs.n	5dec <quorem+0xb0>
    5dd2:	f854 3c04 	ldr.w	r3, [r4, #-4]
    5dd6:	b94b      	cbnz	r3, 5dec <quorem+0xb0>
    5dd8:	f1a4 0308 	sub.w	r3, r4, #8
    5ddc:	e002      	b.n	5de4 <quorem+0xa8>
    5dde:	681a      	ldr	r2, [r3, #0]
    5de0:	3b04      	subs	r3, #4
    5de2:	b91a      	cbnz	r2, 5dec <quorem+0xb0>
    5de4:	459b      	cmp	fp, r3
    5de6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    5dea:	d3f8      	bcc.n	5dde <quorem+0xa2>
    5dec:	f8c0 8010 	str.w	r8, [r0, #16]
    5df0:	4604      	mov	r4, r0
    5df2:	f7ff fe3d 	bl	5a70 <__mcmp>
    5df6:	2800      	cmp	r0, #0
    5df8:	db2e      	blt.n	5e58 <quorem+0x11c>
    5dfa:	f109 0901 	add.w	r9, r9, #1
    5dfe:	465d      	mov	r5, fp
    5e00:	2300      	movs	r3, #0
    5e02:	f857 1b04 	ldr.w	r1, [r7], #4
    5e06:	6828      	ldr	r0, [r5, #0]
    5e08:	b28a      	uxth	r2, r1
    5e0a:	1a9a      	subs	r2, r3, r2
    5e0c:	0c09      	lsrs	r1, r1, #16
    5e0e:	fa12 f280 	uxtah	r2, r2, r0
    5e12:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
    5e16:	eb03 4322 	add.w	r3, r3, r2, asr #16
    5e1a:	b291      	uxth	r1, r2
    5e1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    5e20:	45ba      	cmp	sl, r7
    5e22:	f845 1b04 	str.w	r1, [r5], #4
    5e26:	ea4f 4323 	mov.w	r3, r3, asr #16
    5e2a:	d2ea      	bcs.n	5e02 <quorem+0xc6>
    5e2c:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
    5e30:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
    5e34:	b982      	cbnz	r2, 5e58 <quorem+0x11c>
    5e36:	1f1a      	subs	r2, r3, #4
    5e38:	4593      	cmp	fp, r2
    5e3a:	d20b      	bcs.n	5e54 <quorem+0x118>
    5e3c:	f853 2c04 	ldr.w	r2, [r3, #-4]
    5e40:	b942      	cbnz	r2, 5e54 <quorem+0x118>
    5e42:	3b08      	subs	r3, #8
    5e44:	e002      	b.n	5e4c <quorem+0x110>
    5e46:	681a      	ldr	r2, [r3, #0]
    5e48:	3b04      	subs	r3, #4
    5e4a:	b91a      	cbnz	r2, 5e54 <quorem+0x118>
    5e4c:	459b      	cmp	fp, r3
    5e4e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    5e52:	d3f8      	bcc.n	5e46 <quorem+0x10a>
    5e54:	f8c4 8010 	str.w	r8, [r4, #16]
    5e58:	4648      	mov	r0, r9
    5e5a:	b003      	add	sp, #12
    5e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5e60:	2000      	movs	r0, #0
    5e62:	4770      	bx	lr
    5e64:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00005e68 <_dtoa_r>:
    5e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5e6c:	6c01      	ldr	r1, [r0, #64]	; 0x40
    5e6e:	b097      	sub	sp, #92	; 0x5c
    5e70:	4681      	mov	r9, r0
    5e72:	9c23      	ldr	r4, [sp, #140]	; 0x8c
    5e74:	4692      	mov	sl, r2
    5e76:	469b      	mov	fp, r3
    5e78:	b149      	cbz	r1, 5e8e <_dtoa_r+0x26>
    5e7a:	6c42      	ldr	r2, [r0, #68]	; 0x44
    5e7c:	604a      	str	r2, [r1, #4]
    5e7e:	2301      	movs	r3, #1
    5e80:	4093      	lsls	r3, r2
    5e82:	608b      	str	r3, [r1, #8]
    5e84:	f7ff fc12 	bl	56ac <_Bfree>
    5e88:	2300      	movs	r3, #0
    5e8a:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
    5e8e:	f1bb 0f00 	cmp.w	fp, #0
    5e92:	46d8      	mov	r8, fp
    5e94:	db33      	blt.n	5efe <_dtoa_r+0x96>
    5e96:	2300      	movs	r3, #0
    5e98:	6023      	str	r3, [r4, #0]
    5e9a:	4ba5      	ldr	r3, [pc, #660]	; (6130 <_dtoa_r+0x2c8>)
    5e9c:	461a      	mov	r2, r3
    5e9e:	ea08 0303 	and.w	r3, r8, r3
    5ea2:	4293      	cmp	r3, r2
    5ea4:	d014      	beq.n	5ed0 <_dtoa_r+0x68>
    5ea6:	4650      	mov	r0, sl
    5ea8:	4659      	mov	r1, fp
    5eaa:	2200      	movs	r2, #0
    5eac:	2300      	movs	r3, #0
    5eae:	f7fe fadb 	bl	4468 <__aeabi_dcmpeq>
    5eb2:	4605      	mov	r5, r0
    5eb4:	b348      	cbz	r0, 5f0a <_dtoa_r+0xa2>
    5eb6:	9a22      	ldr	r2, [sp, #136]	; 0x88
    5eb8:	2301      	movs	r3, #1
    5eba:	6013      	str	r3, [r2, #0]
    5ebc:	9b24      	ldr	r3, [sp, #144]	; 0x90
    5ebe:	2b00      	cmp	r3, #0
    5ec0:	f000 80c5 	beq.w	604e <_dtoa_r+0x1e6>
    5ec4:	489b      	ldr	r0, [pc, #620]	; (6134 <_dtoa_r+0x2cc>)
    5ec6:	6018      	str	r0, [r3, #0]
    5ec8:	3801      	subs	r0, #1
    5eca:	b017      	add	sp, #92	; 0x5c
    5ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5ed0:	9a22      	ldr	r2, [sp, #136]	; 0x88
    5ed2:	f242 730f 	movw	r3, #9999	; 0x270f
    5ed6:	6013      	str	r3, [r2, #0]
    5ed8:	f1ba 0f00 	cmp.w	sl, #0
    5edc:	f000 80a2 	beq.w	6024 <_dtoa_r+0x1bc>
    5ee0:	4895      	ldr	r0, [pc, #596]	; (6138 <_dtoa_r+0x2d0>)
    5ee2:	9b24      	ldr	r3, [sp, #144]	; 0x90
    5ee4:	2b00      	cmp	r3, #0
    5ee6:	d0f0      	beq.n	5eca <_dtoa_r+0x62>
    5ee8:	78c3      	ldrb	r3, [r0, #3]
    5eea:	2b00      	cmp	r3, #0
    5eec:	f000 80b1 	beq.w	6052 <_dtoa_r+0x1ea>
    5ef0:	f100 0308 	add.w	r3, r0, #8
    5ef4:	9a24      	ldr	r2, [sp, #144]	; 0x90
    5ef6:	6013      	str	r3, [r2, #0]
    5ef8:	b017      	add	sp, #92	; 0x5c
    5efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5efe:	2301      	movs	r3, #1
    5f00:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
    5f04:	6023      	str	r3, [r4, #0]
    5f06:	46c3      	mov	fp, r8
    5f08:	e7c7      	b.n	5e9a <_dtoa_r+0x32>
    5f0a:	aa14      	add	r2, sp, #80	; 0x50
    5f0c:	ab15      	add	r3, sp, #84	; 0x54
    5f0e:	9201      	str	r2, [sp, #4]
    5f10:	9300      	str	r3, [sp, #0]
    5f12:	4652      	mov	r2, sl
    5f14:	465b      	mov	r3, fp
    5f16:	4648      	mov	r0, r9
    5f18:	f7ff fe54 	bl	5bc4 <__d2b>
    5f1c:	ea5f 5418 	movs.w	r4, r8, lsr #20
    5f20:	9008      	str	r0, [sp, #32]
    5f22:	f040 8088 	bne.w	6036 <_dtoa_r+0x1ce>
    5f26:	9d14      	ldr	r5, [sp, #80]	; 0x50
    5f28:	9c15      	ldr	r4, [sp, #84]	; 0x54
    5f2a:	442c      	add	r4, r5
    5f2c:	f204 4332 	addw	r3, r4, #1074	; 0x432
    5f30:	2b20      	cmp	r3, #32
    5f32:	f340 8291 	ble.w	6458 <_dtoa_r+0x5f0>
    5f36:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
    5f3a:	f204 4012 	addw	r0, r4, #1042	; 0x412
    5f3e:	fa08 f803 	lsl.w	r8, r8, r3
    5f42:	fa2a f000 	lsr.w	r0, sl, r0
    5f46:	ea40 0008 	orr.w	r0, r0, r8
    5f4a:	f7fd ffaf 	bl	3eac <__aeabi_ui2d>
    5f4e:	2301      	movs	r3, #1
    5f50:	3c01      	subs	r4, #1
    5f52:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
    5f56:	9310      	str	r3, [sp, #64]	; 0x40
    5f58:	2200      	movs	r2, #0
    5f5a:	4b78      	ldr	r3, [pc, #480]	; (613c <_dtoa_r+0x2d4>)
    5f5c:	f7fd fe68 	bl	3c30 <__aeabi_dsub>
    5f60:	a36d      	add	r3, pc, #436	; (adr r3, 6118 <_dtoa_r+0x2b0>)
    5f62:	e9d3 2300 	ldrd	r2, r3, [r3]
    5f66:	f7fe f817 	bl	3f98 <__aeabi_dmul>
    5f6a:	a36d      	add	r3, pc, #436	; (adr r3, 6120 <_dtoa_r+0x2b8>)
    5f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
    5f70:	f7fd fe60 	bl	3c34 <__adddf3>
    5f74:	4606      	mov	r6, r0
    5f76:	4620      	mov	r0, r4
    5f78:	460f      	mov	r7, r1
    5f7a:	f7fd ffa7 	bl	3ecc <__aeabi_i2d>
    5f7e:	a36a      	add	r3, pc, #424	; (adr r3, 6128 <_dtoa_r+0x2c0>)
    5f80:	e9d3 2300 	ldrd	r2, r3, [r3]
    5f84:	f7fe f808 	bl	3f98 <__aeabi_dmul>
    5f88:	4602      	mov	r2, r0
    5f8a:	460b      	mov	r3, r1
    5f8c:	4630      	mov	r0, r6
    5f8e:	4639      	mov	r1, r7
    5f90:	f7fd fe50 	bl	3c34 <__adddf3>
    5f94:	4606      	mov	r6, r0
    5f96:	460f      	mov	r7, r1
    5f98:	f002 fa6a 	bl	8470 <__aeabi_d2iz>
    5f9c:	2200      	movs	r2, #0
    5f9e:	9004      	str	r0, [sp, #16]
    5fa0:	2300      	movs	r3, #0
    5fa2:	4630      	mov	r0, r6
    5fa4:	4639      	mov	r1, r7
    5fa6:	f7fe fa69 	bl	447c <__aeabi_dcmplt>
    5faa:	2800      	cmp	r0, #0
    5fac:	f040 8230 	bne.w	6410 <_dtoa_r+0x5a8>
    5fb0:	9e04      	ldr	r6, [sp, #16]
    5fb2:	2e16      	cmp	r6, #22
    5fb4:	f200 8229 	bhi.w	640a <_dtoa_r+0x5a2>
    5fb8:	4b61      	ldr	r3, [pc, #388]	; (6140 <_dtoa_r+0x2d8>)
    5fba:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    5fbe:	e9d3 0100 	ldrd	r0, r1, [r3]
    5fc2:	4652      	mov	r2, sl
    5fc4:	465b      	mov	r3, fp
    5fc6:	f7fe fa77 	bl	44b8 <__aeabi_dcmpgt>
    5fca:	2800      	cmp	r0, #0
    5fcc:	f000 8249 	beq.w	6462 <_dtoa_r+0x5fa>
    5fd0:	1e73      	subs	r3, r6, #1
    5fd2:	9304      	str	r3, [sp, #16]
    5fd4:	2300      	movs	r3, #0
    5fd6:	930c      	str	r3, [sp, #48]	; 0x30
    5fd8:	1b2c      	subs	r4, r5, r4
    5fda:	1e63      	subs	r3, r4, #1
    5fdc:	9302      	str	r3, [sp, #8]
    5fde:	f100 8232 	bmi.w	6446 <_dtoa_r+0x5de>
    5fe2:	2300      	movs	r3, #0
    5fe4:	9305      	str	r3, [sp, #20]
    5fe6:	9b04      	ldr	r3, [sp, #16]
    5fe8:	2b00      	cmp	r3, #0
    5fea:	f2c0 8223 	blt.w	6434 <_dtoa_r+0x5cc>
    5fee:	9a02      	ldr	r2, [sp, #8]
    5ff0:	930b      	str	r3, [sp, #44]	; 0x2c
    5ff2:	4611      	mov	r1, r2
    5ff4:	4419      	add	r1, r3
    5ff6:	2300      	movs	r3, #0
    5ff8:	9102      	str	r1, [sp, #8]
    5ffa:	930a      	str	r3, [sp, #40]	; 0x28
    5ffc:	9b20      	ldr	r3, [sp, #128]	; 0x80
    5ffe:	2b09      	cmp	r3, #9
    6000:	d829      	bhi.n	6056 <_dtoa_r+0x1ee>
    6002:	2b05      	cmp	r3, #5
    6004:	f340 8658 	ble.w	6cb8 <_dtoa_r+0xe50>
    6008:	3b04      	subs	r3, #4
    600a:	9320      	str	r3, [sp, #128]	; 0x80
    600c:	2500      	movs	r5, #0
    600e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    6010:	3b02      	subs	r3, #2
    6012:	2b03      	cmp	r3, #3
    6014:	f200 8635 	bhi.w	6c82 <_dtoa_r+0xe1a>
    6018:	e8df f013 	tbh	[pc, r3, lsl #1]
    601c:	0228032c 	.word	0x0228032c
    6020:	04590337 	.word	0x04590337
    6024:	4b44      	ldr	r3, [pc, #272]	; (6138 <_dtoa_r+0x2d0>)
    6026:	4a47      	ldr	r2, [pc, #284]	; (6144 <_dtoa_r+0x2dc>)
    6028:	f3c8 0013 	ubfx	r0, r8, #0, #20
    602c:	2800      	cmp	r0, #0
    602e:	bf14      	ite	ne
    6030:	4618      	movne	r0, r3
    6032:	4610      	moveq	r0, r2
    6034:	e755      	b.n	5ee2 <_dtoa_r+0x7a>
    6036:	f3cb 0313 	ubfx	r3, fp, #0, #20
    603a:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
    603e:	9510      	str	r5, [sp, #64]	; 0x40
    6040:	4650      	mov	r0, sl
    6042:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    6046:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
    604a:	9d14      	ldr	r5, [sp, #80]	; 0x50
    604c:	e784      	b.n	5f58 <_dtoa_r+0xf0>
    604e:	483e      	ldr	r0, [pc, #248]	; (6148 <_dtoa_r+0x2e0>)
    6050:	e73b      	b.n	5eca <_dtoa_r+0x62>
    6052:	1cc3      	adds	r3, r0, #3
    6054:	e74e      	b.n	5ef4 <_dtoa_r+0x8c>
    6056:	2100      	movs	r1, #0
    6058:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
    605c:	4648      	mov	r0, r9
    605e:	9120      	str	r1, [sp, #128]	; 0x80
    6060:	f7ff fafe 	bl	5660 <_Balloc>
    6064:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6068:	9306      	str	r3, [sp, #24]
    606a:	9a20      	ldr	r2, [sp, #128]	; 0x80
    606c:	930d      	str	r3, [sp, #52]	; 0x34
    606e:	2301      	movs	r3, #1
    6070:	9007      	str	r0, [sp, #28]
    6072:	9221      	str	r2, [sp, #132]	; 0x84
    6074:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
    6078:	9309      	str	r3, [sp, #36]	; 0x24
    607a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    607c:	2b00      	cmp	r3, #0
    607e:	f2c0 80d1 	blt.w	6224 <_dtoa_r+0x3bc>
    6082:	9a04      	ldr	r2, [sp, #16]
    6084:	2a0e      	cmp	r2, #14
    6086:	f300 80cd 	bgt.w	6224 <_dtoa_r+0x3bc>
    608a:	4b2d      	ldr	r3, [pc, #180]	; (6140 <_dtoa_r+0x2d8>)
    608c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    6090:	e9d3 3400 	ldrd	r3, r4, [r3]
    6094:	e9cd 3402 	strd	r3, r4, [sp, #8]
    6098:	9b21      	ldr	r3, [sp, #132]	; 0x84
    609a:	2b00      	cmp	r3, #0
    609c:	f2c0 8300 	blt.w	66a0 <_dtoa_r+0x838>
    60a0:	4656      	mov	r6, sl
    60a2:	465f      	mov	r7, fp
    60a4:	4650      	mov	r0, sl
    60a6:	4659      	mov	r1, fp
    60a8:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
    60ac:	4652      	mov	r2, sl
    60ae:	465b      	mov	r3, fp
    60b0:	f7fe f89c 	bl	41ec <__aeabi_ddiv>
    60b4:	f002 f9dc 	bl	8470 <__aeabi_d2iz>
    60b8:	4604      	mov	r4, r0
    60ba:	f7fd ff07 	bl	3ecc <__aeabi_i2d>
    60be:	4652      	mov	r2, sl
    60c0:	465b      	mov	r3, fp
    60c2:	f7fd ff69 	bl	3f98 <__aeabi_dmul>
    60c6:	460b      	mov	r3, r1
    60c8:	4602      	mov	r2, r0
    60ca:	4639      	mov	r1, r7
    60cc:	4630      	mov	r0, r6
    60ce:	f7fd fdaf 	bl	3c30 <__aeabi_dsub>
    60d2:	9d07      	ldr	r5, [sp, #28]
    60d4:	f104 0330 	add.w	r3, r4, #48	; 0x30
    60d8:	702b      	strb	r3, [r5, #0]
    60da:	9b06      	ldr	r3, [sp, #24]
    60dc:	2b01      	cmp	r3, #1
    60de:	4606      	mov	r6, r0
    60e0:	460f      	mov	r7, r1
    60e2:	f105 0501 	add.w	r5, r5, #1
    60e6:	d062      	beq.n	61ae <_dtoa_r+0x346>
    60e8:	2200      	movs	r2, #0
    60ea:	4b18      	ldr	r3, [pc, #96]	; (614c <_dtoa_r+0x2e4>)
    60ec:	f7fd ff54 	bl	3f98 <__aeabi_dmul>
    60f0:	2200      	movs	r2, #0
    60f2:	2300      	movs	r3, #0
    60f4:	4606      	mov	r6, r0
    60f6:	460f      	mov	r7, r1
    60f8:	f7fe f9b6 	bl	4468 <__aeabi_dcmpeq>
    60fc:	2800      	cmp	r0, #0
    60fe:	d17e      	bne.n	61fe <_dtoa_r+0x396>
    6100:	f8cd 9014 	str.w	r9, [sp, #20]
    6104:	f8dd a018 	ldr.w	sl, [sp, #24]
    6108:	f8dd b01c 	ldr.w	fp, [sp, #28]
    610c:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
    6110:	e029      	b.n	6166 <_dtoa_r+0x2fe>
    6112:	bf00      	nop
    6114:	f3af 8000 	nop.w
    6118:	636f4361 	.word	0x636f4361
    611c:	3fd287a7 	.word	0x3fd287a7
    6120:	8b60c8b3 	.word	0x8b60c8b3
    6124:	3fc68a28 	.word	0x3fc68a28
    6128:	509f79fb 	.word	0x509f79fb
    612c:	3fd34413 	.word	0x3fd34413
    6130:	7ff00000 	.word	0x7ff00000
    6134:	00008f79 	.word	0x00008f79
    6138:	00008f74 	.word	0x00008f74
    613c:	3ff80000 	.word	0x3ff80000
    6140:	00008e68 	.word	0x00008e68
    6144:	00008f68 	.word	0x00008f68
    6148:	00008f78 	.word	0x00008f78
    614c:	40240000 	.word	0x40240000
    6150:	f7fd ff22 	bl	3f98 <__aeabi_dmul>
    6154:	2200      	movs	r2, #0
    6156:	2300      	movs	r3, #0
    6158:	4606      	mov	r6, r0
    615a:	460f      	mov	r7, r1
    615c:	f7fe f984 	bl	4468 <__aeabi_dcmpeq>
    6160:	2800      	cmp	r0, #0
    6162:	f040 83b7 	bne.w	68d4 <_dtoa_r+0xa6c>
    6166:	4642      	mov	r2, r8
    6168:	464b      	mov	r3, r9
    616a:	4630      	mov	r0, r6
    616c:	4639      	mov	r1, r7
    616e:	f7fe f83d 	bl	41ec <__aeabi_ddiv>
    6172:	f002 f97d 	bl	8470 <__aeabi_d2iz>
    6176:	4604      	mov	r4, r0
    6178:	f7fd fea8 	bl	3ecc <__aeabi_i2d>
    617c:	4642      	mov	r2, r8
    617e:	464b      	mov	r3, r9
    6180:	f7fd ff0a 	bl	3f98 <__aeabi_dmul>
    6184:	4602      	mov	r2, r0
    6186:	460b      	mov	r3, r1
    6188:	4630      	mov	r0, r6
    618a:	4639      	mov	r1, r7
    618c:	f7fd fd50 	bl	3c30 <__aeabi_dsub>
    6190:	f104 0e30 	add.w	lr, r4, #48	; 0x30
    6194:	f805 eb01 	strb.w	lr, [r5], #1
    6198:	ebcb 0e05 	rsb	lr, fp, r5
    619c:	45d6      	cmp	lr, sl
    619e:	4606      	mov	r6, r0
    61a0:	460f      	mov	r7, r1
    61a2:	f04f 0200 	mov.w	r2, #0
    61a6:	4bb0      	ldr	r3, [pc, #704]	; (6468 <_dtoa_r+0x600>)
    61a8:	d1d2      	bne.n	6150 <_dtoa_r+0x2e8>
    61aa:	f8dd 9014 	ldr.w	r9, [sp, #20]
    61ae:	4632      	mov	r2, r6
    61b0:	463b      	mov	r3, r7
    61b2:	4630      	mov	r0, r6
    61b4:	4639      	mov	r1, r7
    61b6:	f7fd fd3d 	bl	3c34 <__adddf3>
    61ba:	4606      	mov	r6, r0
    61bc:	460f      	mov	r7, r1
    61be:	4602      	mov	r2, r0
    61c0:	460b      	mov	r3, r1
    61c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    61c6:	f7fe f959 	bl	447c <__aeabi_dcmplt>
    61ca:	b940      	cbnz	r0, 61de <_dtoa_r+0x376>
    61cc:	4632      	mov	r2, r6
    61ce:	463b      	mov	r3, r7
    61d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    61d4:	f7fe f948 	bl	4468 <__aeabi_dcmpeq>
    61d8:	b188      	cbz	r0, 61fe <_dtoa_r+0x396>
    61da:	07e3      	lsls	r3, r4, #31
    61dc:	d50f      	bpl.n	61fe <_dtoa_r+0x396>
    61de:	f815 4c01 	ldrb.w	r4, [r5, #-1]
    61e2:	9a07      	ldr	r2, [sp, #28]
    61e4:	1e6b      	subs	r3, r5, #1
    61e6:	e004      	b.n	61f2 <_dtoa_r+0x38a>
    61e8:	429a      	cmp	r2, r3
    61ea:	f000 842c 	beq.w	6a46 <_dtoa_r+0xbde>
    61ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    61f2:	2c39      	cmp	r4, #57	; 0x39
    61f4:	f103 0501 	add.w	r5, r3, #1
    61f8:	d0f6      	beq.n	61e8 <_dtoa_r+0x380>
    61fa:	3401      	adds	r4, #1
    61fc:	701c      	strb	r4, [r3, #0]
    61fe:	9908      	ldr	r1, [sp, #32]
    6200:	4648      	mov	r0, r9
    6202:	f7ff fa53 	bl	56ac <_Bfree>
    6206:	2200      	movs	r2, #0
    6208:	9b04      	ldr	r3, [sp, #16]
    620a:	702a      	strb	r2, [r5, #0]
    620c:	9a22      	ldr	r2, [sp, #136]	; 0x88
    620e:	3301      	adds	r3, #1
    6210:	6013      	str	r3, [r2, #0]
    6212:	9b24      	ldr	r3, [sp, #144]	; 0x90
    6214:	2b00      	cmp	r3, #0
    6216:	f000 83a7 	beq.w	6968 <_dtoa_r+0xb00>
    621a:	9807      	ldr	r0, [sp, #28]
    621c:	601d      	str	r5, [r3, #0]
    621e:	b017      	add	sp, #92	; 0x5c
    6220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6224:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6226:	2a00      	cmp	r2, #0
    6228:	f000 8112 	beq.w	6450 <_dtoa_r+0x5e8>
    622c:	9a20      	ldr	r2, [sp, #128]	; 0x80
    622e:	2a01      	cmp	r2, #1
    6230:	f340 8258 	ble.w	66e4 <_dtoa_r+0x87c>
    6234:	9b06      	ldr	r3, [sp, #24]
    6236:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6238:	1e5f      	subs	r7, r3, #1
    623a:	42ba      	cmp	r2, r7
    623c:	f2c0 8397 	blt.w	696e <_dtoa_r+0xb06>
    6240:	1bd7      	subs	r7, r2, r7
    6242:	9b06      	ldr	r3, [sp, #24]
    6244:	2b00      	cmp	r3, #0
    6246:	f2c0 848a 	blt.w	6b5e <_dtoa_r+0xcf6>
    624a:	9d05      	ldr	r5, [sp, #20]
    624c:	9b06      	ldr	r3, [sp, #24]
    624e:	9a05      	ldr	r2, [sp, #20]
    6250:	441a      	add	r2, r3
    6252:	9205      	str	r2, [sp, #20]
    6254:	9a02      	ldr	r2, [sp, #8]
    6256:	2101      	movs	r1, #1
    6258:	441a      	add	r2, r3
    625a:	4648      	mov	r0, r9
    625c:	9202      	str	r2, [sp, #8]
    625e:	f7ff fabd 	bl	57dc <__i2b>
    6262:	4606      	mov	r6, r0
    6264:	b165      	cbz	r5, 6280 <_dtoa_r+0x418>
    6266:	9902      	ldr	r1, [sp, #8]
    6268:	2900      	cmp	r1, #0
    626a:	460b      	mov	r3, r1
    626c:	dd08      	ble.n	6280 <_dtoa_r+0x418>
    626e:	42a9      	cmp	r1, r5
    6270:	9a05      	ldr	r2, [sp, #20]
    6272:	bfa8      	it	ge
    6274:	462b      	movge	r3, r5
    6276:	1ad2      	subs	r2, r2, r3
    6278:	1aed      	subs	r5, r5, r3
    627a:	1acb      	subs	r3, r1, r3
    627c:	9205      	str	r2, [sp, #20]
    627e:	9302      	str	r3, [sp, #8]
    6280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6282:	2b00      	cmp	r3, #0
    6284:	f340 82fc 	ble.w	6880 <_dtoa_r+0xa18>
    6288:	9a09      	ldr	r2, [sp, #36]	; 0x24
    628a:	2a00      	cmp	r2, #0
    628c:	f000 8201 	beq.w	6692 <_dtoa_r+0x82a>
    6290:	2f00      	cmp	r7, #0
    6292:	f000 81fe 	beq.w	6692 <_dtoa_r+0x82a>
    6296:	4631      	mov	r1, r6
    6298:	463a      	mov	r2, r7
    629a:	4648      	mov	r0, r9
    629c:	f7ff fb40 	bl	5920 <__pow5mult>
    62a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
    62a4:	4601      	mov	r1, r0
    62a6:	4642      	mov	r2, r8
    62a8:	4606      	mov	r6, r0
    62aa:	4648      	mov	r0, r9
    62ac:	f7ff faa0 	bl	57f0 <__multiply>
    62b0:	4641      	mov	r1, r8
    62b2:	4604      	mov	r4, r0
    62b4:	4648      	mov	r0, r9
    62b6:	f7ff f9f9 	bl	56ac <_Bfree>
    62ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    62bc:	1bdb      	subs	r3, r3, r7
    62be:	930a      	str	r3, [sp, #40]	; 0x28
    62c0:	f040 81e6 	bne.w	6690 <_dtoa_r+0x828>
    62c4:	2101      	movs	r1, #1
    62c6:	4648      	mov	r0, r9
    62c8:	f7ff fa88 	bl	57dc <__i2b>
    62cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    62ce:	4680      	mov	r8, r0
    62d0:	2b00      	cmp	r3, #0
    62d2:	f000 8219 	beq.w	6708 <_dtoa_r+0x8a0>
    62d6:	4601      	mov	r1, r0
    62d8:	461a      	mov	r2, r3
    62da:	4648      	mov	r0, r9
    62dc:	f7ff fb20 	bl	5920 <__pow5mult>
    62e0:	9b20      	ldr	r3, [sp, #128]	; 0x80
    62e2:	2b01      	cmp	r3, #1
    62e4:	4680      	mov	r8, r0
    62e6:	f340 82f8 	ble.w	68da <_dtoa_r+0xa72>
    62ea:	2700      	movs	r7, #0
    62ec:	f8d8 3010 	ldr.w	r3, [r8, #16]
    62f0:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    62f4:	6918      	ldr	r0, [r3, #16]
    62f6:	f7ff fa23 	bl	5740 <__hi0bits>
    62fa:	f1c0 0020 	rsb	r0, r0, #32
    62fe:	9a02      	ldr	r2, [sp, #8]
    6300:	4410      	add	r0, r2
    6302:	f010 001f 	ands.w	r0, r0, #31
    6306:	f000 81f6 	beq.w	66f6 <_dtoa_r+0x88e>
    630a:	f1c0 0320 	rsb	r3, r0, #32
    630e:	2b04      	cmp	r3, #4
    6310:	f340 84ca 	ble.w	6ca8 <_dtoa_r+0xe40>
    6314:	9b05      	ldr	r3, [sp, #20]
    6316:	f1c0 001c 	rsb	r0, r0, #28
    631a:	4403      	add	r3, r0
    631c:	9305      	str	r3, [sp, #20]
    631e:	4613      	mov	r3, r2
    6320:	4403      	add	r3, r0
    6322:	4405      	add	r5, r0
    6324:	9302      	str	r3, [sp, #8]
    6326:	9b05      	ldr	r3, [sp, #20]
    6328:	2b00      	cmp	r3, #0
    632a:	dd05      	ble.n	6338 <_dtoa_r+0x4d0>
    632c:	4621      	mov	r1, r4
    632e:	461a      	mov	r2, r3
    6330:	4648      	mov	r0, r9
    6332:	f7ff fb45 	bl	59c0 <__lshift>
    6336:	4604      	mov	r4, r0
    6338:	9b02      	ldr	r3, [sp, #8]
    633a:	2b00      	cmp	r3, #0
    633c:	dd05      	ble.n	634a <_dtoa_r+0x4e2>
    633e:	4641      	mov	r1, r8
    6340:	461a      	mov	r2, r3
    6342:	4648      	mov	r0, r9
    6344:	f7ff fb3c 	bl	59c0 <__lshift>
    6348:	4680      	mov	r8, r0
    634a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    634c:	2b00      	cmp	r3, #0
    634e:	f040 827c 	bne.w	684a <_dtoa_r+0x9e2>
    6352:	9b06      	ldr	r3, [sp, #24]
    6354:	2b00      	cmp	r3, #0
    6356:	f340 8295 	ble.w	6884 <_dtoa_r+0xa1c>
    635a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    635c:	2b00      	cmp	r3, #0
    635e:	f040 81f5 	bne.w	674c <_dtoa_r+0x8e4>
    6362:	f8dd b01c 	ldr.w	fp, [sp, #28]
    6366:	9f06      	ldr	r7, [sp, #24]
    6368:	465d      	mov	r5, fp
    636a:	e002      	b.n	6372 <_dtoa_r+0x50a>
    636c:	f7ff f9a8 	bl	56c0 <__multadd>
    6370:	4604      	mov	r4, r0
    6372:	4641      	mov	r1, r8
    6374:	4620      	mov	r0, r4
    6376:	f7ff fce1 	bl	5d3c <quorem>
    637a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
    637e:	f805 ab01 	strb.w	sl, [r5], #1
    6382:	ebcb 0305 	rsb	r3, fp, r5
    6386:	42bb      	cmp	r3, r7
    6388:	f04f 020a 	mov.w	r2, #10
    638c:	f04f 0300 	mov.w	r3, #0
    6390:	4621      	mov	r1, r4
    6392:	4648      	mov	r0, r9
    6394:	dbea      	blt.n	636c <_dtoa_r+0x504>
    6396:	9b07      	ldr	r3, [sp, #28]
    6398:	9a06      	ldr	r2, [sp, #24]
    639a:	2a01      	cmp	r2, #1
    639c:	bfac      	ite	ge
    639e:	189b      	addge	r3, r3, r2
    63a0:	3301      	addlt	r3, #1
    63a2:	461d      	mov	r5, r3
    63a4:	f04f 0b00 	mov.w	fp, #0
    63a8:	4621      	mov	r1, r4
    63aa:	2201      	movs	r2, #1
    63ac:	4648      	mov	r0, r9
    63ae:	f7ff fb07 	bl	59c0 <__lshift>
    63b2:	4641      	mov	r1, r8
    63b4:	9008      	str	r0, [sp, #32]
    63b6:	f7ff fb5b 	bl	5a70 <__mcmp>
    63ba:	2800      	cmp	r0, #0
    63bc:	f340 830d 	ble.w	69da <_dtoa_r+0xb72>
    63c0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
    63c4:	9907      	ldr	r1, [sp, #28]
    63c6:	1e6b      	subs	r3, r5, #1
    63c8:	e004      	b.n	63d4 <_dtoa_r+0x56c>
    63ca:	428b      	cmp	r3, r1
    63cc:	f000 8278 	beq.w	68c0 <_dtoa_r+0xa58>
    63d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    63d4:	2a39      	cmp	r2, #57	; 0x39
    63d6:	f103 0501 	add.w	r5, r3, #1
    63da:	d0f6      	beq.n	63ca <_dtoa_r+0x562>
    63dc:	3201      	adds	r2, #1
    63de:	701a      	strb	r2, [r3, #0]
    63e0:	4641      	mov	r1, r8
    63e2:	4648      	mov	r0, r9
    63e4:	f7ff f962 	bl	56ac <_Bfree>
    63e8:	2e00      	cmp	r6, #0
    63ea:	f43f af08 	beq.w	61fe <_dtoa_r+0x396>
    63ee:	f1bb 0f00 	cmp.w	fp, #0
    63f2:	d005      	beq.n	6400 <_dtoa_r+0x598>
    63f4:	45b3      	cmp	fp, r6
    63f6:	d003      	beq.n	6400 <_dtoa_r+0x598>
    63f8:	4659      	mov	r1, fp
    63fa:	4648      	mov	r0, r9
    63fc:	f7ff f956 	bl	56ac <_Bfree>
    6400:	4631      	mov	r1, r6
    6402:	4648      	mov	r0, r9
    6404:	f7ff f952 	bl	56ac <_Bfree>
    6408:	e6f9      	b.n	61fe <_dtoa_r+0x396>
    640a:	2301      	movs	r3, #1
    640c:	930c      	str	r3, [sp, #48]	; 0x30
    640e:	e5e3      	b.n	5fd8 <_dtoa_r+0x170>
    6410:	f8dd 8010 	ldr.w	r8, [sp, #16]
    6414:	4640      	mov	r0, r8
    6416:	f7fd fd59 	bl	3ecc <__aeabi_i2d>
    641a:	4602      	mov	r2, r0
    641c:	460b      	mov	r3, r1
    641e:	4630      	mov	r0, r6
    6420:	4639      	mov	r1, r7
    6422:	f7fe f821 	bl	4468 <__aeabi_dcmpeq>
    6426:	2800      	cmp	r0, #0
    6428:	f47f adc2 	bne.w	5fb0 <_dtoa_r+0x148>
    642c:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    6430:	9304      	str	r3, [sp, #16]
    6432:	e5bd      	b.n	5fb0 <_dtoa_r+0x148>
    6434:	9a05      	ldr	r2, [sp, #20]
    6436:	9b04      	ldr	r3, [sp, #16]
    6438:	1ad2      	subs	r2, r2, r3
    643a:	425b      	negs	r3, r3
    643c:	930a      	str	r3, [sp, #40]	; 0x28
    643e:	2300      	movs	r3, #0
    6440:	9205      	str	r2, [sp, #20]
    6442:	930b      	str	r3, [sp, #44]	; 0x2c
    6444:	e5da      	b.n	5ffc <_dtoa_r+0x194>
    6446:	425b      	negs	r3, r3
    6448:	9305      	str	r3, [sp, #20]
    644a:	2300      	movs	r3, #0
    644c:	9302      	str	r3, [sp, #8]
    644e:	e5ca      	b.n	5fe6 <_dtoa_r+0x17e>
    6450:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    6452:	9d05      	ldr	r5, [sp, #20]
    6454:	9e09      	ldr	r6, [sp, #36]	; 0x24
    6456:	e705      	b.n	6264 <_dtoa_r+0x3fc>
    6458:	f1c3 0820 	rsb	r8, r3, #32
    645c:	fa0a f008 	lsl.w	r0, sl, r8
    6460:	e573      	b.n	5f4a <_dtoa_r+0xe2>
    6462:	900c      	str	r0, [sp, #48]	; 0x30
    6464:	e5b8      	b.n	5fd8 <_dtoa_r+0x170>
    6466:	bf00      	nop
    6468:	40240000 	.word	0x40240000
    646c:	2300      	movs	r3, #0
    646e:	9309      	str	r3, [sp, #36]	; 0x24
    6470:	9b04      	ldr	r3, [sp, #16]
    6472:	9a21      	ldr	r2, [sp, #132]	; 0x84
    6474:	4413      	add	r3, r2
    6476:	930d      	str	r3, [sp, #52]	; 0x34
    6478:	3301      	adds	r3, #1
    647a:	2b00      	cmp	r3, #0
    647c:	9306      	str	r3, [sp, #24]
    647e:	f340 8283 	ble.w	6988 <_dtoa_r+0xb20>
    6482:	9c06      	ldr	r4, [sp, #24]
    6484:	4626      	mov	r6, r4
    6486:	2100      	movs	r1, #0
    6488:	2e17      	cmp	r6, #23
    648a:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
    648e:	d90b      	bls.n	64a8 <_dtoa_r+0x640>
    6490:	2201      	movs	r2, #1
    6492:	2304      	movs	r3, #4
    6494:	005b      	lsls	r3, r3, #1
    6496:	f103 0014 	add.w	r0, r3, #20
    649a:	42b0      	cmp	r0, r6
    649c:	4611      	mov	r1, r2
    649e:	f102 0201 	add.w	r2, r2, #1
    64a2:	d9f7      	bls.n	6494 <_dtoa_r+0x62c>
    64a4:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
    64a8:	4648      	mov	r0, r9
    64aa:	f7ff f8d9 	bl	5660 <_Balloc>
    64ae:	2c0e      	cmp	r4, #14
    64b0:	9007      	str	r0, [sp, #28]
    64b2:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
    64b6:	f63f ade0 	bhi.w	607a <_dtoa_r+0x212>
    64ba:	2d00      	cmp	r5, #0
    64bc:	f43f addd 	beq.w	607a <_dtoa_r+0x212>
    64c0:	9904      	ldr	r1, [sp, #16]
    64c2:	4657      	mov	r7, sl
    64c4:	46d8      	mov	r8, fp
    64c6:	2900      	cmp	r1, #0
    64c8:	e9cd 780e 	strd	r7, r8, [sp, #56]	; 0x38
    64cc:	f340 8292 	ble.w	69f4 <_dtoa_r+0xb8c>
    64d0:	4b91      	ldr	r3, [pc, #580]	; (6718 <_dtoa_r+0x8b0>)
    64d2:	f001 020f 	and.w	r2, r1, #15
    64d6:	110e      	asrs	r6, r1, #4
    64d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    64dc:	06f0      	lsls	r0, r6, #27
    64de:	e9d3 4500 	ldrd	r4, r5, [r3]
    64e2:	f140 824c 	bpl.w	697e <_dtoa_r+0xb16>
    64e6:	4b8d      	ldr	r3, [pc, #564]	; (671c <_dtoa_r+0x8b4>)
    64e8:	4650      	mov	r0, sl
    64ea:	4659      	mov	r1, fp
    64ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    64f0:	f7fd fe7c 	bl	41ec <__aeabi_ddiv>
    64f4:	f006 060f 	and.w	r6, r6, #15
    64f8:	4682      	mov	sl, r0
    64fa:	468b      	mov	fp, r1
    64fc:	f04f 0803 	mov.w	r8, #3
    6500:	b186      	cbz	r6, 6524 <_dtoa_r+0x6bc>
    6502:	4f86      	ldr	r7, [pc, #536]	; (671c <_dtoa_r+0x8b4>)
    6504:	07f1      	lsls	r1, r6, #31
    6506:	d509      	bpl.n	651c <_dtoa_r+0x6b4>
    6508:	4620      	mov	r0, r4
    650a:	4629      	mov	r1, r5
    650c:	e9d7 2300 	ldrd	r2, r3, [r7]
    6510:	f7fd fd42 	bl	3f98 <__aeabi_dmul>
    6514:	f108 0801 	add.w	r8, r8, #1
    6518:	4604      	mov	r4, r0
    651a:	460d      	mov	r5, r1
    651c:	1076      	asrs	r6, r6, #1
    651e:	f107 0708 	add.w	r7, r7, #8
    6522:	d1ef      	bne.n	6504 <_dtoa_r+0x69c>
    6524:	4622      	mov	r2, r4
    6526:	462b      	mov	r3, r5
    6528:	4650      	mov	r0, sl
    652a:	4659      	mov	r1, fp
    652c:	f7fd fe5e 	bl	41ec <__aeabi_ddiv>
    6530:	4606      	mov	r6, r0
    6532:	460f      	mov	r7, r1
    6534:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6536:	b143      	cbz	r3, 654a <_dtoa_r+0x6e2>
    6538:	2200      	movs	r2, #0
    653a:	4b79      	ldr	r3, [pc, #484]	; (6720 <_dtoa_r+0x8b8>)
    653c:	4630      	mov	r0, r6
    653e:	4639      	mov	r1, r7
    6540:	f7fd ff9c 	bl	447c <__aeabi_dcmplt>
    6544:	2800      	cmp	r0, #0
    6546:	f040 8320 	bne.w	6b8a <_dtoa_r+0xd22>
    654a:	4640      	mov	r0, r8
    654c:	f7fd fcbe 	bl	3ecc <__aeabi_i2d>
    6550:	4632      	mov	r2, r6
    6552:	463b      	mov	r3, r7
    6554:	f7fd fd20 	bl	3f98 <__aeabi_dmul>
    6558:	4b72      	ldr	r3, [pc, #456]	; (6724 <_dtoa_r+0x8bc>)
    655a:	2200      	movs	r2, #0
    655c:	f7fd fb6a 	bl	3c34 <__adddf3>
    6560:	9b06      	ldr	r3, [sp, #24]
    6562:	4604      	mov	r4, r0
    6564:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
    6568:	2b00      	cmp	r3, #0
    656a:	f000 81df 	beq.w	692c <_dtoa_r+0xac4>
    656e:	9b04      	ldr	r3, [sp, #16]
    6570:	f8dd 8018 	ldr.w	r8, [sp, #24]
    6574:	9311      	str	r3, [sp, #68]	; 0x44
    6576:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6578:	2b00      	cmp	r3, #0
    657a:	f000 8297 	beq.w	6aac <_dtoa_r+0xc44>
    657e:	4b66      	ldr	r3, [pc, #408]	; (6718 <_dtoa_r+0x8b0>)
    6580:	4969      	ldr	r1, [pc, #420]	; (6728 <_dtoa_r+0x8c0>)
    6582:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
    6586:	e953 2302 	ldrd	r2, r3, [r3, #-8]
    658a:	2000      	movs	r0, #0
    658c:	f7fd fe2e 	bl	41ec <__aeabi_ddiv>
    6590:	4622      	mov	r2, r4
    6592:	462b      	mov	r3, r5
    6594:	f7fd fb4c 	bl	3c30 <__aeabi_dsub>
    6598:	4682      	mov	sl, r0
    659a:	468b      	mov	fp, r1
    659c:	4630      	mov	r0, r6
    659e:	4639      	mov	r1, r7
    65a0:	f001 ff66 	bl	8470 <__aeabi_d2iz>
    65a4:	4604      	mov	r4, r0
    65a6:	f7fd fc91 	bl	3ecc <__aeabi_i2d>
    65aa:	4602      	mov	r2, r0
    65ac:	460b      	mov	r3, r1
    65ae:	4630      	mov	r0, r6
    65b0:	4639      	mov	r1, r7
    65b2:	f7fd fb3d 	bl	3c30 <__aeabi_dsub>
    65b6:	3430      	adds	r4, #48	; 0x30
    65b8:	9d07      	ldr	r5, [sp, #28]
    65ba:	b2e4      	uxtb	r4, r4
    65bc:	4606      	mov	r6, r0
    65be:	460f      	mov	r7, r1
    65c0:	702c      	strb	r4, [r5, #0]
    65c2:	4602      	mov	r2, r0
    65c4:	460b      	mov	r3, r1
    65c6:	4650      	mov	r0, sl
    65c8:	4659      	mov	r1, fp
    65ca:	3501      	adds	r5, #1
    65cc:	f7fd ff74 	bl	44b8 <__aeabi_dcmpgt>
    65d0:	2800      	cmp	r0, #0
    65d2:	d14c      	bne.n	666e <_dtoa_r+0x806>
    65d4:	4632      	mov	r2, r6
    65d6:	463b      	mov	r3, r7
    65d8:	2000      	movs	r0, #0
    65da:	4951      	ldr	r1, [pc, #324]	; (6720 <_dtoa_r+0x8b8>)
    65dc:	f7fd fb28 	bl	3c30 <__aeabi_dsub>
    65e0:	4602      	mov	r2, r0
    65e2:	460b      	mov	r3, r1
    65e4:	4650      	mov	r0, sl
    65e6:	4659      	mov	r1, fp
    65e8:	f7fd ff66 	bl	44b8 <__aeabi_dcmpgt>
    65ec:	2800      	cmp	r0, #0
    65ee:	f040 830d 	bne.w	6c0c <_dtoa_r+0xda4>
    65f2:	f1b8 0f01 	cmp.w	r8, #1
    65f6:	f340 81b3 	ble.w	6960 <_dtoa_r+0xaf8>
    65fa:	9b07      	ldr	r3, [sp, #28]
    65fc:	4498      	add	r8, r3
    65fe:	e00d      	b.n	661c <_dtoa_r+0x7b4>
    6600:	2000      	movs	r0, #0
    6602:	4947      	ldr	r1, [pc, #284]	; (6720 <_dtoa_r+0x8b8>)
    6604:	f7fd fb14 	bl	3c30 <__aeabi_dsub>
    6608:	4652      	mov	r2, sl
    660a:	465b      	mov	r3, fp
    660c:	f7fd ff36 	bl	447c <__aeabi_dcmplt>
    6610:	2800      	cmp	r0, #0
    6612:	f040 82fb 	bne.w	6c0c <_dtoa_r+0xda4>
    6616:	4545      	cmp	r5, r8
    6618:	f000 81a2 	beq.w	6960 <_dtoa_r+0xaf8>
    661c:	4650      	mov	r0, sl
    661e:	4659      	mov	r1, fp
    6620:	2200      	movs	r2, #0
    6622:	4b42      	ldr	r3, [pc, #264]	; (672c <_dtoa_r+0x8c4>)
    6624:	f7fd fcb8 	bl	3f98 <__aeabi_dmul>
    6628:	2200      	movs	r2, #0
    662a:	4b40      	ldr	r3, [pc, #256]	; (672c <_dtoa_r+0x8c4>)
    662c:	4682      	mov	sl, r0
    662e:	468b      	mov	fp, r1
    6630:	4630      	mov	r0, r6
    6632:	4639      	mov	r1, r7
    6634:	f7fd fcb0 	bl	3f98 <__aeabi_dmul>
    6638:	460f      	mov	r7, r1
    663a:	4606      	mov	r6, r0
    663c:	f001 ff18 	bl	8470 <__aeabi_d2iz>
    6640:	4604      	mov	r4, r0
    6642:	f7fd fc43 	bl	3ecc <__aeabi_i2d>
    6646:	4602      	mov	r2, r0
    6648:	460b      	mov	r3, r1
    664a:	4630      	mov	r0, r6
    664c:	4639      	mov	r1, r7
    664e:	f7fd faef 	bl	3c30 <__aeabi_dsub>
    6652:	3430      	adds	r4, #48	; 0x30
    6654:	b2e4      	uxtb	r4, r4
    6656:	4652      	mov	r2, sl
    6658:	465b      	mov	r3, fp
    665a:	f805 4b01 	strb.w	r4, [r5], #1
    665e:	4606      	mov	r6, r0
    6660:	460f      	mov	r7, r1
    6662:	f7fd ff0b 	bl	447c <__aeabi_dcmplt>
    6666:	4632      	mov	r2, r6
    6668:	463b      	mov	r3, r7
    666a:	2800      	cmp	r0, #0
    666c:	d0c8      	beq.n	6600 <_dtoa_r+0x798>
    666e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6670:	9304      	str	r3, [sp, #16]
    6672:	e5c4      	b.n	61fe <_dtoa_r+0x396>
    6674:	2300      	movs	r3, #0
    6676:	9309      	str	r3, [sp, #36]	; 0x24
    6678:	9b21      	ldr	r3, [sp, #132]	; 0x84
    667a:	2b00      	cmp	r3, #0
    667c:	f340 8189 	ble.w	6992 <_dtoa_r+0xb2a>
    6680:	461e      	mov	r6, r3
    6682:	461c      	mov	r4, r3
    6684:	930d      	str	r3, [sp, #52]	; 0x34
    6686:	9306      	str	r3, [sp, #24]
    6688:	e6fd      	b.n	6486 <_dtoa_r+0x61e>
    668a:	2301      	movs	r3, #1
    668c:	9309      	str	r3, [sp, #36]	; 0x24
    668e:	e7f3      	b.n	6678 <_dtoa_r+0x810>
    6690:	9408      	str	r4, [sp, #32]
    6692:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6694:	9908      	ldr	r1, [sp, #32]
    6696:	4648      	mov	r0, r9
    6698:	f7ff f942 	bl	5920 <__pow5mult>
    669c:	4604      	mov	r4, r0
    669e:	e611      	b.n	62c4 <_dtoa_r+0x45c>
    66a0:	9b06      	ldr	r3, [sp, #24]
    66a2:	2b00      	cmp	r3, #0
    66a4:	f73f acfc 	bgt.w	60a0 <_dtoa_r+0x238>
    66a8:	f040 82da 	bne.w	6c60 <_dtoa_r+0xdf8>
    66ac:	2200      	movs	r2, #0
    66ae:	4b20      	ldr	r3, [pc, #128]	; (6730 <_dtoa_r+0x8c8>)
    66b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    66b4:	f7fd fc70 	bl	3f98 <__aeabi_dmul>
    66b8:	4652      	mov	r2, sl
    66ba:	465b      	mov	r3, fp
    66bc:	f7fd fef2 	bl	44a4 <__aeabi_dcmpge>
    66c0:	f8dd 8018 	ldr.w	r8, [sp, #24]
    66c4:	4646      	mov	r6, r8
    66c6:	2800      	cmp	r0, #0
    66c8:	f000 80f2 	beq.w	68b0 <_dtoa_r+0xa48>
    66cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
    66ce:	9d07      	ldr	r5, [sp, #28]
    66d0:	43db      	mvns	r3, r3
    66d2:	9304      	str	r3, [sp, #16]
    66d4:	4641      	mov	r1, r8
    66d6:	4648      	mov	r0, r9
    66d8:	f7fe ffe8 	bl	56ac <_Bfree>
    66dc:	2e00      	cmp	r6, #0
    66de:	f43f ad8e 	beq.w	61fe <_dtoa_r+0x396>
    66e2:	e68d      	b.n	6400 <_dtoa_r+0x598>
    66e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    66e6:	2a00      	cmp	r2, #0
    66e8:	f000 8241 	beq.w	6b6e <_dtoa_r+0xd06>
    66ec:	f203 4333 	addw	r3, r3, #1075	; 0x433
    66f0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    66f2:	9d05      	ldr	r5, [sp, #20]
    66f4:	e5ab      	b.n	624e <_dtoa_r+0x3e6>
    66f6:	201c      	movs	r0, #28
    66f8:	9b05      	ldr	r3, [sp, #20]
    66fa:	4403      	add	r3, r0
    66fc:	9305      	str	r3, [sp, #20]
    66fe:	9b02      	ldr	r3, [sp, #8]
    6700:	4403      	add	r3, r0
    6702:	4405      	add	r5, r0
    6704:	9302      	str	r3, [sp, #8]
    6706:	e60e      	b.n	6326 <_dtoa_r+0x4be>
    6708:	9b20      	ldr	r3, [sp, #128]	; 0x80
    670a:	2b01      	cmp	r3, #1
    670c:	f340 8282 	ble.w	6c14 <_dtoa_r+0xdac>
    6710:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    6712:	2001      	movs	r0, #1
    6714:	e5f3      	b.n	62fe <_dtoa_r+0x496>
    6716:	bf00      	nop
    6718:	00008e68 	.word	0x00008e68
    671c:	00008f40 	.word	0x00008f40
    6720:	3ff00000 	.word	0x3ff00000
    6724:	401c0000 	.word	0x401c0000
    6728:	3fe00000 	.word	0x3fe00000
    672c:	40240000 	.word	0x40240000
    6730:	40140000 	.word	0x40140000
    6734:	4631      	mov	r1, r6
    6736:	2300      	movs	r3, #0
    6738:	220a      	movs	r2, #10
    673a:	4648      	mov	r0, r9
    673c:	f7fe ffc0 	bl	56c0 <__multadd>
    6740:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6742:	2b00      	cmp	r3, #0
    6744:	4606      	mov	r6, r0
    6746:	f340 8297 	ble.w	6c78 <_dtoa_r+0xe10>
    674a:	9306      	str	r3, [sp, #24]
    674c:	2d00      	cmp	r5, #0
    674e:	dd05      	ble.n	675c <_dtoa_r+0x8f4>
    6750:	4631      	mov	r1, r6
    6752:	462a      	mov	r2, r5
    6754:	4648      	mov	r0, r9
    6756:	f7ff f933 	bl	59c0 <__lshift>
    675a:	4606      	mov	r6, r0
    675c:	2f00      	cmp	r7, #0
    675e:	f040 817c 	bne.w	6a5a <_dtoa_r+0xbf2>
    6762:	9605      	str	r6, [sp, #20]
    6764:	9b06      	ldr	r3, [sp, #24]
    6766:	9a07      	ldr	r2, [sp, #28]
    6768:	f8dd b014 	ldr.w	fp, [sp, #20]
    676c:	3b01      	subs	r3, #1
    676e:	18d3      	adds	r3, r2, r3
    6770:	9308      	str	r3, [sp, #32]
    6772:	f00a 0301 	and.w	r3, sl, #1
    6776:	9309      	str	r3, [sp, #36]	; 0x24
    6778:	4617      	mov	r7, r2
    677a:	46c2      	mov	sl, r8
    677c:	4651      	mov	r1, sl
    677e:	4620      	mov	r0, r4
    6780:	f7ff fadc 	bl	5d3c <quorem>
    6784:	4631      	mov	r1, r6
    6786:	4605      	mov	r5, r0
    6788:	4620      	mov	r0, r4
    678a:	f7ff f971 	bl	5a70 <__mcmp>
    678e:	465a      	mov	r2, fp
    6790:	9002      	str	r0, [sp, #8]
    6792:	4651      	mov	r1, sl
    6794:	4648      	mov	r0, r9
    6796:	f7ff f98b 	bl	5ab0 <__mdiff>
    679a:	68c2      	ldr	r2, [r0, #12]
    679c:	4680      	mov	r8, r0
    679e:	f105 0330 	add.w	r3, r5, #48	; 0x30
    67a2:	2a00      	cmp	r2, #0
    67a4:	d149      	bne.n	683a <_dtoa_r+0x9d2>
    67a6:	4601      	mov	r1, r0
    67a8:	4620      	mov	r0, r4
    67aa:	9306      	str	r3, [sp, #24]
    67ac:	f7ff f960 	bl	5a70 <__mcmp>
    67b0:	4641      	mov	r1, r8
    67b2:	9005      	str	r0, [sp, #20]
    67b4:	4648      	mov	r0, r9
    67b6:	f7fe ff79 	bl	56ac <_Bfree>
    67ba:	9a05      	ldr	r2, [sp, #20]
    67bc:	9b06      	ldr	r3, [sp, #24]
    67be:	b92a      	cbnz	r2, 67cc <_dtoa_r+0x964>
    67c0:	9920      	ldr	r1, [sp, #128]	; 0x80
    67c2:	b919      	cbnz	r1, 67cc <_dtoa_r+0x964>
    67c4:	9909      	ldr	r1, [sp, #36]	; 0x24
    67c6:	2900      	cmp	r1, #0
    67c8:	f000 8236 	beq.w	6c38 <_dtoa_r+0xdd0>
    67cc:	9902      	ldr	r1, [sp, #8]
    67ce:	2900      	cmp	r1, #0
    67d0:	f2c0 80e4 	blt.w	699c <_dtoa_r+0xb34>
    67d4:	d105      	bne.n	67e2 <_dtoa_r+0x97a>
    67d6:	9920      	ldr	r1, [sp, #128]	; 0x80
    67d8:	b919      	cbnz	r1, 67e2 <_dtoa_r+0x97a>
    67da:	9909      	ldr	r1, [sp, #36]	; 0x24
    67dc:	2900      	cmp	r1, #0
    67de:	f000 80dd 	beq.w	699c <_dtoa_r+0xb34>
    67e2:	2a00      	cmp	r2, #0
    67e4:	f300 814d 	bgt.w	6a82 <_dtoa_r+0xc1a>
    67e8:	9a08      	ldr	r2, [sp, #32]
    67ea:	703b      	strb	r3, [r7, #0]
    67ec:	f107 0801 	add.w	r8, r7, #1
    67f0:	4297      	cmp	r7, r2
    67f2:	4645      	mov	r5, r8
    67f4:	f000 8154 	beq.w	6aa0 <_dtoa_r+0xc38>
    67f8:	4621      	mov	r1, r4
    67fa:	2300      	movs	r3, #0
    67fc:	220a      	movs	r2, #10
    67fe:	4648      	mov	r0, r9
    6800:	f7fe ff5e 	bl	56c0 <__multadd>
    6804:	455e      	cmp	r6, fp
    6806:	4604      	mov	r4, r0
    6808:	4631      	mov	r1, r6
    680a:	f04f 0300 	mov.w	r3, #0
    680e:	f04f 020a 	mov.w	r2, #10
    6812:	4648      	mov	r0, r9
    6814:	d00b      	beq.n	682e <_dtoa_r+0x9c6>
    6816:	f7fe ff53 	bl	56c0 <__multadd>
    681a:	4659      	mov	r1, fp
    681c:	4606      	mov	r6, r0
    681e:	2300      	movs	r3, #0
    6820:	220a      	movs	r2, #10
    6822:	4648      	mov	r0, r9
    6824:	f7fe ff4c 	bl	56c0 <__multadd>
    6828:	4647      	mov	r7, r8
    682a:	4683      	mov	fp, r0
    682c:	e7a6      	b.n	677c <_dtoa_r+0x914>
    682e:	f7fe ff47 	bl	56c0 <__multadd>
    6832:	4647      	mov	r7, r8
    6834:	4606      	mov	r6, r0
    6836:	4683      	mov	fp, r0
    6838:	e7a0      	b.n	677c <_dtoa_r+0x914>
    683a:	4601      	mov	r1, r0
    683c:	4648      	mov	r0, r9
    683e:	9305      	str	r3, [sp, #20]
    6840:	f7fe ff34 	bl	56ac <_Bfree>
    6844:	2201      	movs	r2, #1
    6846:	9b05      	ldr	r3, [sp, #20]
    6848:	e7c0      	b.n	67cc <_dtoa_r+0x964>
    684a:	4641      	mov	r1, r8
    684c:	4620      	mov	r0, r4
    684e:	f7ff f90f 	bl	5a70 <__mcmp>
    6852:	2800      	cmp	r0, #0
    6854:	f6bf ad7d 	bge.w	6352 <_dtoa_r+0x4ea>
    6858:	4621      	mov	r1, r4
    685a:	9c04      	ldr	r4, [sp, #16]
    685c:	2300      	movs	r3, #0
    685e:	3c01      	subs	r4, #1
    6860:	220a      	movs	r2, #10
    6862:	4648      	mov	r0, r9
    6864:	9404      	str	r4, [sp, #16]
    6866:	f7fe ff2b 	bl	56c0 <__multadd>
    686a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    686c:	4604      	mov	r4, r0
    686e:	2b00      	cmp	r3, #0
    6870:	f47f af60 	bne.w	6734 <_dtoa_r+0x8cc>
    6874:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6876:	2b00      	cmp	r3, #0
    6878:	f340 81f6 	ble.w	6c68 <_dtoa_r+0xe00>
    687c:	9306      	str	r3, [sp, #24]
    687e:	e570      	b.n	6362 <_dtoa_r+0x4fa>
    6880:	9c08      	ldr	r4, [sp, #32]
    6882:	e51f      	b.n	62c4 <_dtoa_r+0x45c>
    6884:	9b20      	ldr	r3, [sp, #128]	; 0x80
    6886:	2b02      	cmp	r3, #2
    6888:	f77f ad67 	ble.w	635a <_dtoa_r+0x4f2>
    688c:	9b06      	ldr	r3, [sp, #24]
    688e:	2b00      	cmp	r3, #0
    6890:	f040 8179 	bne.w	6b86 <_dtoa_r+0xd1e>
    6894:	4641      	mov	r1, r8
    6896:	2205      	movs	r2, #5
    6898:	4648      	mov	r0, r9
    689a:	f7fe ff11 	bl	56c0 <__multadd>
    689e:	4601      	mov	r1, r0
    68a0:	4680      	mov	r8, r0
    68a2:	4620      	mov	r0, r4
    68a4:	f7ff f8e4 	bl	5a70 <__mcmp>
    68a8:	2800      	cmp	r0, #0
    68aa:	9408      	str	r4, [sp, #32]
    68ac:	f77f af0e 	ble.w	66cc <_dtoa_r+0x864>
    68b0:	9a04      	ldr	r2, [sp, #16]
    68b2:	9907      	ldr	r1, [sp, #28]
    68b4:	2331      	movs	r3, #49	; 0x31
    68b6:	3201      	adds	r2, #1
    68b8:	9204      	str	r2, [sp, #16]
    68ba:	700b      	strb	r3, [r1, #0]
    68bc:	1c4d      	adds	r5, r1, #1
    68be:	e709      	b.n	66d4 <_dtoa_r+0x86c>
    68c0:	9a04      	ldr	r2, [sp, #16]
    68c2:	3201      	adds	r2, #1
    68c4:	9204      	str	r2, [sp, #16]
    68c6:	9a07      	ldr	r2, [sp, #28]
    68c8:	2331      	movs	r3, #49	; 0x31
    68ca:	7013      	strb	r3, [r2, #0]
    68cc:	e588      	b.n	63e0 <_dtoa_r+0x578>
    68ce:	2301      	movs	r3, #1
    68d0:	9309      	str	r3, [sp, #36]	; 0x24
    68d2:	e5cd      	b.n	6470 <_dtoa_r+0x608>
    68d4:	f8dd 9014 	ldr.w	r9, [sp, #20]
    68d8:	e491      	b.n	61fe <_dtoa_r+0x396>
    68da:	f1ba 0f00 	cmp.w	sl, #0
    68de:	f47f ad04 	bne.w	62ea <_dtoa_r+0x482>
    68e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
    68e6:	2b00      	cmp	r3, #0
    68e8:	f040 813f 	bne.w	6b6a <_dtoa_r+0xd02>
    68ec:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
    68f0:	0d3f      	lsrs	r7, r7, #20
    68f2:	053f      	lsls	r7, r7, #20
    68f4:	b137      	cbz	r7, 6904 <_dtoa_r+0xa9c>
    68f6:	9b05      	ldr	r3, [sp, #20]
    68f8:	3301      	adds	r3, #1
    68fa:	9305      	str	r3, [sp, #20]
    68fc:	9b02      	ldr	r3, [sp, #8]
    68fe:	3301      	adds	r3, #1
    6900:	9302      	str	r3, [sp, #8]
    6902:	2701      	movs	r7, #1
    6904:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6906:	2001      	movs	r0, #1
    6908:	2b00      	cmp	r3, #0
    690a:	f43f acf8 	beq.w	62fe <_dtoa_r+0x496>
    690e:	e4ed      	b.n	62ec <_dtoa_r+0x484>
    6910:	4640      	mov	r0, r8
    6912:	f7fd fadb 	bl	3ecc <__aeabi_i2d>
    6916:	4632      	mov	r2, r6
    6918:	463b      	mov	r3, r7
    691a:	f7fd fb3d 	bl	3f98 <__aeabi_dmul>
    691e:	2200      	movs	r2, #0
    6920:	4bbf      	ldr	r3, [pc, #764]	; (6c20 <_dtoa_r+0xdb8>)
    6922:	f7fd f987 	bl	3c34 <__adddf3>
    6926:	4604      	mov	r4, r0
    6928:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
    692c:	4630      	mov	r0, r6
    692e:	4639      	mov	r1, r7
    6930:	2200      	movs	r2, #0
    6932:	4bbc      	ldr	r3, [pc, #752]	; (6c24 <_dtoa_r+0xdbc>)
    6934:	f7fd f97c 	bl	3c30 <__aeabi_dsub>
    6938:	4622      	mov	r2, r4
    693a:	462b      	mov	r3, r5
    693c:	4606      	mov	r6, r0
    693e:	460f      	mov	r7, r1
    6940:	f7fd fdba 	bl	44b8 <__aeabi_dcmpgt>
    6944:	4680      	mov	r8, r0
    6946:	2800      	cmp	r0, #0
    6948:	f040 8105 	bne.w	6b56 <_dtoa_r+0xcee>
    694c:	4622      	mov	r2, r4
    694e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
    6952:	4630      	mov	r0, r6
    6954:	4639      	mov	r1, r7
    6956:	f7fd fd91 	bl	447c <__aeabi_dcmplt>
    695a:	b108      	cbz	r0, 6960 <_dtoa_r+0xaf8>
    695c:	4646      	mov	r6, r8
    695e:	e6b5      	b.n	66cc <_dtoa_r+0x864>
    6960:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
    6964:	f7ff bb89 	b.w	607a <_dtoa_r+0x212>
    6968:	9807      	ldr	r0, [sp, #28]
    696a:	f7ff baae 	b.w	5eca <_dtoa_r+0x62>
    696e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    6970:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6972:	970a      	str	r7, [sp, #40]	; 0x28
    6974:	1afb      	subs	r3, r7, r3
    6976:	441a      	add	r2, r3
    6978:	920b      	str	r2, [sp, #44]	; 0x2c
    697a:	2700      	movs	r7, #0
    697c:	e461      	b.n	6242 <_dtoa_r+0x3da>
    697e:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
    6982:	f04f 0802 	mov.w	r8, #2
    6986:	e5bb      	b.n	6500 <_dtoa_r+0x698>
    6988:	461c      	mov	r4, r3
    698a:	2100      	movs	r1, #0
    698c:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
    6990:	e58a      	b.n	64a8 <_dtoa_r+0x640>
    6992:	2401      	movs	r4, #1
    6994:	9421      	str	r4, [sp, #132]	; 0x84
    6996:	940d      	str	r4, [sp, #52]	; 0x34
    6998:	9406      	str	r4, [sp, #24]
    699a:	e7f6      	b.n	698a <_dtoa_r+0xb22>
    699c:	2a00      	cmp	r2, #0
    699e:	46d0      	mov	r8, sl
    69a0:	f8cd b014 	str.w	fp, [sp, #20]
    69a4:	469a      	mov	sl, r3
    69a6:	dd11      	ble.n	69cc <_dtoa_r+0xb64>
    69a8:	4621      	mov	r1, r4
    69aa:	2201      	movs	r2, #1
    69ac:	4648      	mov	r0, r9
    69ae:	f7ff f807 	bl	59c0 <__lshift>
    69b2:	4641      	mov	r1, r8
    69b4:	4604      	mov	r4, r0
    69b6:	f7ff f85b 	bl	5a70 <__mcmp>
    69ba:	2800      	cmp	r0, #0
    69bc:	f340 8149 	ble.w	6c52 <_dtoa_r+0xdea>
    69c0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
    69c4:	f000 8106 	beq.w	6bd4 <_dtoa_r+0xd6c>
    69c8:	f105 0a31 	add.w	sl, r5, #49	; 0x31
    69cc:	46b3      	mov	fp, r6
    69ce:	f887 a000 	strb.w	sl, [r7]
    69d2:	1c7d      	adds	r5, r7, #1
    69d4:	9e05      	ldr	r6, [sp, #20]
    69d6:	9408      	str	r4, [sp, #32]
    69d8:	e502      	b.n	63e0 <_dtoa_r+0x578>
    69da:	d104      	bne.n	69e6 <_dtoa_r+0xb7e>
    69dc:	f01a 0f01 	tst.w	sl, #1
    69e0:	d001      	beq.n	69e6 <_dtoa_r+0xb7e>
    69e2:	e4ed      	b.n	63c0 <_dtoa_r+0x558>
    69e4:	4615      	mov	r5, r2
    69e6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    69ea:	2b30      	cmp	r3, #48	; 0x30
    69ec:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
    69f0:	d0f8      	beq.n	69e4 <_dtoa_r+0xb7c>
    69f2:	e4f5      	b.n	63e0 <_dtoa_r+0x578>
    69f4:	9b04      	ldr	r3, [sp, #16]
    69f6:	425c      	negs	r4, r3
    69f8:	2c00      	cmp	r4, #0
    69fa:	f000 80bf 	beq.w	6b7c <_dtoa_r+0xd14>
    69fe:	4b8a      	ldr	r3, [pc, #552]	; (6c28 <_dtoa_r+0xdc0>)
    6a00:	f004 020f 	and.w	r2, r4, #15
    6a04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    6a08:	e9d3 2300 	ldrd	r2, r3, [r3]
    6a0c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    6a10:	f7fd fac2 	bl	3f98 <__aeabi_dmul>
    6a14:	1124      	asrs	r4, r4, #4
    6a16:	4606      	mov	r6, r0
    6a18:	460f      	mov	r7, r1
    6a1a:	f000 812a 	beq.w	6c72 <_dtoa_r+0xe0a>
    6a1e:	4d83      	ldr	r5, [pc, #524]	; (6c2c <_dtoa_r+0xdc4>)
    6a20:	f04f 0802 	mov.w	r8, #2
    6a24:	07e2      	lsls	r2, r4, #31
    6a26:	d509      	bpl.n	6a3c <_dtoa_r+0xbd4>
    6a28:	4630      	mov	r0, r6
    6a2a:	4639      	mov	r1, r7
    6a2c:	e9d5 2300 	ldrd	r2, r3, [r5]
    6a30:	f7fd fab2 	bl	3f98 <__aeabi_dmul>
    6a34:	f108 0801 	add.w	r8, r8, #1
    6a38:	4606      	mov	r6, r0
    6a3a:	460f      	mov	r7, r1
    6a3c:	1064      	asrs	r4, r4, #1
    6a3e:	f105 0508 	add.w	r5, r5, #8
    6a42:	d1ef      	bne.n	6a24 <_dtoa_r+0xbbc>
    6a44:	e576      	b.n	6534 <_dtoa_r+0x6cc>
    6a46:	9907      	ldr	r1, [sp, #28]
    6a48:	2230      	movs	r2, #48	; 0x30
    6a4a:	700a      	strb	r2, [r1, #0]
    6a4c:	9a04      	ldr	r2, [sp, #16]
    6a4e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
    6a52:	3201      	adds	r2, #1
    6a54:	9204      	str	r2, [sp, #16]
    6a56:	f7ff bbd0 	b.w	61fa <_dtoa_r+0x392>
    6a5a:	6871      	ldr	r1, [r6, #4]
    6a5c:	4648      	mov	r0, r9
    6a5e:	f7fe fdff 	bl	5660 <_Balloc>
    6a62:	6933      	ldr	r3, [r6, #16]
    6a64:	1c9a      	adds	r2, r3, #2
    6a66:	4605      	mov	r5, r0
    6a68:	0092      	lsls	r2, r2, #2
    6a6a:	f106 010c 	add.w	r1, r6, #12
    6a6e:	300c      	adds	r0, #12
    6a70:	f7fc fcd6 	bl	3420 <memcpy>
    6a74:	4629      	mov	r1, r5
    6a76:	2201      	movs	r2, #1
    6a78:	4648      	mov	r0, r9
    6a7a:	f7fe ffa1 	bl	59c0 <__lshift>
    6a7e:	9005      	str	r0, [sp, #20]
    6a80:	e670      	b.n	6764 <_dtoa_r+0x8fc>
    6a82:	2b39      	cmp	r3, #57	; 0x39
    6a84:	f8cd b014 	str.w	fp, [sp, #20]
    6a88:	46d0      	mov	r8, sl
    6a8a:	f000 80a3 	beq.w	6bd4 <_dtoa_r+0xd6c>
    6a8e:	f103 0a01 	add.w	sl, r3, #1
    6a92:	46b3      	mov	fp, r6
    6a94:	f887 a000 	strb.w	sl, [r7]
    6a98:	1c7d      	adds	r5, r7, #1
    6a9a:	9e05      	ldr	r6, [sp, #20]
    6a9c:	9408      	str	r4, [sp, #32]
    6a9e:	e49f      	b.n	63e0 <_dtoa_r+0x578>
    6aa0:	465a      	mov	r2, fp
    6aa2:	46d0      	mov	r8, sl
    6aa4:	46b3      	mov	fp, r6
    6aa6:	469a      	mov	sl, r3
    6aa8:	4616      	mov	r6, r2
    6aaa:	e47d      	b.n	63a8 <_dtoa_r+0x540>
    6aac:	495e      	ldr	r1, [pc, #376]	; (6c28 <_dtoa_r+0xdc0>)
    6aae:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
    6ab2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
    6ab6:	4622      	mov	r2, r4
    6ab8:	462b      	mov	r3, r5
    6aba:	e9d1 0100 	ldrd	r0, r1, [r1]
    6abe:	f7fd fa6b 	bl	3f98 <__aeabi_dmul>
    6ac2:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    6ac6:	4639      	mov	r1, r7
    6ac8:	4630      	mov	r0, r6
    6aca:	f001 fcd1 	bl	8470 <__aeabi_d2iz>
    6ace:	4604      	mov	r4, r0
    6ad0:	f7fd f9fc 	bl	3ecc <__aeabi_i2d>
    6ad4:	4602      	mov	r2, r0
    6ad6:	460b      	mov	r3, r1
    6ad8:	4630      	mov	r0, r6
    6ada:	4639      	mov	r1, r7
    6adc:	f7fd f8a8 	bl	3c30 <__aeabi_dsub>
    6ae0:	9a07      	ldr	r2, [sp, #28]
    6ae2:	3430      	adds	r4, #48	; 0x30
    6ae4:	f1b8 0f01 	cmp.w	r8, #1
    6ae8:	4606      	mov	r6, r0
    6aea:	460f      	mov	r7, r1
    6aec:	7014      	strb	r4, [r2, #0]
    6aee:	f102 0501 	add.w	r5, r2, #1
    6af2:	d01e      	beq.n	6b32 <_dtoa_r+0xcca>
    6af4:	9b07      	ldr	r3, [sp, #28]
    6af6:	eb03 0b08 	add.w	fp, r3, r8
    6afa:	46a8      	mov	r8, r5
    6afc:	2200      	movs	r2, #0
    6afe:	4b4c      	ldr	r3, [pc, #304]	; (6c30 <_dtoa_r+0xdc8>)
    6b00:	4630      	mov	r0, r6
    6b02:	4639      	mov	r1, r7
    6b04:	f7fd fa48 	bl	3f98 <__aeabi_dmul>
    6b08:	460f      	mov	r7, r1
    6b0a:	4606      	mov	r6, r0
    6b0c:	f001 fcb0 	bl	8470 <__aeabi_d2iz>
    6b10:	4604      	mov	r4, r0
    6b12:	f7fd f9db 	bl	3ecc <__aeabi_i2d>
    6b16:	3430      	adds	r4, #48	; 0x30
    6b18:	4602      	mov	r2, r0
    6b1a:	460b      	mov	r3, r1
    6b1c:	4630      	mov	r0, r6
    6b1e:	4639      	mov	r1, r7
    6b20:	f7fd f886 	bl	3c30 <__aeabi_dsub>
    6b24:	f808 4b01 	strb.w	r4, [r8], #1
    6b28:	45c3      	cmp	fp, r8
    6b2a:	4606      	mov	r6, r0
    6b2c:	460f      	mov	r7, r1
    6b2e:	d1e5      	bne.n	6afc <_dtoa_r+0xc94>
    6b30:	4455      	add	r5, sl
    6b32:	2200      	movs	r2, #0
    6b34:	4b3f      	ldr	r3, [pc, #252]	; (6c34 <_dtoa_r+0xdcc>)
    6b36:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    6b3a:	f7fd f87b 	bl	3c34 <__adddf3>
    6b3e:	4632      	mov	r2, r6
    6b40:	463b      	mov	r3, r7
    6b42:	f7fd fc9b 	bl	447c <__aeabi_dcmplt>
    6b46:	2800      	cmp	r0, #0
    6b48:	d04c      	beq.n	6be4 <_dtoa_r+0xd7c>
    6b4a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6b4c:	9304      	str	r3, [sp, #16]
    6b4e:	f815 4c01 	ldrb.w	r4, [r5, #-1]
    6b52:	f7ff bb46 	b.w	61e2 <_dtoa_r+0x37a>
    6b56:	f04f 0800 	mov.w	r8, #0
    6b5a:	4646      	mov	r6, r8
    6b5c:	e6a8      	b.n	68b0 <_dtoa_r+0xa48>
    6b5e:	9b05      	ldr	r3, [sp, #20]
    6b60:	9a06      	ldr	r2, [sp, #24]
    6b62:	1a9d      	subs	r5, r3, r2
    6b64:	2300      	movs	r3, #0
    6b66:	f7ff bb72 	b.w	624e <_dtoa_r+0x3e6>
    6b6a:	2700      	movs	r7, #0
    6b6c:	e6ca      	b.n	6904 <_dtoa_r+0xa9c>
    6b6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    6b70:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    6b72:	9d05      	ldr	r5, [sp, #20]
    6b74:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    6b78:	f7ff bb69 	b.w	624e <_dtoa_r+0x3e6>
    6b7c:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
    6b80:	f04f 0802 	mov.w	r8, #2
    6b84:	e4d6      	b.n	6534 <_dtoa_r+0x6cc>
    6b86:	9408      	str	r4, [sp, #32]
    6b88:	e5a0      	b.n	66cc <_dtoa_r+0x864>
    6b8a:	9b06      	ldr	r3, [sp, #24]
    6b8c:	2b00      	cmp	r3, #0
    6b8e:	f43f aebf 	beq.w	6910 <_dtoa_r+0xaa8>
    6b92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6b94:	2b00      	cmp	r3, #0
    6b96:	f77f aee3 	ble.w	6960 <_dtoa_r+0xaf8>
    6b9a:	2200      	movs	r2, #0
    6b9c:	4b24      	ldr	r3, [pc, #144]	; (6c30 <_dtoa_r+0xdc8>)
    6b9e:	4630      	mov	r0, r6
    6ba0:	4639      	mov	r1, r7
    6ba2:	f7fd f9f9 	bl	3f98 <__aeabi_dmul>
    6ba6:	4606      	mov	r6, r0
    6ba8:	460f      	mov	r7, r1
    6baa:	f108 0001 	add.w	r0, r8, #1
    6bae:	f7fd f98d 	bl	3ecc <__aeabi_i2d>
    6bb2:	4632      	mov	r2, r6
    6bb4:	463b      	mov	r3, r7
    6bb6:	f7fd f9ef 	bl	3f98 <__aeabi_dmul>
    6bba:	2200      	movs	r2, #0
    6bbc:	4b18      	ldr	r3, [pc, #96]	; (6c20 <_dtoa_r+0xdb8>)
    6bbe:	f7fd f839 	bl	3c34 <__adddf3>
    6bc2:	9a04      	ldr	r2, [sp, #16]
    6bc4:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    6bc8:	3a01      	subs	r2, #1
    6bca:	4604      	mov	r4, r0
    6bcc:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
    6bd0:	9211      	str	r2, [sp, #68]	; 0x44
    6bd2:	e4d0      	b.n	6576 <_dtoa_r+0x70e>
    6bd4:	2239      	movs	r2, #57	; 0x39
    6bd6:	46b3      	mov	fp, r6
    6bd8:	9408      	str	r4, [sp, #32]
    6bda:	9e05      	ldr	r6, [sp, #20]
    6bdc:	703a      	strb	r2, [r7, #0]
    6bde:	1c7d      	adds	r5, r7, #1
    6be0:	f7ff bbf0 	b.w	63c4 <_dtoa_r+0x55c>
    6be4:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    6be8:	2000      	movs	r0, #0
    6bea:	4912      	ldr	r1, [pc, #72]	; (6c34 <_dtoa_r+0xdcc>)
    6bec:	f7fd f820 	bl	3c30 <__aeabi_dsub>
    6bf0:	4632      	mov	r2, r6
    6bf2:	463b      	mov	r3, r7
    6bf4:	f7fd fc60 	bl	44b8 <__aeabi_dcmpgt>
    6bf8:	b908      	cbnz	r0, 6bfe <_dtoa_r+0xd96>
    6bfa:	e6b1      	b.n	6960 <_dtoa_r+0xaf8>
    6bfc:	4615      	mov	r5, r2
    6bfe:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    6c02:	2b30      	cmp	r3, #48	; 0x30
    6c04:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
    6c08:	d0f8      	beq.n	6bfc <_dtoa_r+0xd94>
    6c0a:	e530      	b.n	666e <_dtoa_r+0x806>
    6c0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6c0e:	9304      	str	r3, [sp, #16]
    6c10:	f7ff bae7 	b.w	61e2 <_dtoa_r+0x37a>
    6c14:	f1ba 0f00 	cmp.w	sl, #0
    6c18:	f47f ad7a 	bne.w	6710 <_dtoa_r+0x8a8>
    6c1c:	e661      	b.n	68e2 <_dtoa_r+0xa7a>
    6c1e:	bf00      	nop
    6c20:	401c0000 	.word	0x401c0000
    6c24:	40140000 	.word	0x40140000
    6c28:	00008e68 	.word	0x00008e68
    6c2c:	00008f40 	.word	0x00008f40
    6c30:	40240000 	.word	0x40240000
    6c34:	3fe00000 	.word	0x3fe00000
    6c38:	2b39      	cmp	r3, #57	; 0x39
    6c3a:	f8cd b014 	str.w	fp, [sp, #20]
    6c3e:	46d0      	mov	r8, sl
    6c40:	f8dd b008 	ldr.w	fp, [sp, #8]
    6c44:	469a      	mov	sl, r3
    6c46:	d0c5      	beq.n	6bd4 <_dtoa_r+0xd6c>
    6c48:	f1bb 0f00 	cmp.w	fp, #0
    6c4c:	f73f aebc 	bgt.w	69c8 <_dtoa_r+0xb60>
    6c50:	e6bc      	b.n	69cc <_dtoa_r+0xb64>
    6c52:	f47f aebb 	bne.w	69cc <_dtoa_r+0xb64>
    6c56:	f01a 0f01 	tst.w	sl, #1
    6c5a:	f43f aeb7 	beq.w	69cc <_dtoa_r+0xb64>
    6c5e:	e6af      	b.n	69c0 <_dtoa_r+0xb58>
    6c60:	f04f 0800 	mov.w	r8, #0
    6c64:	4646      	mov	r6, r8
    6c66:	e531      	b.n	66cc <_dtoa_r+0x864>
    6c68:	9b20      	ldr	r3, [sp, #128]	; 0x80
    6c6a:	2b02      	cmp	r3, #2
    6c6c:	dc21      	bgt.n	6cb2 <_dtoa_r+0xe4a>
    6c6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6c70:	e604      	b.n	687c <_dtoa_r+0xa14>
    6c72:	f04f 0802 	mov.w	r8, #2
    6c76:	e45d      	b.n	6534 <_dtoa_r+0x6cc>
    6c78:	9b20      	ldr	r3, [sp, #128]	; 0x80
    6c7a:	2b02      	cmp	r3, #2
    6c7c:	dc19      	bgt.n	6cb2 <_dtoa_r+0xe4a>
    6c7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6c80:	e563      	b.n	674a <_dtoa_r+0x8e2>
    6c82:	2400      	movs	r4, #0
    6c84:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
    6c88:	4621      	mov	r1, r4
    6c8a:	4648      	mov	r0, r9
    6c8c:	f7fe fce8 	bl	5660 <_Balloc>
    6c90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6c94:	9306      	str	r3, [sp, #24]
    6c96:	930d      	str	r3, [sp, #52]	; 0x34
    6c98:	2301      	movs	r3, #1
    6c9a:	9007      	str	r0, [sp, #28]
    6c9c:	9421      	str	r4, [sp, #132]	; 0x84
    6c9e:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
    6ca2:	9309      	str	r3, [sp, #36]	; 0x24
    6ca4:	f7ff b9e9 	b.w	607a <_dtoa_r+0x212>
    6ca8:	f43f ab3d 	beq.w	6326 <_dtoa_r+0x4be>
    6cac:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
    6cb0:	e522      	b.n	66f8 <_dtoa_r+0x890>
    6cb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6cb4:	9306      	str	r3, [sp, #24]
    6cb6:	e5e9      	b.n	688c <_dtoa_r+0xa24>
    6cb8:	2501      	movs	r5, #1
    6cba:	f7ff b9a8 	b.w	600e <_dtoa_r+0x1a6>
    6cbe:	bf00      	nop

00006cc0 <_svfprintf_r>:
    6cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6cc4:	b0c1      	sub	sp, #260	; 0x104
    6cc6:	460c      	mov	r4, r1
    6cc8:	9109      	str	r1, [sp, #36]	; 0x24
    6cca:	4615      	mov	r5, r2
    6ccc:	930e      	str	r3, [sp, #56]	; 0x38
    6cce:	900a      	str	r0, [sp, #40]	; 0x28
    6cd0:	f7fe fc66 	bl	55a0 <_localeconv_r>
    6cd4:	6803      	ldr	r3, [r0, #0]
    6cd6:	9317      	str	r3, [sp, #92]	; 0x5c
    6cd8:	4618      	mov	r0, r3
    6cda:	f7fe f9f1 	bl	50c0 <strlen>
    6cde:	89a3      	ldrh	r3, [r4, #12]
    6ce0:	9016      	str	r0, [sp, #88]	; 0x58
    6ce2:	061e      	lsls	r6, r3, #24
    6ce4:	d503      	bpl.n	6cee <_svfprintf_r+0x2e>
    6ce6:	6923      	ldr	r3, [r4, #16]
    6ce8:	2b00      	cmp	r3, #0
    6cea:	f001 811a 	beq.w	7f22 <_svfprintf_r+0x1262>
    6cee:	2300      	movs	r3, #0
    6cf0:	461a      	mov	r2, r3
    6cf2:	9312      	str	r3, [sp, #72]	; 0x48
    6cf4:	9325      	str	r3, [sp, #148]	; 0x94
    6cf6:	9324      	str	r3, [sp, #144]	; 0x90
    6cf8:	9319      	str	r3, [sp, #100]	; 0x64
    6cfa:	930b      	str	r3, [sp, #44]	; 0x2c
    6cfc:	f8df a464 	ldr.w	sl, [pc, #1124]	; 7164 <_svfprintf_r+0x4a4>
    6d00:	9214      	str	r2, [sp, #80]	; 0x50
    6d02:	ab30      	add	r3, sp, #192	; 0xc0
    6d04:	9323      	str	r3, [sp, #140]	; 0x8c
    6d06:	4699      	mov	r9, r3
    6d08:	9215      	str	r2, [sp, #84]	; 0x54
    6d0a:	46a8      	mov	r8, r5
    6d0c:	f898 3000 	ldrb.w	r3, [r8]
    6d10:	4644      	mov	r4, r8
    6d12:	b1eb      	cbz	r3, 6d50 <_svfprintf_r+0x90>
    6d14:	2b25      	cmp	r3, #37	; 0x25
    6d16:	d102      	bne.n	6d1e <_svfprintf_r+0x5e>
    6d18:	e01a      	b.n	6d50 <_svfprintf_r+0x90>
    6d1a:	2b25      	cmp	r3, #37	; 0x25
    6d1c:	d003      	beq.n	6d26 <_svfprintf_r+0x66>
    6d1e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    6d22:	2b00      	cmp	r3, #0
    6d24:	d1f9      	bne.n	6d1a <_svfprintf_r+0x5a>
    6d26:	ebc8 0504 	rsb	r5, r8, r4
    6d2a:	b18d      	cbz	r5, 6d50 <_svfprintf_r+0x90>
    6d2c:	9b24      	ldr	r3, [sp, #144]	; 0x90
    6d2e:	9a25      	ldr	r2, [sp, #148]	; 0x94
    6d30:	f8c9 8000 	str.w	r8, [r9]
    6d34:	3301      	adds	r3, #1
    6d36:	442a      	add	r2, r5
    6d38:	2b07      	cmp	r3, #7
    6d3a:	f8c9 5004 	str.w	r5, [r9, #4]
    6d3e:	9225      	str	r2, [sp, #148]	; 0x94
    6d40:	9324      	str	r3, [sp, #144]	; 0x90
    6d42:	f300 80a6 	bgt.w	6e92 <_svfprintf_r+0x1d2>
    6d46:	f109 0908 	add.w	r9, r9, #8
    6d4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6d4c:	442b      	add	r3, r5
    6d4e:	930b      	str	r3, [sp, #44]	; 0x2c
    6d50:	7823      	ldrb	r3, [r4, #0]
    6d52:	2b00      	cmp	r3, #0
    6d54:	f000 80a6 	beq.w	6ea4 <_svfprintf_r+0x1e4>
    6d58:	2300      	movs	r3, #0
    6d5a:	461a      	mov	r2, r3
    6d5c:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
    6d60:	4619      	mov	r1, r3
    6d62:	930c      	str	r3, [sp, #48]	; 0x30
    6d64:	9307      	str	r3, [sp, #28]
    6d66:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    6d6a:	7863      	ldrb	r3, [r4, #1]
    6d6c:	f104 0801 	add.w	r8, r4, #1
    6d70:	465d      	mov	r5, fp
    6d72:	f108 0801 	add.w	r8, r8, #1
    6d76:	f1a3 0020 	sub.w	r0, r3, #32
    6d7a:	2858      	cmp	r0, #88	; 0x58
    6d7c:	f200 8425 	bhi.w	75ca <_svfprintf_r+0x90a>
    6d80:	e8df f010 	tbh	[pc, r0, lsl #1]
    6d84:	04230388 	.word	0x04230388
    6d88:	03900423 	.word	0x03900423
    6d8c:	04230423 	.word	0x04230423
    6d90:	04230423 	.word	0x04230423
    6d94:	04230423 	.word	0x04230423
    6d98:	03a50397 	.word	0x03a50397
    6d9c:	005d0423 	.word	0x005d0423
    6da0:	042300e2 	.word	0x042300e2
    6da4:	010500fe 	.word	0x010500fe
    6da8:	01050105 	.word	0x01050105
    6dac:	01050105 	.word	0x01050105
    6db0:	01050105 	.word	0x01050105
    6db4:	01050105 	.word	0x01050105
    6db8:	04230423 	.word	0x04230423
    6dbc:	04230423 	.word	0x04230423
    6dc0:	04230423 	.word	0x04230423
    6dc4:	04230423 	.word	0x04230423
    6dc8:	04230423 	.word	0x04230423
    6dcc:	02810115 	.word	0x02810115
    6dd0:	02810423 	.word	0x02810423
    6dd4:	04230423 	.word	0x04230423
    6dd8:	04230423 	.word	0x04230423
    6ddc:	042302c6 	.word	0x042302c6
    6de0:	02cd0423 	.word	0x02cd0423
    6de4:	04230423 	.word	0x04230423
    6de8:	04230423 	.word	0x04230423
    6dec:	02f70423 	.word	0x02f70423
    6df0:	04230423 	.word	0x04230423
    6df4:	04230325 	.word	0x04230325
    6df8:	04230423 	.word	0x04230423
    6dfc:	04230423 	.word	0x04230423
    6e00:	04230423 	.word	0x04230423
    6e04:	04230423 	.word	0x04230423
    6e08:	03660423 	.word	0x03660423
    6e0c:	02810379 	.word	0x02810379
    6e10:	02810281 	.word	0x02810281
    6e14:	03790381 	.word	0x03790381
    6e18:	04230423 	.word	0x04230423
    6e1c:	042303d1 	.word	0x042303d1
    6e20:	00a303db 	.word	0x00a303db
    6e24:	03ee0064 	.word	0x03ee0064
    6e28:	03f50423 	.word	0x03f50423
    6e2c:	03aa0423 	.word	0x03aa0423
    6e30:	04230423 	.word	0x04230423
    6e34:	03bc      	.short	0x03bc
    6e36:	980c      	ldr	r0, [sp, #48]	; 0x30
    6e38:	930e      	str	r3, [sp, #56]	; 0x38
    6e3a:	4240      	negs	r0, r0
    6e3c:	900c      	str	r0, [sp, #48]	; 0x30
    6e3e:	9b07      	ldr	r3, [sp, #28]
    6e40:	f043 0304 	orr.w	r3, r3, #4
    6e44:	9307      	str	r3, [sp, #28]
    6e46:	f898 3000 	ldrb.w	r3, [r8]
    6e4a:	e792      	b.n	6d72 <_svfprintf_r+0xb2>
    6e4c:	980e      	ldr	r0, [sp, #56]	; 0x38
    6e4e:	46ab      	mov	fp, r5
    6e50:	2100      	movs	r1, #0
    6e52:	6804      	ldr	r4, [r0, #0]
    6e54:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    6e58:	1d07      	adds	r7, r0, #4
    6e5a:	9807      	ldr	r0, [sp, #28]
    6e5c:	2330      	movs	r3, #48	; 0x30
    6e5e:	2278      	movs	r2, #120	; 0x78
    6e60:	458b      	cmp	fp, r1
    6e62:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
    6e66:	f04f 0500 	mov.w	r5, #0
    6e6a:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
    6e6e:	f040 0302 	orr.w	r3, r0, #2
    6e72:	f2c0 83c7 	blt.w	7604 <_svfprintf_r+0x944>
    6e76:	f020 0380 	bic.w	r3, r0, #128	; 0x80
    6e7a:	f043 0302 	orr.w	r3, r3, #2
    6e7e:	9307      	str	r3, [sp, #28]
    6e80:	ea54 0305 	orrs.w	r3, r4, r5
    6e84:	970e      	str	r7, [sp, #56]	; 0x38
    6e86:	f000 8393 	beq.w	75b0 <_svfprintf_r+0x8f0>
    6e8a:	460f      	mov	r7, r1
    6e8c:	9211      	str	r2, [sp, #68]	; 0x44
    6e8e:	48b3      	ldr	r0, [pc, #716]	; (715c <_svfprintf_r+0x49c>)
    6e90:	e2ce      	b.n	7430 <_svfprintf_r+0x770>
    6e92:	aa23      	add	r2, sp, #140	; 0x8c
    6e94:	9909      	ldr	r1, [sp, #36]	; 0x24
    6e96:	980a      	ldr	r0, [sp, #40]	; 0x28
    6e98:	f001 fa6a 	bl	8370 <__ssprint_r>
    6e9c:	b948      	cbnz	r0, 6eb2 <_svfprintf_r+0x1f2>
    6e9e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    6ea2:	e752      	b.n	6d4a <_svfprintf_r+0x8a>
    6ea4:	9b25      	ldr	r3, [sp, #148]	; 0x94
    6ea6:	b123      	cbz	r3, 6eb2 <_svfprintf_r+0x1f2>
    6ea8:	980a      	ldr	r0, [sp, #40]	; 0x28
    6eaa:	9909      	ldr	r1, [sp, #36]	; 0x24
    6eac:	aa23      	add	r2, sp, #140	; 0x8c
    6eae:	f001 fa5f 	bl	8370 <__ssprint_r>
    6eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6eb4:	899b      	ldrh	r3, [r3, #12]
    6eb6:	f013 0f40 	tst.w	r3, #64	; 0x40
    6eba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6ebc:	bf18      	it	ne
    6ebe:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    6ec2:	4618      	mov	r0, r3
    6ec4:	b041      	add	sp, #260	; 0x104
    6ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6eca:	9311      	str	r3, [sp, #68]	; 0x44
    6ecc:	46ab      	mov	fp, r5
    6ece:	2a00      	cmp	r2, #0
    6ed0:	f041 8233 	bne.w	833a <_svfprintf_r+0x167a>
    6ed4:	9a07      	ldr	r2, [sp, #28]
    6ed6:	f012 0320 	ands.w	r3, r2, #32
    6eda:	f000 822e 	beq.w	733a <_svfprintf_r+0x67a>
    6ede:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    6ee0:	3707      	adds	r7, #7
    6ee2:	f027 0307 	bic.w	r3, r7, #7
    6ee6:	2700      	movs	r7, #0
    6ee8:	f103 0108 	add.w	r1, r3, #8
    6eec:	45bb      	cmp	fp, r7
    6eee:	910e      	str	r1, [sp, #56]	; 0x38
    6ef0:	e9d3 4500 	ldrd	r4, r5, [r3]
    6ef4:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
    6ef8:	f2c0 8779 	blt.w	7dee <_svfprintf_r+0x112e>
    6efc:	f022 0380 	bic.w	r3, r2, #128	; 0x80
    6f00:	9307      	str	r3, [sp, #28]
    6f02:	ea54 0305 	orrs.w	r3, r4, r5
    6f06:	f000 8375 	beq.w	75f4 <_svfprintf_r+0x934>
    6f0a:	ae30      	add	r6, sp, #192	; 0xc0
    6f0c:	08e2      	lsrs	r2, r4, #3
    6f0e:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
    6f12:	08e9      	lsrs	r1, r5, #3
    6f14:	f004 0307 	and.w	r3, r4, #7
    6f18:	460d      	mov	r5, r1
    6f1a:	4614      	mov	r4, r2
    6f1c:	3330      	adds	r3, #48	; 0x30
    6f1e:	ea54 0205 	orrs.w	r2, r4, r5
    6f22:	f806 3d01 	strb.w	r3, [r6, #-1]!
    6f26:	d1f1      	bne.n	6f0c <_svfprintf_r+0x24c>
    6f28:	9a07      	ldr	r2, [sp, #28]
    6f2a:	07d1      	lsls	r1, r2, #31
    6f2c:	f140 8084 	bpl.w	7038 <_svfprintf_r+0x378>
    6f30:	2b30      	cmp	r3, #48	; 0x30
    6f32:	f000 8081 	beq.w	7038 <_svfprintf_r+0x378>
    6f36:	2230      	movs	r2, #48	; 0x30
    6f38:	1e73      	subs	r3, r6, #1
    6f3a:	f806 2c01 	strb.w	r2, [r6, #-1]
    6f3e:	aa30      	add	r2, sp, #192	; 0xc0
    6f40:	1ad2      	subs	r2, r2, r3
    6f42:	920d      	str	r2, [sp, #52]	; 0x34
    6f44:	461e      	mov	r6, r3
    6f46:	e07a      	b.n	703e <_svfprintf_r+0x37e>
    6f48:	f898 3000 	ldrb.w	r3, [r8]
    6f4c:	2b2a      	cmp	r3, #42	; 0x2a
    6f4e:	f108 0401 	add.w	r4, r8, #1
    6f52:	f001 81b9 	beq.w	82c8 <_svfprintf_r+0x1608>
    6f56:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    6f5a:	2809      	cmp	r0, #9
    6f5c:	bf98      	it	ls
    6f5e:	2500      	movls	r5, #0
    6f60:	f201 816c 	bhi.w	823c <_svfprintf_r+0x157c>
    6f64:	f814 3b01 	ldrb.w	r3, [r4], #1
    6f68:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    6f6c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
    6f70:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    6f74:	2809      	cmp	r0, #9
    6f76:	d9f5      	bls.n	6f64 <_svfprintf_r+0x2a4>
    6f78:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
    6f7c:	46a0      	mov	r8, r4
    6f7e:	e6fa      	b.n	6d76 <_svfprintf_r+0xb6>
    6f80:	9b07      	ldr	r3, [sp, #28]
    6f82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    6f86:	9307      	str	r3, [sp, #28]
    6f88:	f898 3000 	ldrb.w	r3, [r8]
    6f8c:	e6f1      	b.n	6d72 <_svfprintf_r+0xb2>
    6f8e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    6f92:	2300      	movs	r3, #0
    6f94:	461c      	mov	r4, r3
    6f96:	f818 3b01 	ldrb.w	r3, [r8], #1
    6f9a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    6f9e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
    6fa2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    6fa6:	2809      	cmp	r0, #9
    6fa8:	d9f5      	bls.n	6f96 <_svfprintf_r+0x2d6>
    6faa:	940c      	str	r4, [sp, #48]	; 0x30
    6fac:	e6e3      	b.n	6d76 <_svfprintf_r+0xb6>
    6fae:	9311      	str	r3, [sp, #68]	; 0x44
    6fb0:	46ab      	mov	fp, r5
    6fb2:	2a00      	cmp	r2, #0
    6fb4:	f041 81ab 	bne.w	830e <_svfprintf_r+0x164e>
    6fb8:	9b07      	ldr	r3, [sp, #28]
    6fba:	f043 0310 	orr.w	r3, r3, #16
    6fbe:	9307      	str	r3, [sp, #28]
    6fc0:	9b07      	ldr	r3, [sp, #28]
    6fc2:	0698      	lsls	r0, r3, #26
    6fc4:	f140 8530 	bpl.w	7a28 <_svfprintf_r+0xd68>
    6fc8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    6fca:	3707      	adds	r7, #7
    6fcc:	f027 0707 	bic.w	r7, r7, #7
    6fd0:	e9d7 2300 	ldrd	r2, r3, [r7]
    6fd4:	f107 0108 	add.w	r1, r7, #8
    6fd8:	910e      	str	r1, [sp, #56]	; 0x38
    6fda:	4614      	mov	r4, r2
    6fdc:	461d      	mov	r5, r3
    6fde:	2a00      	cmp	r2, #0
    6fe0:	f173 0300 	sbcs.w	r3, r3, #0
    6fe4:	f2c0 855b 	blt.w	7a9e <_svfprintf_r+0xdde>
    6fe8:	f1bb 0f00 	cmp.w	fp, #0
    6fec:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
    6ff0:	f2c0 8538 	blt.w	7a64 <_svfprintf_r+0xda4>
    6ff4:	9b07      	ldr	r3, [sp, #28]
    6ff6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    6ffa:	9307      	str	r3, [sp, #28]
    6ffc:	ea54 0305 	orrs.w	r3, r4, r5
    7000:	f000 81db 	beq.w	73ba <_svfprintf_r+0x6fa>
    7004:	2d00      	cmp	r5, #0
    7006:	bf08      	it	eq
    7008:	2c0a      	cmpeq	r4, #10
    700a:	f0c0 81db 	bcc.w	73c4 <_svfprintf_r+0x704>
    700e:	ae30      	add	r6, sp, #192	; 0xc0
    7010:	4620      	mov	r0, r4
    7012:	4629      	mov	r1, r5
    7014:	220a      	movs	r2, #10
    7016:	2300      	movs	r3, #0
    7018:	f001 fa52 	bl	84c0 <__aeabi_uldivmod>
    701c:	3230      	adds	r2, #48	; 0x30
    701e:	f806 2d01 	strb.w	r2, [r6, #-1]!
    7022:	4620      	mov	r0, r4
    7024:	4629      	mov	r1, r5
    7026:	2300      	movs	r3, #0
    7028:	220a      	movs	r2, #10
    702a:	f001 fa49 	bl	84c0 <__aeabi_uldivmod>
    702e:	4604      	mov	r4, r0
    7030:	460d      	mov	r5, r1
    7032:	ea54 0305 	orrs.w	r3, r4, r5
    7036:	d1eb      	bne.n	7010 <_svfprintf_r+0x350>
    7038:	ab30      	add	r3, sp, #192	; 0xc0
    703a:	1b9b      	subs	r3, r3, r6
    703c:	930d      	str	r3, [sp, #52]	; 0x34
    703e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7040:	455b      	cmp	r3, fp
    7042:	bfb8      	it	lt
    7044:	465b      	movlt	r3, fp
    7046:	9308      	str	r3, [sp, #32]
    7048:	2300      	movs	r3, #0
    704a:	9313      	str	r3, [sp, #76]	; 0x4c
    704c:	b117      	cbz	r7, 7054 <_svfprintf_r+0x394>
    704e:	9b08      	ldr	r3, [sp, #32]
    7050:	3301      	adds	r3, #1
    7052:	9308      	str	r3, [sp, #32]
    7054:	9b07      	ldr	r3, [sp, #28]
    7056:	f013 0302 	ands.w	r3, r3, #2
    705a:	930f      	str	r3, [sp, #60]	; 0x3c
    705c:	d002      	beq.n	7064 <_svfprintf_r+0x3a4>
    705e:	9b08      	ldr	r3, [sp, #32]
    7060:	3302      	adds	r3, #2
    7062:	9308      	str	r3, [sp, #32]
    7064:	9b07      	ldr	r3, [sp, #28]
    7066:	f013 0384 	ands.w	r3, r3, #132	; 0x84
    706a:	9310      	str	r3, [sp, #64]	; 0x40
    706c:	f040 82d7 	bne.w	761e <_svfprintf_r+0x95e>
    7070:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7072:	9a08      	ldr	r2, [sp, #32]
    7074:	1a9d      	subs	r5, r3, r2
    7076:	2d00      	cmp	r5, #0
    7078:	f340 82d1 	ble.w	761e <_svfprintf_r+0x95e>
    707c:	2d10      	cmp	r5, #16
    707e:	9925      	ldr	r1, [sp, #148]	; 0x94
    7080:	9a24      	ldr	r2, [sp, #144]	; 0x90
    7082:	4f37      	ldr	r7, [pc, #220]	; (7160 <_svfprintf_r+0x4a0>)
    7084:	dd27      	ble.n	70d6 <_svfprintf_r+0x416>
    7086:	9618      	str	r6, [sp, #96]	; 0x60
    7088:	4648      	mov	r0, r9
    708a:	2410      	movs	r4, #16
    708c:	46b9      	mov	r9, r7
    708e:	9e09      	ldr	r6, [sp, #36]	; 0x24
    7090:	462f      	mov	r7, r5
    7092:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    7094:	e004      	b.n	70a0 <_svfprintf_r+0x3e0>
    7096:	3f10      	subs	r7, #16
    7098:	2f10      	cmp	r7, #16
    709a:	f100 0008 	add.w	r0, r0, #8
    709e:	dd16      	ble.n	70ce <_svfprintf_r+0x40e>
    70a0:	3201      	adds	r2, #1
    70a2:	4b2f      	ldr	r3, [pc, #188]	; (7160 <_svfprintf_r+0x4a0>)
    70a4:	9224      	str	r2, [sp, #144]	; 0x90
    70a6:	3110      	adds	r1, #16
    70a8:	2a07      	cmp	r2, #7
    70aa:	9125      	str	r1, [sp, #148]	; 0x94
    70ac:	e880 0018 	stmia.w	r0, {r3, r4}
    70b0:	ddf1      	ble.n	7096 <_svfprintf_r+0x3d6>
    70b2:	aa23      	add	r2, sp, #140	; 0x8c
    70b4:	4631      	mov	r1, r6
    70b6:	4628      	mov	r0, r5
    70b8:	f001 f95a 	bl	8370 <__ssprint_r>
    70bc:	2800      	cmp	r0, #0
    70be:	f47f aef8 	bne.w	6eb2 <_svfprintf_r+0x1f2>
    70c2:	3f10      	subs	r7, #16
    70c4:	2f10      	cmp	r7, #16
    70c6:	9925      	ldr	r1, [sp, #148]	; 0x94
    70c8:	9a24      	ldr	r2, [sp, #144]	; 0x90
    70ca:	a830      	add	r0, sp, #192	; 0xc0
    70cc:	dce8      	bgt.n	70a0 <_svfprintf_r+0x3e0>
    70ce:	9e18      	ldr	r6, [sp, #96]	; 0x60
    70d0:	463d      	mov	r5, r7
    70d2:	464f      	mov	r7, r9
    70d4:	4681      	mov	r9, r0
    70d6:	3201      	adds	r2, #1
    70d8:	186c      	adds	r4, r5, r1
    70da:	2a07      	cmp	r2, #7
    70dc:	9425      	str	r4, [sp, #148]	; 0x94
    70de:	9224      	str	r2, [sp, #144]	; 0x90
    70e0:	f8c9 7000 	str.w	r7, [r9]
    70e4:	f8c9 5004 	str.w	r5, [r9, #4]
    70e8:	f300 8428 	bgt.w	793c <_svfprintf_r+0xc7c>
    70ec:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
    70f0:	f109 0908 	add.w	r9, r9, #8
    70f4:	b177      	cbz	r7, 7114 <_svfprintf_r+0x454>
    70f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
    70f8:	3301      	adds	r3, #1
    70fa:	3401      	adds	r4, #1
    70fc:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
    7100:	2201      	movs	r2, #1
    7102:	2b07      	cmp	r3, #7
    7104:	9425      	str	r4, [sp, #148]	; 0x94
    7106:	9324      	str	r3, [sp, #144]	; 0x90
    7108:	e889 0006 	stmia.w	r9, {r1, r2}
    710c:	f300 83a0 	bgt.w	7850 <_svfprintf_r+0xb90>
    7110:	f109 0908 	add.w	r9, r9, #8
    7114:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7116:	b16b      	cbz	r3, 7134 <_svfprintf_r+0x474>
    7118:	9b24      	ldr	r3, [sp, #144]	; 0x90
    711a:	3301      	adds	r3, #1
    711c:	3402      	adds	r4, #2
    711e:	a91c      	add	r1, sp, #112	; 0x70
    7120:	2202      	movs	r2, #2
    7122:	2b07      	cmp	r3, #7
    7124:	9425      	str	r4, [sp, #148]	; 0x94
    7126:	9324      	str	r3, [sp, #144]	; 0x90
    7128:	e889 0006 	stmia.w	r9, {r1, r2}
    712c:	f300 839c 	bgt.w	7868 <_svfprintf_r+0xba8>
    7130:	f109 0908 	add.w	r9, r9, #8
    7134:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7136:	2b80      	cmp	r3, #128	; 0x80
    7138:	f000 82d5 	beq.w	76e6 <_svfprintf_r+0xa26>
    713c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    713e:	ebc3 070b 	rsb	r7, r3, fp
    7142:	2f00      	cmp	r7, #0
    7144:	dd39      	ble.n	71ba <_svfprintf_r+0x4fa>
    7146:	4a07      	ldr	r2, [pc, #28]	; (7164 <_svfprintf_r+0x4a4>)
    7148:	9b24      	ldr	r3, [sp, #144]	; 0x90
    714a:	920f      	str	r2, [sp, #60]	; 0x3c
    714c:	2f10      	cmp	r7, #16
    714e:	dd28      	ble.n	71a2 <_svfprintf_r+0x4e2>
    7150:	4622      	mov	r2, r4
    7152:	f04f 0b10 	mov.w	fp, #16
    7156:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    7158:	9c09      	ldr	r4, [sp, #36]	; 0x24
    715a:	e00a      	b.n	7172 <_svfprintf_r+0x4b2>
    715c:	00008fb0 	.word	0x00008fb0
    7160:	00008fcc 	.word	0x00008fcc
    7164:	00008f7c 	.word	0x00008f7c
    7168:	3f10      	subs	r7, #16
    716a:	2f10      	cmp	r7, #16
    716c:	f109 0908 	add.w	r9, r9, #8
    7170:	dd16      	ble.n	71a0 <_svfprintf_r+0x4e0>
    7172:	3301      	adds	r3, #1
    7174:	3210      	adds	r2, #16
    7176:	2b07      	cmp	r3, #7
    7178:	9225      	str	r2, [sp, #148]	; 0x94
    717a:	9324      	str	r3, [sp, #144]	; 0x90
    717c:	e889 0c00 	stmia.w	r9, {sl, fp}
    7180:	ddf2      	ble.n	7168 <_svfprintf_r+0x4a8>
    7182:	aa23      	add	r2, sp, #140	; 0x8c
    7184:	4621      	mov	r1, r4
    7186:	4628      	mov	r0, r5
    7188:	f001 f8f2 	bl	8370 <__ssprint_r>
    718c:	2800      	cmp	r0, #0
    718e:	f47f ae90 	bne.w	6eb2 <_svfprintf_r+0x1f2>
    7192:	3f10      	subs	r7, #16
    7194:	2f10      	cmp	r7, #16
    7196:	9a25      	ldr	r2, [sp, #148]	; 0x94
    7198:	9b24      	ldr	r3, [sp, #144]	; 0x90
    719a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    719e:	dce8      	bgt.n	7172 <_svfprintf_r+0x4b2>
    71a0:	4614      	mov	r4, r2
    71a2:	3301      	adds	r3, #1
    71a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    71a6:	9324      	str	r3, [sp, #144]	; 0x90
    71a8:	443c      	add	r4, r7
    71aa:	2b07      	cmp	r3, #7
    71ac:	9425      	str	r4, [sp, #148]	; 0x94
    71ae:	e889 0084 	stmia.w	r9, {r2, r7}
    71b2:	f300 8341 	bgt.w	7838 <_svfprintf_r+0xb78>
    71b6:	f109 0908 	add.w	r9, r9, #8
    71ba:	9b07      	ldr	r3, [sp, #28]
    71bc:	05da      	lsls	r2, r3, #23
    71be:	f100 8230 	bmi.w	7622 <_svfprintf_r+0x962>
    71c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
    71c4:	990d      	ldr	r1, [sp, #52]	; 0x34
    71c6:	f8c9 6000 	str.w	r6, [r9]
    71ca:	3301      	adds	r3, #1
    71cc:	440c      	add	r4, r1
    71ce:	2b07      	cmp	r3, #7
    71d0:	9425      	str	r4, [sp, #148]	; 0x94
    71d2:	f8c9 1004 	str.w	r1, [r9, #4]
    71d6:	9324      	str	r3, [sp, #144]	; 0x90
    71d8:	f300 8318 	bgt.w	780c <_svfprintf_r+0xb4c>
    71dc:	f109 0908 	add.w	r9, r9, #8
    71e0:	9b07      	ldr	r3, [sp, #28]
    71e2:	0759      	lsls	r1, r3, #29
    71e4:	d53f      	bpl.n	7266 <_svfprintf_r+0x5a6>
    71e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    71e8:	9a08      	ldr	r2, [sp, #32]
    71ea:	1a9d      	subs	r5, r3, r2
    71ec:	2d00      	cmp	r5, #0
    71ee:	dd3a      	ble.n	7266 <_svfprintf_r+0x5a6>
    71f0:	2d10      	cmp	r5, #16
    71f2:	9b24      	ldr	r3, [sp, #144]	; 0x90
    71f4:	4fbc      	ldr	r7, [pc, #752]	; (74e8 <_svfprintf_r+0x828>)
    71f6:	dd23      	ble.n	7240 <_svfprintf_r+0x580>
    71f8:	4622      	mov	r2, r4
    71fa:	2610      	movs	r6, #16
    71fc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    7200:	9c09      	ldr	r4, [sp, #36]	; 0x24
    7202:	e004      	b.n	720e <_svfprintf_r+0x54e>
    7204:	3d10      	subs	r5, #16
    7206:	2d10      	cmp	r5, #16
    7208:	f109 0908 	add.w	r9, r9, #8
    720c:	dd17      	ble.n	723e <_svfprintf_r+0x57e>
    720e:	3301      	adds	r3, #1
    7210:	49b5      	ldr	r1, [pc, #724]	; (74e8 <_svfprintf_r+0x828>)
    7212:	9324      	str	r3, [sp, #144]	; 0x90
    7214:	3210      	adds	r2, #16
    7216:	2b07      	cmp	r3, #7
    7218:	9225      	str	r2, [sp, #148]	; 0x94
    721a:	e889 0042 	stmia.w	r9, {r1, r6}
    721e:	ddf1      	ble.n	7204 <_svfprintf_r+0x544>
    7220:	aa23      	add	r2, sp, #140	; 0x8c
    7222:	4621      	mov	r1, r4
    7224:	4658      	mov	r0, fp
    7226:	f001 f8a3 	bl	8370 <__ssprint_r>
    722a:	2800      	cmp	r0, #0
    722c:	f47f ae41 	bne.w	6eb2 <_svfprintf_r+0x1f2>
    7230:	3d10      	subs	r5, #16
    7232:	2d10      	cmp	r5, #16
    7234:	9a25      	ldr	r2, [sp, #148]	; 0x94
    7236:	9b24      	ldr	r3, [sp, #144]	; 0x90
    7238:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    723c:	dce7      	bgt.n	720e <_svfprintf_r+0x54e>
    723e:	4614      	mov	r4, r2
    7240:	3301      	adds	r3, #1
    7242:	442c      	add	r4, r5
    7244:	2b07      	cmp	r3, #7
    7246:	9425      	str	r4, [sp, #148]	; 0x94
    7248:	9324      	str	r3, [sp, #144]	; 0x90
    724a:	f8c9 7000 	str.w	r7, [r9]
    724e:	f8c9 5004 	str.w	r5, [r9, #4]
    7252:	dd08      	ble.n	7266 <_svfprintf_r+0x5a6>
    7254:	aa23      	add	r2, sp, #140	; 0x8c
    7256:	9909      	ldr	r1, [sp, #36]	; 0x24
    7258:	980a      	ldr	r0, [sp, #40]	; 0x28
    725a:	f001 f889 	bl	8370 <__ssprint_r>
    725e:	2800      	cmp	r0, #0
    7260:	f47f ae27 	bne.w	6eb2 <_svfprintf_r+0x1f2>
    7264:	9c25      	ldr	r4, [sp, #148]	; 0x94
    7266:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    7268:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    726a:	9908      	ldr	r1, [sp, #32]
    726c:	428a      	cmp	r2, r1
    726e:	bfac      	ite	ge
    7270:	189b      	addge	r3, r3, r2
    7272:	185b      	addlt	r3, r3, r1
    7274:	930b      	str	r3, [sp, #44]	; 0x2c
    7276:	2c00      	cmp	r4, #0
    7278:	f040 82d4 	bne.w	7824 <_svfprintf_r+0xb64>
    727c:	2300      	movs	r3, #0
    727e:	9324      	str	r3, [sp, #144]	; 0x90
    7280:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    7284:	e542      	b.n	6d0c <_svfprintf_r+0x4c>
    7286:	9311      	str	r3, [sp, #68]	; 0x44
    7288:	46ab      	mov	fp, r5
    728a:	2a00      	cmp	r2, #0
    728c:	f041 8051 	bne.w	8332 <_svfprintf_r+0x1672>
    7290:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    7292:	3707      	adds	r7, #7
    7294:	f027 0307 	bic.w	r3, r7, #7
    7298:	f103 0208 	add.w	r2, r3, #8
    729c:	920e      	str	r2, [sp, #56]	; 0x38
    729e:	681a      	ldr	r2, [r3, #0]
    72a0:	9214      	str	r2, [sp, #80]	; 0x50
    72a2:	685b      	ldr	r3, [r3, #4]
    72a4:	9315      	str	r3, [sp, #84]	; 0x54
    72a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    72a8:	9d14      	ldr	r5, [sp, #80]	; 0x50
    72aa:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
    72ae:	4628      	mov	r0, r5
    72b0:	4621      	mov	r1, r4
    72b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    72b6:	4b8d      	ldr	r3, [pc, #564]	; (74ec <_svfprintf_r+0x82c>)
    72b8:	f7fd f908 	bl	44cc <__aeabi_dcmpun>
    72bc:	2800      	cmp	r0, #0
    72be:	f040 84c2 	bne.w	7c46 <_svfprintf_r+0xf86>
    72c2:	4628      	mov	r0, r5
    72c4:	4621      	mov	r1, r4
    72c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    72ca:	4b88      	ldr	r3, [pc, #544]	; (74ec <_svfprintf_r+0x82c>)
    72cc:	f7fd f8e0 	bl	4490 <__aeabi_dcmple>
    72d0:	2800      	cmp	r0, #0
    72d2:	f040 84b8 	bne.w	7c46 <_svfprintf_r+0xf86>
    72d6:	9814      	ldr	r0, [sp, #80]	; 0x50
    72d8:	9915      	ldr	r1, [sp, #84]	; 0x54
    72da:	2200      	movs	r2, #0
    72dc:	2300      	movs	r3, #0
    72de:	f7fd f8cd 	bl	447c <__aeabi_dcmplt>
    72e2:	2800      	cmp	r0, #0
    72e4:	f040 874f 	bne.w	8186 <_svfprintf_r+0x14c6>
    72e8:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
    72ec:	4e80      	ldr	r6, [pc, #512]	; (74f0 <_svfprintf_r+0x830>)
    72ee:	4b81      	ldr	r3, [pc, #516]	; (74f4 <_svfprintf_r+0x834>)
    72f0:	9907      	ldr	r1, [sp, #28]
    72f2:	f021 0180 	bic.w	r1, r1, #128	; 0x80
    72f6:	9107      	str	r1, [sp, #28]
    72f8:	9911      	ldr	r1, [sp, #68]	; 0x44
    72fa:	2203      	movs	r2, #3
    72fc:	f04f 0b00 	mov.w	fp, #0
    7300:	9208      	str	r2, [sp, #32]
    7302:	2947      	cmp	r1, #71	; 0x47
    7304:	bfd8      	it	le
    7306:	461e      	movle	r6, r3
    7308:	920d      	str	r2, [sp, #52]	; 0x34
    730a:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
    730e:	e69d      	b.n	704c <_svfprintf_r+0x38c>
    7310:	9b07      	ldr	r3, [sp, #28]
    7312:	f043 0308 	orr.w	r3, r3, #8
    7316:	9307      	str	r3, [sp, #28]
    7318:	f898 3000 	ldrb.w	r3, [r8]
    731c:	e529      	b.n	6d72 <_svfprintf_r+0xb2>
    731e:	9311      	str	r3, [sp, #68]	; 0x44
    7320:	46ab      	mov	fp, r5
    7322:	2a00      	cmp	r2, #0
    7324:	f041 8011 	bne.w	834a <_svfprintf_r+0x168a>
    7328:	9b07      	ldr	r3, [sp, #28]
    732a:	f043 0310 	orr.w	r3, r3, #16
    732e:	9307      	str	r3, [sp, #28]
    7330:	9a07      	ldr	r2, [sp, #28]
    7332:	f012 0320 	ands.w	r3, r2, #32
    7336:	f47f add2 	bne.w	6ede <_svfprintf_r+0x21e>
    733a:	9907      	ldr	r1, [sp, #28]
    733c:	f011 0210 	ands.w	r2, r1, #16
    7340:	f000 852c 	beq.w	7d9c <_svfprintf_r+0x10dc>
    7344:	980e      	ldr	r0, [sp, #56]	; 0x38
    7346:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
    734a:	f1bb 0f00 	cmp.w	fp, #0
    734e:	6804      	ldr	r4, [r0, #0]
    7350:	f100 0704 	add.w	r7, r0, #4
    7354:	f04f 0500 	mov.w	r5, #0
    7358:	f2c0 8548 	blt.w	7dec <_svfprintf_r+0x112c>
    735c:	460a      	mov	r2, r1
    735e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    7362:	9207      	str	r2, [sp, #28]
    7364:	ea54 0205 	orrs.w	r2, r4, r5
    7368:	970e      	str	r7, [sp, #56]	; 0x38
    736a:	f000 8143 	beq.w	75f4 <_svfprintf_r+0x934>
    736e:	461f      	mov	r7, r3
    7370:	e5cb      	b.n	6f0a <_svfprintf_r+0x24a>
    7372:	9311      	str	r3, [sp, #68]	; 0x44
    7374:	46ab      	mov	fp, r5
    7376:	2a00      	cmp	r2, #0
    7378:	f040 87e3 	bne.w	8342 <_svfprintf_r+0x1682>
    737c:	9b07      	ldr	r3, [sp, #28]
    737e:	f043 0310 	orr.w	r3, r3, #16
    7382:	9307      	str	r3, [sp, #28]
    7384:	9a07      	ldr	r2, [sp, #28]
    7386:	f012 0320 	ands.w	r3, r2, #32
    738a:	f000 8332 	beq.w	79f2 <_svfprintf_r+0xd32>
    738e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    7390:	3707      	adds	r7, #7
    7392:	f027 0307 	bic.w	r3, r7, #7
    7396:	2700      	movs	r7, #0
    7398:	f103 0108 	add.w	r1, r3, #8
    739c:	45bb      	cmp	fp, r7
    739e:	910e      	str	r1, [sp, #56]	; 0x38
    73a0:	e9d3 4500 	ldrd	r4, r5, [r3]
    73a4:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
    73a8:	f2c0 835c 	blt.w	7a64 <_svfprintf_r+0xda4>
    73ac:	f022 0380 	bic.w	r3, r2, #128	; 0x80
    73b0:	9307      	str	r3, [sp, #28]
    73b2:	ea54 0305 	orrs.w	r3, r4, r5
    73b6:	f47f ae25 	bne.w	7004 <_svfprintf_r+0x344>
    73ba:	f1bb 0f00 	cmp.w	fp, #0
    73be:	f000 80fe 	beq.w	75be <_svfprintf_r+0x8fe>
    73c2:	2400      	movs	r4, #0
    73c4:	ae40      	add	r6, sp, #256	; 0x100
    73c6:	3430      	adds	r4, #48	; 0x30
    73c8:	f806 4d41 	strb.w	r4, [r6, #-65]!
    73cc:	e634      	b.n	7038 <_svfprintf_r+0x378>
    73ce:	9311      	str	r3, [sp, #68]	; 0x44
    73d0:	46ab      	mov	fp, r5
    73d2:	2a00      	cmp	r2, #0
    73d4:	f040 8797 	bne.w	8306 <_svfprintf_r+0x1646>
    73d8:	9b07      	ldr	r3, [sp, #28]
    73da:	4847      	ldr	r0, [pc, #284]	; (74f8 <_svfprintf_r+0x838>)
    73dc:	069d      	lsls	r5, r3, #26
    73de:	f140 8097 	bpl.w	7510 <_svfprintf_r+0x850>
    73e2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    73e4:	3707      	adds	r7, #7
    73e6:	f027 0307 	bic.w	r3, r7, #7
    73ea:	e9d3 4500 	ldrd	r4, r5, [r3]
    73ee:	f103 0208 	add.w	r2, r3, #8
    73f2:	920e      	str	r2, [sp, #56]	; 0x38
    73f4:	9a07      	ldr	r2, [sp, #28]
    73f6:	f012 0701 	ands.w	r7, r2, #1
    73fa:	f000 8241 	beq.w	7880 <_svfprintf_r+0xbc0>
    73fe:	ea54 0305 	orrs.w	r3, r4, r5
    7402:	f000 8505 	beq.w	7e10 <_svfprintf_r+0x1150>
    7406:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
    740a:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
    740e:	2700      	movs	r7, #0
    7410:	9a07      	ldr	r2, [sp, #28]
    7412:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
    7416:	2330      	movs	r3, #48	; 0x30
    7418:	45bb      	cmp	fp, r7
    741a:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
    741e:	f042 0302 	orr.w	r3, r2, #2
    7422:	f2c0 86b5 	blt.w	8190 <_svfprintf_r+0x14d0>
    7426:	f022 0380 	bic.w	r3, r2, #128	; 0x80
    742a:	f043 0302 	orr.w	r3, r3, #2
    742e:	9307      	str	r3, [sp, #28]
    7430:	ae30      	add	r6, sp, #192	; 0xc0
    7432:	0923      	lsrs	r3, r4, #4
    7434:	f004 010f 	and.w	r1, r4, #15
    7438:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
    743c:	092a      	lsrs	r2, r5, #4
    743e:	461c      	mov	r4, r3
    7440:	4615      	mov	r5, r2
    7442:	5c43      	ldrb	r3, [r0, r1]
    7444:	f806 3d01 	strb.w	r3, [r6, #-1]!
    7448:	ea54 0305 	orrs.w	r3, r4, r5
    744c:	d1f1      	bne.n	7432 <_svfprintf_r+0x772>
    744e:	e5f3      	b.n	7038 <_svfprintf_r+0x378>
    7450:	990e      	ldr	r1, [sp, #56]	; 0x38
    7452:	9311      	str	r3, [sp, #68]	; 0x44
    7454:	680a      	ldr	r2, [r1, #0]
    7456:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
    745a:	2300      	movs	r3, #0
    745c:	460a      	mov	r2, r1
    745e:	461f      	mov	r7, r3
    7460:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
    7464:	3204      	adds	r2, #4
    7466:	2301      	movs	r3, #1
    7468:	9308      	str	r3, [sp, #32]
    746a:	46bb      	mov	fp, r7
    746c:	9713      	str	r7, [sp, #76]	; 0x4c
    746e:	920e      	str	r2, [sp, #56]	; 0x38
    7470:	930d      	str	r3, [sp, #52]	; 0x34
    7472:	ae26      	add	r6, sp, #152	; 0x98
    7474:	e5ee      	b.n	7054 <_svfprintf_r+0x394>
    7476:	9311      	str	r3, [sp, #68]	; 0x44
    7478:	46ab      	mov	fp, r5
    747a:	2a00      	cmp	r2, #0
    747c:	f43f ada0 	beq.w	6fc0 <_svfprintf_r+0x300>
    7480:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    7484:	e59c      	b.n	6fc0 <_svfprintf_r+0x300>
    7486:	9b07      	ldr	r3, [sp, #28]
    7488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    748c:	9307      	str	r3, [sp, #28]
    748e:	f898 3000 	ldrb.w	r3, [r8]
    7492:	e46e      	b.n	6d72 <_svfprintf_r+0xb2>
    7494:	f898 3000 	ldrb.w	r3, [r8]
    7498:	2900      	cmp	r1, #0
    749a:	f47f ac6a 	bne.w	6d72 <_svfprintf_r+0xb2>
    749e:	2201      	movs	r2, #1
    74a0:	2120      	movs	r1, #32
    74a2:	e466      	b.n	6d72 <_svfprintf_r+0xb2>
    74a4:	9b07      	ldr	r3, [sp, #28]
    74a6:	f043 0301 	orr.w	r3, r3, #1
    74aa:	9307      	str	r3, [sp, #28]
    74ac:	f898 3000 	ldrb.w	r3, [r8]
    74b0:	e45f      	b.n	6d72 <_svfprintf_r+0xb2>
    74b2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    74b4:	6823      	ldr	r3, [r4, #0]
    74b6:	930c      	str	r3, [sp, #48]	; 0x30
    74b8:	4618      	mov	r0, r3
    74ba:	2800      	cmp	r0, #0
    74bc:	4623      	mov	r3, r4
    74be:	f103 0304 	add.w	r3, r3, #4
    74c2:	f6ff acb8 	blt.w	6e36 <_svfprintf_r+0x176>
    74c6:	930e      	str	r3, [sp, #56]	; 0x38
    74c8:	f898 3000 	ldrb.w	r3, [r8]
    74cc:	e451      	b.n	6d72 <_svfprintf_r+0xb2>
    74ce:	f898 3000 	ldrb.w	r3, [r8]
    74d2:	2201      	movs	r2, #1
    74d4:	212b      	movs	r1, #43	; 0x2b
    74d6:	e44c      	b.n	6d72 <_svfprintf_r+0xb2>
    74d8:	9311      	str	r3, [sp, #68]	; 0x44
    74da:	46ab      	mov	fp, r5
    74dc:	2a00      	cmp	r2, #0
    74de:	f43f af51 	beq.w	7384 <_svfprintf_r+0x6c4>
    74e2:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    74e6:	e74d      	b.n	7384 <_svfprintf_r+0x6c4>
    74e8:	00008fcc 	.word	0x00008fcc
    74ec:	7fefffff 	.word	0x7fefffff
    74f0:	00008f90 	.word	0x00008f90
    74f4:	00008f8c 	.word	0x00008f8c
    74f8:	00008f9c 	.word	0x00008f9c
    74fc:	9311      	str	r3, [sp, #68]	; 0x44
    74fe:	46ab      	mov	fp, r5
    7500:	2a00      	cmp	r2, #0
    7502:	f040 872a 	bne.w	835a <_svfprintf_r+0x169a>
    7506:	9b07      	ldr	r3, [sp, #28]
    7508:	4899      	ldr	r0, [pc, #612]	; (7770 <_svfprintf_r+0xab0>)
    750a:	069d      	lsls	r5, r3, #26
    750c:	f53f af69 	bmi.w	73e2 <_svfprintf_r+0x722>
    7510:	9b07      	ldr	r3, [sp, #28]
    7512:	06dc      	lsls	r4, r3, #27
    7514:	f140 8435 	bpl.w	7d82 <_svfprintf_r+0x10c2>
    7518:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    751a:	4613      	mov	r3, r2
    751c:	3304      	adds	r3, #4
    751e:	6814      	ldr	r4, [r2, #0]
    7520:	930e      	str	r3, [sp, #56]	; 0x38
    7522:	2500      	movs	r5, #0
    7524:	e766      	b.n	73f4 <_svfprintf_r+0x734>
    7526:	f898 3000 	ldrb.w	r3, [r8]
    752a:	2b6c      	cmp	r3, #108	; 0x6c
    752c:	f000 84e2 	beq.w	7ef4 <_svfprintf_r+0x1234>
    7530:	9807      	ldr	r0, [sp, #28]
    7532:	f040 0010 	orr.w	r0, r0, #16
    7536:	9007      	str	r0, [sp, #28]
    7538:	e41b      	b.n	6d72 <_svfprintf_r+0xb2>
    753a:	2a00      	cmp	r2, #0
    753c:	f040 8709 	bne.w	8352 <_svfprintf_r+0x1692>
    7540:	9b07      	ldr	r3, [sp, #28]
    7542:	069b      	lsls	r3, r3, #26
    7544:	f140 8406 	bpl.w	7d54 <_svfprintf_r+0x1094>
    7548:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    754a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    754c:	6813      	ldr	r3, [r2, #0]
    754e:	17cd      	asrs	r5, r1, #31
    7550:	4608      	mov	r0, r1
    7552:	3204      	adds	r2, #4
    7554:	4629      	mov	r1, r5
    7556:	920e      	str	r2, [sp, #56]	; 0x38
    7558:	e9c3 0100 	strd	r0, r1, [r3]
    755c:	f7ff bbd6 	b.w	6d0c <_svfprintf_r+0x4c>
    7560:	9b07      	ldr	r3, [sp, #28]
    7562:	f043 0320 	orr.w	r3, r3, #32
    7566:	9307      	str	r3, [sp, #28]
    7568:	f898 3000 	ldrb.w	r3, [r8]
    756c:	e401      	b.n	6d72 <_svfprintf_r+0xb2>
    756e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    7570:	9311      	str	r3, [sp, #68]	; 0x44
    7572:	6816      	ldr	r6, [r2, #0]
    7574:	2400      	movs	r4, #0
    7576:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
    757a:	1d17      	adds	r7, r2, #4
    757c:	2e00      	cmp	r6, #0
    757e:	f000 85cd 	beq.w	811c <_svfprintf_r+0x145c>
    7582:	2d00      	cmp	r5, #0
    7584:	f2c0 8518 	blt.w	7fb8 <_svfprintf_r+0x12f8>
    7588:	462a      	mov	r2, r5
    758a:	4621      	mov	r1, r4
    758c:	4630      	mov	r0, r6
    758e:	f7fe f817 	bl	55c0 <memchr>
    7592:	2800      	cmp	r0, #0
    7594:	f000 862a 	beq.w	81ec <_svfprintf_r+0x152c>
    7598:	1b83      	subs	r3, r0, r6
    759a:	930d      	str	r3, [sp, #52]	; 0x34
    759c:	46a3      	mov	fp, r4
    759e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    75a2:	970e      	str	r7, [sp, #56]	; 0x38
    75a4:	9308      	str	r3, [sp, #32]
    75a6:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
    75aa:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
    75ae:	e54d      	b.n	704c <_svfprintf_r+0x38c>
    75b0:	486f      	ldr	r0, [pc, #444]	; (7770 <_svfprintf_r+0xab0>)
    75b2:	9211      	str	r2, [sp, #68]	; 0x44
    75b4:	f1bb 0f00 	cmp.w	fp, #0
    75b8:	f040 8173 	bne.w	78a2 <_svfprintf_r+0xbe2>
    75bc:	465f      	mov	r7, fp
    75be:	f04f 0b00 	mov.w	fp, #0
    75c2:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
    75c6:	ae30      	add	r6, sp, #192	; 0xc0
    75c8:	e539      	b.n	703e <_svfprintf_r+0x37e>
    75ca:	9311      	str	r3, [sp, #68]	; 0x44
    75cc:	2a00      	cmp	r2, #0
    75ce:	f040 86ac 	bne.w	832a <_svfprintf_r+0x166a>
    75d2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    75d4:	2a00      	cmp	r2, #0
    75d6:	f43f ac65 	beq.w	6ea4 <_svfprintf_r+0x1e4>
    75da:	2300      	movs	r3, #0
    75dc:	2101      	movs	r1, #1
    75de:	461f      	mov	r7, r3
    75e0:	9108      	str	r1, [sp, #32]
    75e2:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
    75e6:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
    75ea:	469b      	mov	fp, r3
    75ec:	9313      	str	r3, [sp, #76]	; 0x4c
    75ee:	910d      	str	r1, [sp, #52]	; 0x34
    75f0:	ae26      	add	r6, sp, #152	; 0x98
    75f2:	e52f      	b.n	7054 <_svfprintf_r+0x394>
    75f4:	f1bb 0f00 	cmp.w	fp, #0
    75f8:	f000 8603 	beq.w	8202 <_svfprintf_r+0x1542>
    75fc:	2700      	movs	r7, #0
    75fe:	2400      	movs	r4, #0
    7600:	2500      	movs	r5, #0
    7602:	e482      	b.n	6f0a <_svfprintf_r+0x24a>
    7604:	485a      	ldr	r0, [pc, #360]	; (7770 <_svfprintf_r+0xab0>)
    7606:	9307      	str	r3, [sp, #28]
    7608:	9211      	str	r2, [sp, #68]	; 0x44
    760a:	ea54 0305 	orrs.w	r3, r4, r5
    760e:	970e      	str	r7, [sp, #56]	; 0x38
    7610:	f04f 0700 	mov.w	r7, #0
    7614:	f47f af0c 	bne.w	7430 <_svfprintf_r+0x770>
    7618:	2400      	movs	r4, #0
    761a:	2500      	movs	r5, #0
    761c:	e708      	b.n	7430 <_svfprintf_r+0x770>
    761e:	9c25      	ldr	r4, [sp, #148]	; 0x94
    7620:	e568      	b.n	70f4 <_svfprintf_r+0x434>
    7622:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7624:	2b65      	cmp	r3, #101	; 0x65
    7626:	f340 80a9 	ble.w	777c <_svfprintf_r+0xabc>
    762a:	9814      	ldr	r0, [sp, #80]	; 0x50
    762c:	9915      	ldr	r1, [sp, #84]	; 0x54
    762e:	2200      	movs	r2, #0
    7630:	2300      	movs	r3, #0
    7632:	f7fc ff19 	bl	4468 <__aeabi_dcmpeq>
    7636:	2800      	cmp	r0, #0
    7638:	f000 8135 	beq.w	78a6 <_svfprintf_r+0xbe6>
    763c:	9b24      	ldr	r3, [sp, #144]	; 0x90
    763e:	4a4d      	ldr	r2, [pc, #308]	; (7774 <_svfprintf_r+0xab4>)
    7640:	f8c9 2000 	str.w	r2, [r9]
    7644:	3301      	adds	r3, #1
    7646:	3401      	adds	r4, #1
    7648:	2201      	movs	r2, #1
    764a:	2b07      	cmp	r3, #7
    764c:	9425      	str	r4, [sp, #148]	; 0x94
    764e:	9324      	str	r3, [sp, #144]	; 0x90
    7650:	f8c9 2004 	str.w	r2, [r9, #4]
    7654:	f300 83e8 	bgt.w	7e28 <_svfprintf_r+0x1168>
    7658:	f109 0908 	add.w	r9, r9, #8
    765c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    765e:	9a12      	ldr	r2, [sp, #72]	; 0x48
    7660:	4293      	cmp	r3, r2
    7662:	db03      	blt.n	766c <_svfprintf_r+0x9ac>
    7664:	9b07      	ldr	r3, [sp, #28]
    7666:	07db      	lsls	r3, r3, #31
    7668:	f57f adba 	bpl.w	71e0 <_svfprintf_r+0x520>
    766c:	9b24      	ldr	r3, [sp, #144]	; 0x90
    766e:	9916      	ldr	r1, [sp, #88]	; 0x58
    7670:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    7672:	f8c9 2000 	str.w	r2, [r9]
    7676:	3301      	adds	r3, #1
    7678:	440c      	add	r4, r1
    767a:	2b07      	cmp	r3, #7
    767c:	9425      	str	r4, [sp, #148]	; 0x94
    767e:	f8c9 1004 	str.w	r1, [r9, #4]
    7682:	9324      	str	r3, [sp, #144]	; 0x90
    7684:	f300 8440 	bgt.w	7f08 <_svfprintf_r+0x1248>
    7688:	f109 0908 	add.w	r9, r9, #8
    768c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    768e:	1e5d      	subs	r5, r3, #1
    7690:	2d00      	cmp	r5, #0
    7692:	f77f ada5 	ble.w	71e0 <_svfprintf_r+0x520>
    7696:	4a38      	ldr	r2, [pc, #224]	; (7778 <_svfprintf_r+0xab8>)
    7698:	9b24      	ldr	r3, [sp, #144]	; 0x90
    769a:	920f      	str	r2, [sp, #60]	; 0x3c
    769c:	2d10      	cmp	r5, #16
    769e:	f340 81e6 	ble.w	7a6e <_svfprintf_r+0xdae>
    76a2:	2610      	movs	r6, #16
    76a4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    76a6:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    76aa:	e005      	b.n	76b8 <_svfprintf_r+0x9f8>
    76ac:	f109 0908 	add.w	r9, r9, #8
    76b0:	3d10      	subs	r5, #16
    76b2:	2d10      	cmp	r5, #16
    76b4:	f340 81db 	ble.w	7a6e <_svfprintf_r+0xdae>
    76b8:	3301      	adds	r3, #1
    76ba:	3410      	adds	r4, #16
    76bc:	2b07      	cmp	r3, #7
    76be:	9425      	str	r4, [sp, #148]	; 0x94
    76c0:	9324      	str	r3, [sp, #144]	; 0x90
    76c2:	f8c9 a000 	str.w	sl, [r9]
    76c6:	f8c9 6004 	str.w	r6, [r9, #4]
    76ca:	ddef      	ble.n	76ac <_svfprintf_r+0x9ec>
    76cc:	aa23      	add	r2, sp, #140	; 0x8c
    76ce:	4659      	mov	r1, fp
    76d0:	4638      	mov	r0, r7
    76d2:	f000 fe4d 	bl	8370 <__ssprint_r>
    76d6:	2800      	cmp	r0, #0
    76d8:	f47f abeb 	bne.w	6eb2 <_svfprintf_r+0x1f2>
    76dc:	9c25      	ldr	r4, [sp, #148]	; 0x94
    76de:	9b24      	ldr	r3, [sp, #144]	; 0x90
    76e0:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    76e4:	e7e4      	b.n	76b0 <_svfprintf_r+0x9f0>
    76e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    76e8:	9a08      	ldr	r2, [sp, #32]
    76ea:	1a9f      	subs	r7, r3, r2
    76ec:	2f00      	cmp	r7, #0
    76ee:	f77f ad25 	ble.w	713c <_svfprintf_r+0x47c>
    76f2:	4a21      	ldr	r2, [pc, #132]	; (7778 <_svfprintf_r+0xab8>)
    76f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
    76f6:	920f      	str	r2, [sp, #60]	; 0x3c
    76f8:	2f10      	cmp	r7, #16
    76fa:	dd2b      	ble.n	7754 <_svfprintf_r+0xa94>
    76fc:	464a      	mov	r2, r9
    76fe:	4621      	mov	r1, r4
    7700:	46b9      	mov	r9, r7
    7702:	2510      	movs	r5, #16
    7704:	4637      	mov	r7, r6
    7706:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    7708:	9e09      	ldr	r6, [sp, #36]	; 0x24
    770a:	e006      	b.n	771a <_svfprintf_r+0xa5a>
    770c:	f1a9 0910 	sub.w	r9, r9, #16
    7710:	f1b9 0f10 	cmp.w	r9, #16
    7714:	f102 0208 	add.w	r2, r2, #8
    7718:	dd18      	ble.n	774c <_svfprintf_r+0xa8c>
    771a:	3301      	adds	r3, #1
    771c:	3110      	adds	r1, #16
    771e:	2b07      	cmp	r3, #7
    7720:	9125      	str	r1, [sp, #148]	; 0x94
    7722:	9324      	str	r3, [sp, #144]	; 0x90
    7724:	f8c2 a000 	str.w	sl, [r2]
    7728:	6055      	str	r5, [r2, #4]
    772a:	ddef      	ble.n	770c <_svfprintf_r+0xa4c>
    772c:	aa23      	add	r2, sp, #140	; 0x8c
    772e:	4631      	mov	r1, r6
    7730:	4620      	mov	r0, r4
    7732:	f000 fe1d 	bl	8370 <__ssprint_r>
    7736:	2800      	cmp	r0, #0
    7738:	f47f abbb 	bne.w	6eb2 <_svfprintf_r+0x1f2>
    773c:	f1a9 0910 	sub.w	r9, r9, #16
    7740:	f1b9 0f10 	cmp.w	r9, #16
    7744:	9925      	ldr	r1, [sp, #148]	; 0x94
    7746:	9b24      	ldr	r3, [sp, #144]	; 0x90
    7748:	aa30      	add	r2, sp, #192	; 0xc0
    774a:	dce6      	bgt.n	771a <_svfprintf_r+0xa5a>
    774c:	463e      	mov	r6, r7
    774e:	460c      	mov	r4, r1
    7750:	464f      	mov	r7, r9
    7752:	4691      	mov	r9, r2
    7754:	3301      	adds	r3, #1
    7756:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7758:	9324      	str	r3, [sp, #144]	; 0x90
    775a:	443c      	add	r4, r7
    775c:	2b07      	cmp	r3, #7
    775e:	9425      	str	r4, [sp, #148]	; 0x94
    7760:	e889 0084 	stmia.w	r9, {r2, r7}
    7764:	f300 8245 	bgt.w	7bf2 <_svfprintf_r+0xf32>
    7768:	f109 0908 	add.w	r9, r9, #8
    776c:	e4e6      	b.n	713c <_svfprintf_r+0x47c>
    776e:	bf00      	nop
    7770:	00008fb0 	.word	0x00008fb0
    7774:	00008f78 	.word	0x00008f78
    7778:	00008f7c 	.word	0x00008f7c
    777c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    777e:	9d24      	ldr	r5, [sp, #144]	; 0x90
    7780:	2b01      	cmp	r3, #1
    7782:	f340 8208 	ble.w	7b96 <_svfprintf_r+0xed6>
    7786:	3501      	adds	r5, #1
    7788:	3401      	adds	r4, #1
    778a:	2301      	movs	r3, #1
    778c:	2d07      	cmp	r5, #7
    778e:	9425      	str	r4, [sp, #148]	; 0x94
    7790:	9524      	str	r5, [sp, #144]	; 0x90
    7792:	f8c9 6000 	str.w	r6, [r9]
    7796:	f8c9 3004 	str.w	r3, [r9, #4]
    779a:	f300 820d 	bgt.w	7bb8 <_svfprintf_r+0xef8>
    779e:	f109 0908 	add.w	r9, r9, #8
    77a2:	9a16      	ldr	r2, [sp, #88]	; 0x58
    77a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    77a6:	f8c9 3000 	str.w	r3, [r9]
    77aa:	3501      	adds	r5, #1
    77ac:	4414      	add	r4, r2
    77ae:	2d07      	cmp	r5, #7
    77b0:	9425      	str	r4, [sp, #148]	; 0x94
    77b2:	9524      	str	r5, [sp, #144]	; 0x90
    77b4:	f8c9 2004 	str.w	r2, [r9, #4]
    77b8:	f300 820e 	bgt.w	7bd8 <_svfprintf_r+0xf18>
    77bc:	f109 0908 	add.w	r9, r9, #8
    77c0:	2300      	movs	r3, #0
    77c2:	9814      	ldr	r0, [sp, #80]	; 0x50
    77c4:	9915      	ldr	r1, [sp, #84]	; 0x54
    77c6:	2200      	movs	r2, #0
    77c8:	f7fc fe4e 	bl	4468 <__aeabi_dcmpeq>
    77cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    77ce:	2800      	cmp	r0, #0
    77d0:	f040 80c3 	bne.w	795a <_svfprintf_r+0xc9a>
    77d4:	3b01      	subs	r3, #1
    77d6:	3501      	adds	r5, #1
    77d8:	3601      	adds	r6, #1
    77da:	441c      	add	r4, r3
    77dc:	2d07      	cmp	r5, #7
    77de:	9524      	str	r5, [sp, #144]	; 0x90
    77e0:	9425      	str	r4, [sp, #148]	; 0x94
    77e2:	f8c9 6000 	str.w	r6, [r9]
    77e6:	f8c9 3004 	str.w	r3, [r9, #4]
    77ea:	f300 80f5 	bgt.w	79d8 <_svfprintf_r+0xd18>
    77ee:	f109 0908 	add.w	r9, r9, #8
    77f2:	9a19      	ldr	r2, [sp, #100]	; 0x64
    77f4:	f8c9 2004 	str.w	r2, [r9, #4]
    77f8:	3501      	adds	r5, #1
    77fa:	4414      	add	r4, r2
    77fc:	ab1f      	add	r3, sp, #124	; 0x7c
    77fe:	2d07      	cmp	r5, #7
    7800:	9425      	str	r4, [sp, #148]	; 0x94
    7802:	9524      	str	r5, [sp, #144]	; 0x90
    7804:	f8c9 3000 	str.w	r3, [r9]
    7808:	f77f ace8 	ble.w	71dc <_svfprintf_r+0x51c>
    780c:	aa23      	add	r2, sp, #140	; 0x8c
    780e:	9909      	ldr	r1, [sp, #36]	; 0x24
    7810:	980a      	ldr	r0, [sp, #40]	; 0x28
    7812:	f000 fdad 	bl	8370 <__ssprint_r>
    7816:	2800      	cmp	r0, #0
    7818:	f47f ab4b 	bne.w	6eb2 <_svfprintf_r+0x1f2>
    781c:	9c25      	ldr	r4, [sp, #148]	; 0x94
    781e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    7822:	e4dd      	b.n	71e0 <_svfprintf_r+0x520>
    7824:	aa23      	add	r2, sp, #140	; 0x8c
    7826:	9909      	ldr	r1, [sp, #36]	; 0x24
    7828:	980a      	ldr	r0, [sp, #40]	; 0x28
    782a:	f000 fda1 	bl	8370 <__ssprint_r>
    782e:	2800      	cmp	r0, #0
    7830:	f43f ad24 	beq.w	727c <_svfprintf_r+0x5bc>
    7834:	f7ff bb3d 	b.w	6eb2 <_svfprintf_r+0x1f2>
    7838:	aa23      	add	r2, sp, #140	; 0x8c
    783a:	9909      	ldr	r1, [sp, #36]	; 0x24
    783c:	980a      	ldr	r0, [sp, #40]	; 0x28
    783e:	f000 fd97 	bl	8370 <__ssprint_r>
    7842:	2800      	cmp	r0, #0
    7844:	f47f ab35 	bne.w	6eb2 <_svfprintf_r+0x1f2>
    7848:	9c25      	ldr	r4, [sp, #148]	; 0x94
    784a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    784e:	e4b4      	b.n	71ba <_svfprintf_r+0x4fa>
    7850:	aa23      	add	r2, sp, #140	; 0x8c
    7852:	9909      	ldr	r1, [sp, #36]	; 0x24
    7854:	980a      	ldr	r0, [sp, #40]	; 0x28
    7856:	f000 fd8b 	bl	8370 <__ssprint_r>
    785a:	2800      	cmp	r0, #0
    785c:	f47f ab29 	bne.w	6eb2 <_svfprintf_r+0x1f2>
    7860:	9c25      	ldr	r4, [sp, #148]	; 0x94
    7862:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    7866:	e455      	b.n	7114 <_svfprintf_r+0x454>
    7868:	aa23      	add	r2, sp, #140	; 0x8c
    786a:	9909      	ldr	r1, [sp, #36]	; 0x24
    786c:	980a      	ldr	r0, [sp, #40]	; 0x28
    786e:	f000 fd7f 	bl	8370 <__ssprint_r>
    7872:	2800      	cmp	r0, #0
    7874:	f47f ab1d 	bne.w	6eb2 <_svfprintf_r+0x1f2>
    7878:	9c25      	ldr	r4, [sp, #148]	; 0x94
    787a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    787e:	e459      	b.n	7134 <_svfprintf_r+0x474>
    7880:	f1bb 0f00 	cmp.w	fp, #0
    7884:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
    7888:	f2c0 82da 	blt.w	7e40 <_svfprintf_r+0x1180>
    788c:	f022 0380 	bic.w	r3, r2, #128	; 0x80
    7890:	9307      	str	r3, [sp, #28]
    7892:	ea54 0305 	orrs.w	r3, r4, r5
    7896:	f47f adcb 	bne.w	7430 <_svfprintf_r+0x770>
    789a:	f1bb 0f00 	cmp.w	fp, #0
    789e:	f43f ae8d 	beq.w	75bc <_svfprintf_r+0x8fc>
    78a2:	2700      	movs	r7, #0
    78a4:	e6b8      	b.n	7618 <_svfprintf_r+0x958>
    78a6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
    78a8:	2d00      	cmp	r5, #0
    78aa:	f340 82cc 	ble.w	7e46 <_svfprintf_r+0x1186>
    78ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    78b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
    78b2:	4293      	cmp	r3, r2
    78b4:	bfa8      	it	ge
    78b6:	4613      	movge	r3, r2
    78b8:	2b00      	cmp	r3, #0
    78ba:	461d      	mov	r5, r3
    78bc:	dd0d      	ble.n	78da <_svfprintf_r+0xc1a>
    78be:	9b24      	ldr	r3, [sp, #144]	; 0x90
    78c0:	f8c9 6000 	str.w	r6, [r9]
    78c4:	3301      	adds	r3, #1
    78c6:	442c      	add	r4, r5
    78c8:	2b07      	cmp	r3, #7
    78ca:	9425      	str	r4, [sp, #148]	; 0x94
    78cc:	f8c9 5004 	str.w	r5, [r9, #4]
    78d0:	9324      	str	r3, [sp, #144]	; 0x90
    78d2:	f300 83a3 	bgt.w	801c <_svfprintf_r+0x135c>
    78d6:	f109 0908 	add.w	r9, r9, #8
    78da:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    78dc:	2d00      	cmp	r5, #0
    78de:	bfa8      	it	ge
    78e0:	1b5b      	subge	r3, r3, r5
    78e2:	2b00      	cmp	r3, #0
    78e4:	461d      	mov	r5, r3
    78e6:	f340 80f6 	ble.w	7ad6 <_svfprintf_r+0xe16>
    78ea:	4aba      	ldr	r2, [pc, #744]	; (7bd4 <_svfprintf_r+0xf14>)
    78ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
    78ee:	920f      	str	r2, [sp, #60]	; 0x3c
    78f0:	2d10      	cmp	r5, #16
    78f2:	f340 8280 	ble.w	7df6 <_svfprintf_r+0x1136>
    78f6:	4622      	mov	r2, r4
    78f8:	2710      	movs	r7, #16
    78fa:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    78fe:	9c09      	ldr	r4, [sp, #36]	; 0x24
    7900:	e005      	b.n	790e <_svfprintf_r+0xc4e>
    7902:	f109 0908 	add.w	r9, r9, #8
    7906:	3d10      	subs	r5, #16
    7908:	2d10      	cmp	r5, #16
    790a:	f340 8273 	ble.w	7df4 <_svfprintf_r+0x1134>
    790e:	3301      	adds	r3, #1
    7910:	3210      	adds	r2, #16
    7912:	2b07      	cmp	r3, #7
    7914:	9225      	str	r2, [sp, #148]	; 0x94
    7916:	9324      	str	r3, [sp, #144]	; 0x90
    7918:	f8c9 a000 	str.w	sl, [r9]
    791c:	f8c9 7004 	str.w	r7, [r9, #4]
    7920:	ddef      	ble.n	7902 <_svfprintf_r+0xc42>
    7922:	aa23      	add	r2, sp, #140	; 0x8c
    7924:	4621      	mov	r1, r4
    7926:	4658      	mov	r0, fp
    7928:	f000 fd22 	bl	8370 <__ssprint_r>
    792c:	2800      	cmp	r0, #0
    792e:	f47f aac0 	bne.w	6eb2 <_svfprintf_r+0x1f2>
    7932:	9a25      	ldr	r2, [sp, #148]	; 0x94
    7934:	9b24      	ldr	r3, [sp, #144]	; 0x90
    7936:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    793a:	e7e4      	b.n	7906 <_svfprintf_r+0xc46>
    793c:	aa23      	add	r2, sp, #140	; 0x8c
    793e:	9909      	ldr	r1, [sp, #36]	; 0x24
    7940:	980a      	ldr	r0, [sp, #40]	; 0x28
    7942:	f000 fd15 	bl	8370 <__ssprint_r>
    7946:	2800      	cmp	r0, #0
    7948:	f47f aab3 	bne.w	6eb2 <_svfprintf_r+0x1f2>
    794c:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
    7950:	9c25      	ldr	r4, [sp, #148]	; 0x94
    7952:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    7956:	f7ff bbcd 	b.w	70f4 <_svfprintf_r+0x434>
    795a:	1e5e      	subs	r6, r3, #1
    795c:	2e00      	cmp	r6, #0
    795e:	f77f af48 	ble.w	77f2 <_svfprintf_r+0xb32>
    7962:	4b9c      	ldr	r3, [pc, #624]	; (7bd4 <_svfprintf_r+0xf14>)
    7964:	930f      	str	r3, [sp, #60]	; 0x3c
    7966:	2e10      	cmp	r6, #16
    7968:	dd2c      	ble.n	79c4 <_svfprintf_r+0xd04>
    796a:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
    796e:	2710      	movs	r7, #16
    7970:	46b0      	mov	r8, r6
    7972:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    7976:	9e09      	ldr	r6, [sp, #36]	; 0x24
    7978:	e006      	b.n	7988 <_svfprintf_r+0xcc8>
    797a:	f1a8 0810 	sub.w	r8, r8, #16
    797e:	f1b8 0f10 	cmp.w	r8, #16
    7982:	f109 0908 	add.w	r9, r9, #8
    7986:	dd1a      	ble.n	79be <_svfprintf_r+0xcfe>
    7988:	3501      	adds	r5, #1
    798a:	3410      	adds	r4, #16
    798c:	2d07      	cmp	r5, #7
    798e:	9425      	str	r4, [sp, #148]	; 0x94
    7990:	9524      	str	r5, [sp, #144]	; 0x90
    7992:	f8c9 a000 	str.w	sl, [r9]
    7996:	f8c9 7004 	str.w	r7, [r9, #4]
    799a:	ddee      	ble.n	797a <_svfprintf_r+0xcba>
    799c:	aa23      	add	r2, sp, #140	; 0x8c
    799e:	4631      	mov	r1, r6
    79a0:	4658      	mov	r0, fp
    79a2:	f000 fce5 	bl	8370 <__ssprint_r>
    79a6:	2800      	cmp	r0, #0
    79a8:	f47f aa83 	bne.w	6eb2 <_svfprintf_r+0x1f2>
    79ac:	f1a8 0810 	sub.w	r8, r8, #16
    79b0:	f1b8 0f10 	cmp.w	r8, #16
    79b4:	9c25      	ldr	r4, [sp, #148]	; 0x94
    79b6:	9d24      	ldr	r5, [sp, #144]	; 0x90
    79b8:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    79bc:	dce4      	bgt.n	7988 <_svfprintf_r+0xcc8>
    79be:	4646      	mov	r6, r8
    79c0:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    79c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    79c6:	3501      	adds	r5, #1
    79c8:	4434      	add	r4, r6
    79ca:	2d07      	cmp	r5, #7
    79cc:	9425      	str	r4, [sp, #148]	; 0x94
    79ce:	9524      	str	r5, [sp, #144]	; 0x90
    79d0:	e889 0048 	stmia.w	r9, {r3, r6}
    79d4:	f77f af0b 	ble.w	77ee <_svfprintf_r+0xb2e>
    79d8:	aa23      	add	r2, sp, #140	; 0x8c
    79da:	9909      	ldr	r1, [sp, #36]	; 0x24
    79dc:	980a      	ldr	r0, [sp, #40]	; 0x28
    79de:	f000 fcc7 	bl	8370 <__ssprint_r>
    79e2:	2800      	cmp	r0, #0
    79e4:	f47f aa65 	bne.w	6eb2 <_svfprintf_r+0x1f2>
    79e8:	9c25      	ldr	r4, [sp, #148]	; 0x94
    79ea:	9d24      	ldr	r5, [sp, #144]	; 0x90
    79ec:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    79f0:	e6ff      	b.n	77f2 <_svfprintf_r+0xb32>
    79f2:	9907      	ldr	r1, [sp, #28]
    79f4:	f011 0210 	ands.w	r2, r1, #16
    79f8:	f000 8108 	beq.w	7c0c <_svfprintf_r+0xf4c>
    79fc:	980e      	ldr	r0, [sp, #56]	; 0x38
    79fe:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
    7a02:	f1bb 0f00 	cmp.w	fp, #0
    7a06:	6804      	ldr	r4, [r0, #0]
    7a08:	f100 0704 	add.w	r7, r0, #4
    7a0c:	f04f 0500 	mov.w	r5, #0
    7a10:	db26      	blt.n	7a60 <_svfprintf_r+0xda0>
    7a12:	460a      	mov	r2, r1
    7a14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    7a18:	9207      	str	r2, [sp, #28]
    7a1a:	ea54 0205 	orrs.w	r2, r4, r5
    7a1e:	970e      	str	r7, [sp, #56]	; 0x38
    7a20:	461f      	mov	r7, r3
    7a22:	f47f aaef 	bne.w	7004 <_svfprintf_r+0x344>
    7a26:	e4c8      	b.n	73ba <_svfprintf_r+0x6fa>
    7a28:	9b07      	ldr	r3, [sp, #28]
    7a2a:	06d9      	lsls	r1, r3, #27
    7a2c:	d42a      	bmi.n	7a84 <_svfprintf_r+0xdc4>
    7a2e:	9b07      	ldr	r3, [sp, #28]
    7a30:	065a      	lsls	r2, r3, #25
    7a32:	d527      	bpl.n	7a84 <_svfprintf_r+0xdc4>
    7a34:	990e      	ldr	r1, [sp, #56]	; 0x38
    7a36:	f9b1 4000 	ldrsh.w	r4, [r1]
    7a3a:	3104      	adds	r1, #4
    7a3c:	17e5      	asrs	r5, r4, #31
    7a3e:	4622      	mov	r2, r4
    7a40:	462b      	mov	r3, r5
    7a42:	910e      	str	r1, [sp, #56]	; 0x38
    7a44:	f7ff bacb 	b.w	6fde <_svfprintf_r+0x31e>
    7a48:	990e      	ldr	r1, [sp, #56]	; 0x38
    7a4a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
    7a4e:	f1bb 0f00 	cmp.w	fp, #0
    7a52:	680c      	ldr	r4, [r1, #0]
    7a54:	f101 0704 	add.w	r7, r1, #4
    7a58:	f04f 0500 	mov.w	r5, #0
    7a5c:	f280 8245 	bge.w	7eea <_svfprintf_r+0x122a>
    7a60:	970e      	str	r7, [sp, #56]	; 0x38
    7a62:	461f      	mov	r7, r3
    7a64:	ea54 0305 	orrs.w	r3, r4, r5
    7a68:	f47f aacc 	bne.w	7004 <_svfprintf_r+0x344>
    7a6c:	e4aa      	b.n	73c4 <_svfprintf_r+0x704>
    7a6e:	3301      	adds	r3, #1
    7a70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7a72:	9324      	str	r3, [sp, #144]	; 0x90
    7a74:	442c      	add	r4, r5
    7a76:	2b07      	cmp	r3, #7
    7a78:	9425      	str	r4, [sp, #148]	; 0x94
    7a7a:	e889 0024 	stmia.w	r9, {r2, r5}
    7a7e:	f77f abad 	ble.w	71dc <_svfprintf_r+0x51c>
    7a82:	e6c3      	b.n	780c <_svfprintf_r+0xb4c>
    7a84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    7a86:	6814      	ldr	r4, [r2, #0]
    7a88:	4613      	mov	r3, r2
    7a8a:	3304      	adds	r3, #4
    7a8c:	17e5      	asrs	r5, r4, #31
    7a8e:	4622      	mov	r2, r4
    7a90:	930e      	str	r3, [sp, #56]	; 0x38
    7a92:	2a00      	cmp	r2, #0
    7a94:	462b      	mov	r3, r5
    7a96:	f173 0300 	sbcs.w	r3, r3, #0
    7a9a:	f6bf aaa5 	bge.w	6fe8 <_svfprintf_r+0x328>
    7a9e:	4264      	negs	r4, r4
    7aa0:	f04f 072d 	mov.w	r7, #45	; 0x2d
    7aa4:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
    7aa8:	f1bb 0f00 	cmp.w	fp, #0
    7aac:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
    7ab0:	f6ff aaa8 	blt.w	7004 <_svfprintf_r+0x344>
    7ab4:	9b07      	ldr	r3, [sp, #28]
    7ab6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    7aba:	9307      	str	r3, [sp, #28]
    7abc:	f7ff baa2 	b.w	7004 <_svfprintf_r+0x344>
    7ac0:	aa23      	add	r2, sp, #140	; 0x8c
    7ac2:	9909      	ldr	r1, [sp, #36]	; 0x24
    7ac4:	980a      	ldr	r0, [sp, #40]	; 0x28
    7ac6:	f000 fc53 	bl	8370 <__ssprint_r>
    7aca:	2800      	cmp	r0, #0
    7acc:	f47f a9f1 	bne.w	6eb2 <_svfprintf_r+0x1f2>
    7ad0:	9c25      	ldr	r4, [sp, #148]	; 0x94
    7ad2:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    7ad6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    7ad8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    7ada:	4432      	add	r2, r6
    7adc:	4617      	mov	r7, r2
    7ade:	9a12      	ldr	r2, [sp, #72]	; 0x48
    7ae0:	4293      	cmp	r3, r2
    7ae2:	db47      	blt.n	7b74 <_svfprintf_r+0xeb4>
    7ae4:	9a07      	ldr	r2, [sp, #28]
    7ae6:	07d5      	lsls	r5, r2, #31
    7ae8:	d444      	bmi.n	7b74 <_svfprintf_r+0xeb4>
    7aea:	9912      	ldr	r1, [sp, #72]	; 0x48
    7aec:	440e      	add	r6, r1
    7aee:	1bf5      	subs	r5, r6, r7
    7af0:	1acb      	subs	r3, r1, r3
    7af2:	429d      	cmp	r5, r3
    7af4:	bfa8      	it	ge
    7af6:	461d      	movge	r5, r3
    7af8:	2d00      	cmp	r5, #0
    7afa:	462e      	mov	r6, r5
    7afc:	dd0d      	ble.n	7b1a <_svfprintf_r+0xe5a>
    7afe:	9a24      	ldr	r2, [sp, #144]	; 0x90
    7b00:	f8c9 7000 	str.w	r7, [r9]
    7b04:	3201      	adds	r2, #1
    7b06:	442c      	add	r4, r5
    7b08:	2a07      	cmp	r2, #7
    7b0a:	9425      	str	r4, [sp, #148]	; 0x94
    7b0c:	f8c9 5004 	str.w	r5, [r9, #4]
    7b10:	9224      	str	r2, [sp, #144]	; 0x90
    7b12:	f300 8312 	bgt.w	813a <_svfprintf_r+0x147a>
    7b16:	f109 0908 	add.w	r9, r9, #8
    7b1a:	2e00      	cmp	r6, #0
    7b1c:	bfac      	ite	ge
    7b1e:	1b9d      	subge	r5, r3, r6
    7b20:	461d      	movlt	r5, r3
    7b22:	2d00      	cmp	r5, #0
    7b24:	f77f ab5c 	ble.w	71e0 <_svfprintf_r+0x520>
    7b28:	4a2a      	ldr	r2, [pc, #168]	; (7bd4 <_svfprintf_r+0xf14>)
    7b2a:	9b24      	ldr	r3, [sp, #144]	; 0x90
    7b2c:	920f      	str	r2, [sp, #60]	; 0x3c
    7b2e:	2d10      	cmp	r5, #16
    7b30:	dd9d      	ble.n	7a6e <_svfprintf_r+0xdae>
    7b32:	2610      	movs	r6, #16
    7b34:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    7b36:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    7b3a:	e004      	b.n	7b46 <_svfprintf_r+0xe86>
    7b3c:	f109 0908 	add.w	r9, r9, #8
    7b40:	3d10      	subs	r5, #16
    7b42:	2d10      	cmp	r5, #16
    7b44:	dd93      	ble.n	7a6e <_svfprintf_r+0xdae>
    7b46:	3301      	adds	r3, #1
    7b48:	3410      	adds	r4, #16
    7b4a:	2b07      	cmp	r3, #7
    7b4c:	9425      	str	r4, [sp, #148]	; 0x94
    7b4e:	9324      	str	r3, [sp, #144]	; 0x90
    7b50:	f8c9 a000 	str.w	sl, [r9]
    7b54:	f8c9 6004 	str.w	r6, [r9, #4]
    7b58:	ddf0      	ble.n	7b3c <_svfprintf_r+0xe7c>
    7b5a:	aa23      	add	r2, sp, #140	; 0x8c
    7b5c:	4659      	mov	r1, fp
    7b5e:	4638      	mov	r0, r7
    7b60:	f000 fc06 	bl	8370 <__ssprint_r>
    7b64:	2800      	cmp	r0, #0
    7b66:	f47f a9a4 	bne.w	6eb2 <_svfprintf_r+0x1f2>
    7b6a:	9c25      	ldr	r4, [sp, #148]	; 0x94
    7b6c:	9b24      	ldr	r3, [sp, #144]	; 0x90
    7b6e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    7b72:	e7e5      	b.n	7b40 <_svfprintf_r+0xe80>
    7b74:	9a24      	ldr	r2, [sp, #144]	; 0x90
    7b76:	9816      	ldr	r0, [sp, #88]	; 0x58
    7b78:	9917      	ldr	r1, [sp, #92]	; 0x5c
    7b7a:	f8c9 1000 	str.w	r1, [r9]
    7b7e:	3201      	adds	r2, #1
    7b80:	4404      	add	r4, r0
    7b82:	2a07      	cmp	r2, #7
    7b84:	9425      	str	r4, [sp, #148]	; 0x94
    7b86:	f8c9 0004 	str.w	r0, [r9, #4]
    7b8a:	9224      	str	r2, [sp, #144]	; 0x90
    7b8c:	f300 82a5 	bgt.w	80da <_svfprintf_r+0x141a>
    7b90:	f109 0908 	add.w	r9, r9, #8
    7b94:	e7a9      	b.n	7aea <_svfprintf_r+0xe2a>
    7b96:	9b07      	ldr	r3, [sp, #28]
    7b98:	07d8      	lsls	r0, r3, #31
    7b9a:	f53f adf4 	bmi.w	7786 <_svfprintf_r+0xac6>
    7b9e:	3501      	adds	r5, #1
    7ba0:	3401      	adds	r4, #1
    7ba2:	2301      	movs	r3, #1
    7ba4:	2d07      	cmp	r5, #7
    7ba6:	9425      	str	r4, [sp, #148]	; 0x94
    7ba8:	9524      	str	r5, [sp, #144]	; 0x90
    7baa:	f8c9 6000 	str.w	r6, [r9]
    7bae:	f8c9 3004 	str.w	r3, [r9, #4]
    7bb2:	f77f ae1c 	ble.w	77ee <_svfprintf_r+0xb2e>
    7bb6:	e70f      	b.n	79d8 <_svfprintf_r+0xd18>
    7bb8:	aa23      	add	r2, sp, #140	; 0x8c
    7bba:	9909      	ldr	r1, [sp, #36]	; 0x24
    7bbc:	980a      	ldr	r0, [sp, #40]	; 0x28
    7bbe:	f000 fbd7 	bl	8370 <__ssprint_r>
    7bc2:	2800      	cmp	r0, #0
    7bc4:	f47f a975 	bne.w	6eb2 <_svfprintf_r+0x1f2>
    7bc8:	9c25      	ldr	r4, [sp, #148]	; 0x94
    7bca:	9d24      	ldr	r5, [sp, #144]	; 0x90
    7bcc:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    7bd0:	e5e7      	b.n	77a2 <_svfprintf_r+0xae2>
    7bd2:	bf00      	nop
    7bd4:	00008f7c 	.word	0x00008f7c
    7bd8:	aa23      	add	r2, sp, #140	; 0x8c
    7bda:	9909      	ldr	r1, [sp, #36]	; 0x24
    7bdc:	980a      	ldr	r0, [sp, #40]	; 0x28
    7bde:	f000 fbc7 	bl	8370 <__ssprint_r>
    7be2:	2800      	cmp	r0, #0
    7be4:	f47f a965 	bne.w	6eb2 <_svfprintf_r+0x1f2>
    7be8:	9c25      	ldr	r4, [sp, #148]	; 0x94
    7bea:	9d24      	ldr	r5, [sp, #144]	; 0x90
    7bec:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    7bf0:	e5e6      	b.n	77c0 <_svfprintf_r+0xb00>
    7bf2:	aa23      	add	r2, sp, #140	; 0x8c
    7bf4:	9909      	ldr	r1, [sp, #36]	; 0x24
    7bf6:	980a      	ldr	r0, [sp, #40]	; 0x28
    7bf8:	f000 fbba 	bl	8370 <__ssprint_r>
    7bfc:	2800      	cmp	r0, #0
    7bfe:	f47f a958 	bne.w	6eb2 <_svfprintf_r+0x1f2>
    7c02:	9c25      	ldr	r4, [sp, #148]	; 0x94
    7c04:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    7c08:	f7ff ba98 	b.w	713c <_svfprintf_r+0x47c>
    7c0c:	9907      	ldr	r1, [sp, #28]
    7c0e:	f011 0340 	ands.w	r3, r1, #64	; 0x40
    7c12:	f43f af19 	beq.w	7a48 <_svfprintf_r+0xd88>
    7c16:	980e      	ldr	r0, [sp, #56]	; 0x38
    7c18:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
    7c1c:	4603      	mov	r3, r0
    7c1e:	f1bb 0f00 	cmp.w	fp, #0
    7c22:	f103 0304 	add.w	r3, r3, #4
    7c26:	8804      	ldrh	r4, [r0, #0]
    7c28:	f04f 0500 	mov.w	r5, #0
    7c2c:	f2c0 81b9 	blt.w	7fa2 <_svfprintf_r+0x12e2>
    7c30:	f021 0180 	bic.w	r1, r1, #128	; 0x80
    7c34:	9107      	str	r1, [sp, #28]
    7c36:	ea54 0105 	orrs.w	r1, r4, r5
    7c3a:	930e      	str	r3, [sp, #56]	; 0x38
    7c3c:	4617      	mov	r7, r2
    7c3e:	f47f a9e1 	bne.w	7004 <_svfprintf_r+0x344>
    7c42:	f7ff bbba 	b.w	73ba <_svfprintf_r+0x6fa>
    7c46:	9c14      	ldr	r4, [sp, #80]	; 0x50
    7c48:	4622      	mov	r2, r4
    7c4a:	4620      	mov	r0, r4
    7c4c:	9c15      	ldr	r4, [sp, #84]	; 0x54
    7c4e:	4623      	mov	r3, r4
    7c50:	4621      	mov	r1, r4
    7c52:	f7fc fc3b 	bl	44cc <__aeabi_dcmpun>
    7c56:	2800      	cmp	r0, #0
    7c58:	f040 8315 	bne.w	8286 <_svfprintf_r+0x15c6>
    7c5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7c5e:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
    7c62:	f023 0320 	bic.w	r3, r3, #32
    7c66:	930d      	str	r3, [sp, #52]	; 0x34
    7c68:	f000 8276 	beq.w	8158 <_svfprintf_r+0x1498>
    7c6c:	2b47      	cmp	r3, #71	; 0x47
    7c6e:	f000 8192 	beq.w	7f96 <_svfprintf_r+0x12d6>
    7c72:	9b07      	ldr	r3, [sp, #28]
    7c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    7c78:	9310      	str	r3, [sp, #64]	; 0x40
    7c7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    7c7c:	1e1f      	subs	r7, r3, #0
    7c7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    7c80:	9308      	str	r3, [sp, #32]
    7c82:	bfbb      	ittet	lt
    7c84:	463b      	movlt	r3, r7
    7c86:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
    7c8a:	2300      	movge	r3, #0
    7c8c:	232d      	movlt	r3, #45	; 0x2d
    7c8e:	930f      	str	r3, [sp, #60]	; 0x3c
    7c90:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7c92:	2b66      	cmp	r3, #102	; 0x66
    7c94:	f000 8263 	beq.w	815e <_svfprintf_r+0x149e>
    7c98:	2b46      	cmp	r3, #70	; 0x46
    7c9a:	f000 815e 	beq.w	7f5a <_svfprintf_r+0x129a>
    7c9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7ca0:	9a08      	ldr	r2, [sp, #32]
    7ca2:	2b45      	cmp	r3, #69	; 0x45
    7ca4:	a821      	add	r0, sp, #132	; 0x84
    7ca6:	a91e      	add	r1, sp, #120	; 0x78
    7ca8:	bf0c      	ite	eq
    7caa:	f10b 0501 	addeq.w	r5, fp, #1
    7cae:	465d      	movne	r5, fp
    7cb0:	9004      	str	r0, [sp, #16]
    7cb2:	9103      	str	r1, [sp, #12]
    7cb4:	a81d      	add	r0, sp, #116	; 0x74
    7cb6:	2102      	movs	r1, #2
    7cb8:	463b      	mov	r3, r7
    7cba:	9002      	str	r0, [sp, #8]
    7cbc:	9501      	str	r5, [sp, #4]
    7cbe:	9100      	str	r1, [sp, #0]
    7cc0:	980a      	ldr	r0, [sp, #40]	; 0x28
    7cc2:	f7fe f8d1 	bl	5e68 <_dtoa_r>
    7cc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7cc8:	2b67      	cmp	r3, #103	; 0x67
    7cca:	4606      	mov	r6, r0
    7ccc:	f040 827d 	bne.w	81ca <_svfprintf_r+0x150a>
    7cd0:	9b07      	ldr	r3, [sp, #28]
    7cd2:	07da      	lsls	r2, r3, #31
    7cd4:	f140 82bf 	bpl.w	8256 <_svfprintf_r+0x1596>
    7cd8:	1974      	adds	r4, r6, r5
    7cda:	9808      	ldr	r0, [sp, #32]
    7cdc:	4639      	mov	r1, r7
    7cde:	2200      	movs	r2, #0
    7ce0:	2300      	movs	r3, #0
    7ce2:	f7fc fbc1 	bl	4468 <__aeabi_dcmpeq>
    7ce6:	2800      	cmp	r0, #0
    7ce8:	f040 81a4 	bne.w	8034 <_svfprintf_r+0x1374>
    7cec:	9b21      	ldr	r3, [sp, #132]	; 0x84
    7cee:	429c      	cmp	r4, r3
    7cf0:	d906      	bls.n	7d00 <_svfprintf_r+0x1040>
    7cf2:	2130      	movs	r1, #48	; 0x30
    7cf4:	1c5a      	adds	r2, r3, #1
    7cf6:	9221      	str	r2, [sp, #132]	; 0x84
    7cf8:	7019      	strb	r1, [r3, #0]
    7cfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
    7cfc:	429c      	cmp	r4, r3
    7cfe:	d8f9      	bhi.n	7cf4 <_svfprintf_r+0x1034>
    7d00:	1b9b      	subs	r3, r3, r6
    7d02:	9312      	str	r3, [sp, #72]	; 0x48
    7d04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7d06:	2b47      	cmp	r3, #71	; 0x47
    7d08:	f000 8181 	beq.w	800e <_svfprintf_r+0x134e>
    7d0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7d0e:	2b65      	cmp	r3, #101	; 0x65
    7d10:	f340 826a 	ble.w	81e8 <_svfprintf_r+0x1528>
    7d14:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7d16:	2b66      	cmp	r3, #102	; 0x66
    7d18:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    7d1a:	9313      	str	r3, [sp, #76]	; 0x4c
    7d1c:	f000 8247 	beq.w	81ae <_svfprintf_r+0x14ee>
    7d20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    7d22:	9912      	ldr	r1, [sp, #72]	; 0x48
    7d24:	428a      	cmp	r2, r1
    7d26:	f2c0 8236 	blt.w	8196 <_svfprintf_r+0x14d6>
    7d2a:	9b07      	ldr	r3, [sp, #28]
    7d2c:	07d9      	lsls	r1, r3, #31
    7d2e:	f100 8289 	bmi.w	8244 <_svfprintf_r+0x1584>
    7d32:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    7d36:	920d      	str	r2, [sp, #52]	; 0x34
    7d38:	2267      	movs	r2, #103	; 0x67
    7d3a:	9211      	str	r2, [sp, #68]	; 0x44
    7d3c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7d3e:	2a00      	cmp	r2, #0
    7d40:	f040 815b 	bne.w	7ffa <_svfprintf_r+0x133a>
    7d44:	9308      	str	r3, [sp, #32]
    7d46:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7d48:	9307      	str	r3, [sp, #28]
    7d4a:	4693      	mov	fp, r2
    7d4c:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
    7d50:	f7ff b97c 	b.w	704c <_svfprintf_r+0x38c>
    7d54:	9b07      	ldr	r3, [sp, #28]
    7d56:	06df      	lsls	r7, r3, #27
    7d58:	d40b      	bmi.n	7d72 <_svfprintf_r+0x10b2>
    7d5a:	9b07      	ldr	r3, [sp, #28]
    7d5c:	065e      	lsls	r6, r3, #25
    7d5e:	d508      	bpl.n	7d72 <_svfprintf_r+0x10b2>
    7d60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    7d62:	6813      	ldr	r3, [r2, #0]
    7d64:	3204      	adds	r2, #4
    7d66:	920e      	str	r2, [sp, #56]	; 0x38
    7d68:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
    7d6c:	801a      	strh	r2, [r3, #0]
    7d6e:	f7fe bfcd 	b.w	6d0c <_svfprintf_r+0x4c>
    7d72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    7d74:	6813      	ldr	r3, [r2, #0]
    7d76:	3204      	adds	r2, #4
    7d78:	920e      	str	r2, [sp, #56]	; 0x38
    7d7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    7d7c:	601a      	str	r2, [r3, #0]
    7d7e:	f7fe bfc5 	b.w	6d0c <_svfprintf_r+0x4c>
    7d82:	9b07      	ldr	r3, [sp, #28]
    7d84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    7d86:	f013 0f40 	tst.w	r3, #64	; 0x40
    7d8a:	4613      	mov	r3, r2
    7d8c:	f000 810e 	beq.w	7fac <_svfprintf_r+0x12ec>
    7d90:	3304      	adds	r3, #4
    7d92:	8814      	ldrh	r4, [r2, #0]
    7d94:	930e      	str	r3, [sp, #56]	; 0x38
    7d96:	2500      	movs	r5, #0
    7d98:	f7ff bb2c 	b.w	73f4 <_svfprintf_r+0x734>
    7d9c:	9907      	ldr	r1, [sp, #28]
    7d9e:	f011 0340 	ands.w	r3, r1, #64	; 0x40
    7da2:	d017      	beq.n	7dd4 <_svfprintf_r+0x1114>
    7da4:	980e      	ldr	r0, [sp, #56]	; 0x38
    7da6:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
    7daa:	4603      	mov	r3, r0
    7dac:	f1bb 0f00 	cmp.w	fp, #0
    7db0:	f103 0304 	add.w	r3, r3, #4
    7db4:	8804      	ldrh	r4, [r0, #0]
    7db6:	f04f 0500 	mov.w	r5, #0
    7dba:	f2c0 80f5 	blt.w	7fa8 <_svfprintf_r+0x12e8>
    7dbe:	f021 0180 	bic.w	r1, r1, #128	; 0x80
    7dc2:	9107      	str	r1, [sp, #28]
    7dc4:	ea54 0105 	orrs.w	r1, r4, r5
    7dc8:	930e      	str	r3, [sp, #56]	; 0x38
    7dca:	f43f ac13 	beq.w	75f4 <_svfprintf_r+0x934>
    7dce:	4617      	mov	r7, r2
    7dd0:	f7ff b89b 	b.w	6f0a <_svfprintf_r+0x24a>
    7dd4:	990e      	ldr	r1, [sp, #56]	; 0x38
    7dd6:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
    7dda:	f1bb 0f00 	cmp.w	fp, #0
    7dde:	680c      	ldr	r4, [r1, #0]
    7de0:	f101 0704 	add.w	r7, r1, #4
    7de4:	f04f 0500 	mov.w	r5, #0
    7de8:	f280 8081 	bge.w	7eee <_svfprintf_r+0x122e>
    7dec:	970e      	str	r7, [sp, #56]	; 0x38
    7dee:	2700      	movs	r7, #0
    7df0:	f7ff b88b 	b.w	6f0a <_svfprintf_r+0x24a>
    7df4:	4614      	mov	r4, r2
    7df6:	3301      	adds	r3, #1
    7df8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    7dfa:	9324      	str	r3, [sp, #144]	; 0x90
    7dfc:	442c      	add	r4, r5
    7dfe:	2b07      	cmp	r3, #7
    7e00:	9425      	str	r4, [sp, #148]	; 0x94
    7e02:	e889 0024 	stmia.w	r9, {r2, r5}
    7e06:	f73f ae5b 	bgt.w	7ac0 <_svfprintf_r+0xe00>
    7e0a:	f109 0908 	add.w	r9, r9, #8
    7e0e:	e662      	b.n	7ad6 <_svfprintf_r+0xe16>
    7e10:	2700      	movs	r7, #0
    7e12:	45bb      	cmp	fp, r7
    7e14:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
    7e18:	f6ff abfe 	blt.w	7618 <_svfprintf_r+0x958>
    7e1c:	9b07      	ldr	r3, [sp, #28]
    7e1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    7e22:	9307      	str	r3, [sp, #28]
    7e24:	f7ff bbc6 	b.w	75b4 <_svfprintf_r+0x8f4>
    7e28:	aa23      	add	r2, sp, #140	; 0x8c
    7e2a:	9909      	ldr	r1, [sp, #36]	; 0x24
    7e2c:	980a      	ldr	r0, [sp, #40]	; 0x28
    7e2e:	f000 fa9f 	bl	8370 <__ssprint_r>
    7e32:	2800      	cmp	r0, #0
    7e34:	f47f a83d 	bne.w	6eb2 <_svfprintf_r+0x1f2>
    7e38:	9c25      	ldr	r4, [sp, #148]	; 0x94
    7e3a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    7e3e:	e40d      	b.n	765c <_svfprintf_r+0x99c>
    7e40:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    7e42:	f7ff bbe2 	b.w	760a <_svfprintf_r+0x94a>
    7e46:	9b24      	ldr	r3, [sp, #144]	; 0x90
    7e48:	4ab1      	ldr	r2, [pc, #708]	; (8110 <_svfprintf_r+0x1450>)
    7e4a:	f8c9 2000 	str.w	r2, [r9]
    7e4e:	3301      	adds	r3, #1
    7e50:	3401      	adds	r4, #1
    7e52:	2201      	movs	r2, #1
    7e54:	2b07      	cmp	r3, #7
    7e56:	9425      	str	r4, [sp, #148]	; 0x94
    7e58:	9324      	str	r3, [sp, #144]	; 0x90
    7e5a:	f8c9 2004 	str.w	r2, [r9, #4]
    7e5e:	dc6f      	bgt.n	7f40 <_svfprintf_r+0x1280>
    7e60:	f109 0908 	add.w	r9, r9, #8
    7e64:	b92d      	cbnz	r5, 7e72 <_svfprintf_r+0x11b2>
    7e66:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7e68:	b91b      	cbnz	r3, 7e72 <_svfprintf_r+0x11b2>
    7e6a:	9b07      	ldr	r3, [sp, #28]
    7e6c:	07df      	lsls	r7, r3, #31
    7e6e:	f57f a9b7 	bpl.w	71e0 <_svfprintf_r+0x520>
    7e72:	9b24      	ldr	r3, [sp, #144]	; 0x90
    7e74:	9916      	ldr	r1, [sp, #88]	; 0x58
    7e76:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    7e78:	f8c9 2000 	str.w	r2, [r9]
    7e7c:	3301      	adds	r3, #1
    7e7e:	440c      	add	r4, r1
    7e80:	2b07      	cmp	r3, #7
    7e82:	9425      	str	r4, [sp, #148]	; 0x94
    7e84:	f8c9 1004 	str.w	r1, [r9, #4]
    7e88:	9324      	str	r3, [sp, #144]	; 0x90
    7e8a:	f300 81c9 	bgt.w	8220 <_svfprintf_r+0x1560>
    7e8e:	f109 0908 	add.w	r9, r9, #8
    7e92:	426d      	negs	r5, r5
    7e94:	2d00      	cmp	r5, #0
    7e96:	f340 80a3 	ble.w	7fe0 <_svfprintf_r+0x1320>
    7e9a:	4a9e      	ldr	r2, [pc, #632]	; (8114 <_svfprintf_r+0x1454>)
    7e9c:	920f      	str	r2, [sp, #60]	; 0x3c
    7e9e:	2d10      	cmp	r5, #16
    7ea0:	f340 8129 	ble.w	80f6 <_svfprintf_r+0x1436>
    7ea4:	4622      	mov	r2, r4
    7ea6:	2710      	movs	r7, #16
    7ea8:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    7eac:	9c09      	ldr	r4, [sp, #36]	; 0x24
    7eae:	e005      	b.n	7ebc <_svfprintf_r+0x11fc>
    7eb0:	f109 0908 	add.w	r9, r9, #8
    7eb4:	3d10      	subs	r5, #16
    7eb6:	2d10      	cmp	r5, #16
    7eb8:	f340 811c 	ble.w	80f4 <_svfprintf_r+0x1434>
    7ebc:	3301      	adds	r3, #1
    7ebe:	3210      	adds	r2, #16
    7ec0:	2b07      	cmp	r3, #7
    7ec2:	9225      	str	r2, [sp, #148]	; 0x94
    7ec4:	9324      	str	r3, [sp, #144]	; 0x90
    7ec6:	f8c9 a000 	str.w	sl, [r9]
    7eca:	f8c9 7004 	str.w	r7, [r9, #4]
    7ece:	ddef      	ble.n	7eb0 <_svfprintf_r+0x11f0>
    7ed0:	aa23      	add	r2, sp, #140	; 0x8c
    7ed2:	4621      	mov	r1, r4
    7ed4:	4658      	mov	r0, fp
    7ed6:	f000 fa4b 	bl	8370 <__ssprint_r>
    7eda:	2800      	cmp	r0, #0
    7edc:	f47e afe9 	bne.w	6eb2 <_svfprintf_r+0x1f2>
    7ee0:	9a25      	ldr	r2, [sp, #148]	; 0x94
    7ee2:	9b24      	ldr	r3, [sp, #144]	; 0x90
    7ee4:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    7ee8:	e7e4      	b.n	7eb4 <_svfprintf_r+0x11f4>
    7eea:	9a07      	ldr	r2, [sp, #28]
    7eec:	e592      	b.n	7a14 <_svfprintf_r+0xd54>
    7eee:	9a07      	ldr	r2, [sp, #28]
    7ef0:	f7ff ba35 	b.w	735e <_svfprintf_r+0x69e>
    7ef4:	9b07      	ldr	r3, [sp, #28]
    7ef6:	f043 0320 	orr.w	r3, r3, #32
    7efa:	9307      	str	r3, [sp, #28]
    7efc:	f108 0801 	add.w	r8, r8, #1
    7f00:	f898 3000 	ldrb.w	r3, [r8]
    7f04:	f7fe bf35 	b.w	6d72 <_svfprintf_r+0xb2>
    7f08:	aa23      	add	r2, sp, #140	; 0x8c
    7f0a:	9909      	ldr	r1, [sp, #36]	; 0x24
    7f0c:	980a      	ldr	r0, [sp, #40]	; 0x28
    7f0e:	f000 fa2f 	bl	8370 <__ssprint_r>
    7f12:	2800      	cmp	r0, #0
    7f14:	f47e afcd 	bne.w	6eb2 <_svfprintf_r+0x1f2>
    7f18:	9c25      	ldr	r4, [sp, #148]	; 0x94
    7f1a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    7f1e:	f7ff bbb5 	b.w	768c <_svfprintf_r+0x9cc>
    7f22:	2140      	movs	r1, #64	; 0x40
    7f24:	980a      	ldr	r0, [sp, #40]	; 0x28
    7f26:	f7fc fb31 	bl	458c <_malloc_r>
    7f2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7f2c:	6010      	str	r0, [r2, #0]
    7f2e:	6110      	str	r0, [r2, #16]
    7f30:	2800      	cmp	r0, #0
    7f32:	f000 81f3 	beq.w	831c <_svfprintf_r+0x165c>
    7f36:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7f38:	2340      	movs	r3, #64	; 0x40
    7f3a:	6153      	str	r3, [r2, #20]
    7f3c:	f7fe bed7 	b.w	6cee <_svfprintf_r+0x2e>
    7f40:	aa23      	add	r2, sp, #140	; 0x8c
    7f42:	9909      	ldr	r1, [sp, #36]	; 0x24
    7f44:	980a      	ldr	r0, [sp, #40]	; 0x28
    7f46:	f000 fa13 	bl	8370 <__ssprint_r>
    7f4a:	2800      	cmp	r0, #0
    7f4c:	f47e afb1 	bne.w	6eb2 <_svfprintf_r+0x1f2>
    7f50:	9d1d      	ldr	r5, [sp, #116]	; 0x74
    7f52:	9c25      	ldr	r4, [sp, #148]	; 0x94
    7f54:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    7f58:	e784      	b.n	7e64 <_svfprintf_r+0x11a4>
    7f5a:	a821      	add	r0, sp, #132	; 0x84
    7f5c:	a91e      	add	r1, sp, #120	; 0x78
    7f5e:	9004      	str	r0, [sp, #16]
    7f60:	9103      	str	r1, [sp, #12]
    7f62:	a81d      	add	r0, sp, #116	; 0x74
    7f64:	2103      	movs	r1, #3
    7f66:	9002      	str	r0, [sp, #8]
    7f68:	9a08      	ldr	r2, [sp, #32]
    7f6a:	f8cd b004 	str.w	fp, [sp, #4]
    7f6e:	463b      	mov	r3, r7
    7f70:	9100      	str	r1, [sp, #0]
    7f72:	980a      	ldr	r0, [sp, #40]	; 0x28
    7f74:	f7fd ff78 	bl	5e68 <_dtoa_r>
    7f78:	465d      	mov	r5, fp
    7f7a:	4606      	mov	r6, r0
    7f7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7f7e:	2b46      	cmp	r3, #70	; 0x46
    7f80:	eb06 0405 	add.w	r4, r6, r5
    7f84:	f47f aea9 	bne.w	7cda <_svfprintf_r+0x101a>
    7f88:	7833      	ldrb	r3, [r6, #0]
    7f8a:	2b30      	cmp	r3, #48	; 0x30
    7f8c:	f000 816d 	beq.w	826a <_svfprintf_r+0x15aa>
    7f90:	9d1d      	ldr	r5, [sp, #116]	; 0x74
    7f92:	442c      	add	r4, r5
    7f94:	e6a1      	b.n	7cda <_svfprintf_r+0x101a>
    7f96:	f1bb 0f00 	cmp.w	fp, #0
    7f9a:	bf08      	it	eq
    7f9c:	f04f 0b01 	moveq.w	fp, #1
    7fa0:	e667      	b.n	7c72 <_svfprintf_r+0xfb2>
    7fa2:	930e      	str	r3, [sp, #56]	; 0x38
    7fa4:	4617      	mov	r7, r2
    7fa6:	e55d      	b.n	7a64 <_svfprintf_r+0xda4>
    7fa8:	930e      	str	r3, [sp, #56]	; 0x38
    7faa:	e720      	b.n	7dee <_svfprintf_r+0x112e>
    7fac:	3304      	adds	r3, #4
    7fae:	6814      	ldr	r4, [r2, #0]
    7fb0:	930e      	str	r3, [sp, #56]	; 0x38
    7fb2:	2500      	movs	r5, #0
    7fb4:	f7ff ba1e 	b.w	73f4 <_svfprintf_r+0x734>
    7fb8:	4630      	mov	r0, r6
    7fba:	f7fd f881 	bl	50c0 <strlen>
    7fbe:	46a3      	mov	fp, r4
    7fc0:	4603      	mov	r3, r0
    7fc2:	900d      	str	r0, [sp, #52]	; 0x34
    7fc4:	f7ff baeb 	b.w	759e <_svfprintf_r+0x8de>
    7fc8:	aa23      	add	r2, sp, #140	; 0x8c
    7fca:	9909      	ldr	r1, [sp, #36]	; 0x24
    7fcc:	980a      	ldr	r0, [sp, #40]	; 0x28
    7fce:	f000 f9cf 	bl	8370 <__ssprint_r>
    7fd2:	2800      	cmp	r0, #0
    7fd4:	f47e af6d 	bne.w	6eb2 <_svfprintf_r+0x1f2>
    7fd8:	9c25      	ldr	r4, [sp, #148]	; 0x94
    7fda:	9b24      	ldr	r3, [sp, #144]	; 0x90
    7fdc:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    7fe0:	9912      	ldr	r1, [sp, #72]	; 0x48
    7fe2:	f8c9 6000 	str.w	r6, [r9]
    7fe6:	3301      	adds	r3, #1
    7fe8:	440c      	add	r4, r1
    7fea:	2b07      	cmp	r3, #7
    7fec:	9425      	str	r4, [sp, #148]	; 0x94
    7fee:	9324      	str	r3, [sp, #144]	; 0x90
    7ff0:	f8c9 1004 	str.w	r1, [r9, #4]
    7ff4:	f77f a8f2 	ble.w	71dc <_svfprintf_r+0x51c>
    7ff8:	e408      	b.n	780c <_svfprintf_r+0xb4c>
    7ffa:	272d      	movs	r7, #45	; 0x2d
    7ffc:	9308      	str	r3, [sp, #32]
    7ffe:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8000:	9307      	str	r3, [sp, #28]
    8002:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
    8006:	f04f 0b00 	mov.w	fp, #0
    800a:	f7ff b820 	b.w	704e <_svfprintf_r+0x38e>
    800e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    8010:	1cdd      	adds	r5, r3, #3
    8012:	db11      	blt.n	8038 <_svfprintf_r+0x1378>
    8014:	459b      	cmp	fp, r3
    8016:	db0f      	blt.n	8038 <_svfprintf_r+0x1378>
    8018:	9313      	str	r3, [sp, #76]	; 0x4c
    801a:	e681      	b.n	7d20 <_svfprintf_r+0x1060>
    801c:	aa23      	add	r2, sp, #140	; 0x8c
    801e:	9909      	ldr	r1, [sp, #36]	; 0x24
    8020:	980a      	ldr	r0, [sp, #40]	; 0x28
    8022:	f000 f9a5 	bl	8370 <__ssprint_r>
    8026:	2800      	cmp	r0, #0
    8028:	f47e af43 	bne.w	6eb2 <_svfprintf_r+0x1f2>
    802c:	9c25      	ldr	r4, [sp, #148]	; 0x94
    802e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    8032:	e452      	b.n	78da <_svfprintf_r+0xc1a>
    8034:	4623      	mov	r3, r4
    8036:	e663      	b.n	7d00 <_svfprintf_r+0x1040>
    8038:	9a11      	ldr	r2, [sp, #68]	; 0x44
    803a:	3a02      	subs	r2, #2
    803c:	9211      	str	r2, [sp, #68]	; 0x44
    803e:	3b01      	subs	r3, #1
    8040:	2b00      	cmp	r3, #0
    8042:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
    8046:	931d      	str	r3, [sp, #116]	; 0x74
    8048:	bfb8      	it	lt
    804a:	425b      	neglt	r3, r3
    804c:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
    8050:	bfb4      	ite	lt
    8052:	222d      	movlt	r2, #45	; 0x2d
    8054:	222b      	movge	r2, #43	; 0x2b
    8056:	2b09      	cmp	r3, #9
    8058:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
    805c:	f340 80fd 	ble.w	825a <_svfprintf_r+0x159a>
    8060:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
    8064:	4604      	mov	r4, r0
    8066:	4a2c      	ldr	r2, [pc, #176]	; (8118 <_svfprintf_r+0x1458>)
    8068:	fb82 2103 	smull	r2, r1, r2, r3
    806c:	17da      	asrs	r2, r3, #31
    806e:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    8072:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    8076:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
    807a:	f103 0130 	add.w	r1, r3, #48	; 0x30
    807e:	2a09      	cmp	r2, #9
    8080:	4613      	mov	r3, r2
    8082:	f804 1d01 	strb.w	r1, [r4, #-1]!
    8086:	dcee      	bgt.n	8066 <_svfprintf_r+0x13a6>
    8088:	4621      	mov	r1, r4
    808a:	3330      	adds	r3, #48	; 0x30
    808c:	b2da      	uxtb	r2, r3
    808e:	f801 2d01 	strb.w	r2, [r1, #-1]!
    8092:	4288      	cmp	r0, r1
    8094:	f240 813f 	bls.w	8316 <_svfprintf_r+0x1656>
    8098:	f10d 017e 	add.w	r1, sp, #126	; 0x7e
    809c:	4623      	mov	r3, r4
    809e:	e001      	b.n	80a4 <_svfprintf_r+0x13e4>
    80a0:	f813 2b01 	ldrb.w	r2, [r3], #1
    80a4:	f801 2b01 	strb.w	r2, [r1], #1
    80a8:	4298      	cmp	r0, r3
    80aa:	d1f9      	bne.n	80a0 <_svfprintf_r+0x13e0>
    80ac:	1c43      	adds	r3, r0, #1
    80ae:	1b1b      	subs	r3, r3, r4
    80b0:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
    80b4:	4413      	add	r3, r2
    80b6:	aa1f      	add	r2, sp, #124	; 0x7c
    80b8:	1a9b      	subs	r3, r3, r2
    80ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
    80bc:	9319      	str	r3, [sp, #100]	; 0x64
    80be:	2a01      	cmp	r2, #1
    80c0:	4413      	add	r3, r2
    80c2:	930d      	str	r3, [sp, #52]	; 0x34
    80c4:	f340 80f6 	ble.w	82b4 <_svfprintf_r+0x15f4>
    80c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    80ca:	9a16      	ldr	r2, [sp, #88]	; 0x58
    80cc:	4413      	add	r3, r2
    80ce:	2200      	movs	r2, #0
    80d0:	930d      	str	r3, [sp, #52]	; 0x34
    80d2:	9213      	str	r2, [sp, #76]	; 0x4c
    80d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    80d8:	e630      	b.n	7d3c <_svfprintf_r+0x107c>
    80da:	aa23      	add	r2, sp, #140	; 0x8c
    80dc:	9909      	ldr	r1, [sp, #36]	; 0x24
    80de:	980a      	ldr	r0, [sp, #40]	; 0x28
    80e0:	f000 f946 	bl	8370 <__ssprint_r>
    80e4:	2800      	cmp	r0, #0
    80e6:	f47e aee4 	bne.w	6eb2 <_svfprintf_r+0x1f2>
    80ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    80ec:	9c25      	ldr	r4, [sp, #148]	; 0x94
    80ee:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    80f2:	e4fa      	b.n	7aea <_svfprintf_r+0xe2a>
    80f4:	4614      	mov	r4, r2
    80f6:	3301      	adds	r3, #1
    80f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    80fa:	9324      	str	r3, [sp, #144]	; 0x90
    80fc:	442c      	add	r4, r5
    80fe:	2b07      	cmp	r3, #7
    8100:	9425      	str	r4, [sp, #148]	; 0x94
    8102:	e889 0024 	stmia.w	r9, {r2, r5}
    8106:	f73f af5f 	bgt.w	7fc8 <_svfprintf_r+0x1308>
    810a:	f109 0908 	add.w	r9, r9, #8
    810e:	e767      	b.n	7fe0 <_svfprintf_r+0x1320>
    8110:	00008f78 	.word	0x00008f78
    8114:	00008f7c 	.word	0x00008f7c
    8118:	66666667 	.word	0x66666667
    811c:	2d06      	cmp	r5, #6
    811e:	462b      	mov	r3, r5
    8120:	bf28      	it	cs
    8122:	2306      	movcs	r3, #6
    8124:	930d      	str	r3, [sp, #52]	; 0x34
    8126:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    812a:	46b3      	mov	fp, r6
    812c:	970e      	str	r7, [sp, #56]	; 0x38
    812e:	9613      	str	r6, [sp, #76]	; 0x4c
    8130:	4637      	mov	r7, r6
    8132:	9308      	str	r3, [sp, #32]
    8134:	4e8b      	ldr	r6, [pc, #556]	; (8364 <_svfprintf_r+0x16a4>)
    8136:	f7fe bf89 	b.w	704c <_svfprintf_r+0x38c>
    813a:	aa23      	add	r2, sp, #140	; 0x8c
    813c:	9909      	ldr	r1, [sp, #36]	; 0x24
    813e:	980a      	ldr	r0, [sp, #40]	; 0x28
    8140:	f000 f916 	bl	8370 <__ssprint_r>
    8144:	2800      	cmp	r0, #0
    8146:	f47e aeb4 	bne.w	6eb2 <_svfprintf_r+0x1f2>
    814a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    814c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    814e:	9c25      	ldr	r4, [sp, #148]	; 0x94
    8150:	1ad3      	subs	r3, r2, r3
    8152:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    8156:	e4e0      	b.n	7b1a <_svfprintf_r+0xe5a>
    8158:	f04f 0b06 	mov.w	fp, #6
    815c:	e589      	b.n	7c72 <_svfprintf_r+0xfb2>
    815e:	a821      	add	r0, sp, #132	; 0x84
    8160:	a91e      	add	r1, sp, #120	; 0x78
    8162:	9004      	str	r0, [sp, #16]
    8164:	9103      	str	r1, [sp, #12]
    8166:	a81d      	add	r0, sp, #116	; 0x74
    8168:	2103      	movs	r1, #3
    816a:	9002      	str	r0, [sp, #8]
    816c:	9a08      	ldr	r2, [sp, #32]
    816e:	f8cd b004 	str.w	fp, [sp, #4]
    8172:	463b      	mov	r3, r7
    8174:	9100      	str	r1, [sp, #0]
    8176:	980a      	ldr	r0, [sp, #40]	; 0x28
    8178:	f7fd fe76 	bl	5e68 <_dtoa_r>
    817c:	465d      	mov	r5, fp
    817e:	4606      	mov	r6, r0
    8180:	eb00 040b 	add.w	r4, r0, fp
    8184:	e700      	b.n	7f88 <_svfprintf_r+0x12c8>
    8186:	272d      	movs	r7, #45	; 0x2d
    8188:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
    818c:	f7ff b8ae 	b.w	72ec <_svfprintf_r+0x62c>
    8190:	9307      	str	r3, [sp, #28]
    8192:	f7ff b94d 	b.w	7430 <_svfprintf_r+0x770>
    8196:	9a16      	ldr	r2, [sp, #88]	; 0x58
    8198:	9b12      	ldr	r3, [sp, #72]	; 0x48
    819a:	4413      	add	r3, r2
    819c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    819e:	930d      	str	r3, [sp, #52]	; 0x34
    81a0:	2a00      	cmp	r2, #0
    81a2:	dd7f      	ble.n	82a4 <_svfprintf_r+0x15e4>
    81a4:	2267      	movs	r2, #103	; 0x67
    81a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    81aa:	9211      	str	r2, [sp, #68]	; 0x44
    81ac:	e5c6      	b.n	7d3c <_svfprintf_r+0x107c>
    81ae:	2b00      	cmp	r3, #0
    81b0:	f340 8098 	ble.w	82e4 <_svfprintf_r+0x1624>
    81b4:	f1bb 0f00 	cmp.w	fp, #0
    81b8:	d16b      	bne.n	8292 <_svfprintf_r+0x15d2>
    81ba:	9a07      	ldr	r2, [sp, #28]
    81bc:	07d4      	lsls	r4, r2, #31
    81be:	d468      	bmi.n	8292 <_svfprintf_r+0x15d2>
    81c0:	461a      	mov	r2, r3
    81c2:	920d      	str	r2, [sp, #52]	; 0x34
    81c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    81c8:	e5b8      	b.n	7d3c <_svfprintf_r+0x107c>
    81ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
    81cc:	2b47      	cmp	r3, #71	; 0x47
    81ce:	f47f ad83 	bne.w	7cd8 <_svfprintf_r+0x1018>
    81d2:	9b07      	ldr	r3, [sp, #28]
    81d4:	07db      	lsls	r3, r3, #31
    81d6:	f53f aed1 	bmi.w	7f7c <_svfprintf_r+0x12bc>
    81da:	9b21      	ldr	r3, [sp, #132]	; 0x84
    81dc:	1b9b      	subs	r3, r3, r6
    81de:	9312      	str	r3, [sp, #72]	; 0x48
    81e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    81e2:	2b47      	cmp	r3, #71	; 0x47
    81e4:	f43f af13 	beq.w	800e <_svfprintf_r+0x134e>
    81e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    81ea:	e728      	b.n	803e <_svfprintf_r+0x137e>
    81ec:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
    81f0:	970e      	str	r7, [sp, #56]	; 0x38
    81f2:	9308      	str	r3, [sp, #32]
    81f4:	950d      	str	r5, [sp, #52]	; 0x34
    81f6:	4683      	mov	fp, r0
    81f8:	9013      	str	r0, [sp, #76]	; 0x4c
    81fa:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
    81fe:	f7fe bf25 	b.w	704c <_svfprintf_r+0x38c>
    8202:	9b07      	ldr	r3, [sp, #28]
    8204:	07db      	lsls	r3, r3, #31
    8206:	465f      	mov	r7, fp
    8208:	d505      	bpl.n	8216 <_svfprintf_r+0x1556>
    820a:	ae40      	add	r6, sp, #256	; 0x100
    820c:	2330      	movs	r3, #48	; 0x30
    820e:	f806 3d41 	strb.w	r3, [r6, #-65]!
    8212:	f7fe bf11 	b.w	7038 <_svfprintf_r+0x378>
    8216:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
    821a:	ae30      	add	r6, sp, #192	; 0xc0
    821c:	f7fe bf0f 	b.w	703e <_svfprintf_r+0x37e>
    8220:	aa23      	add	r2, sp, #140	; 0x8c
    8222:	9909      	ldr	r1, [sp, #36]	; 0x24
    8224:	980a      	ldr	r0, [sp, #40]	; 0x28
    8226:	f000 f8a3 	bl	8370 <__ssprint_r>
    822a:	2800      	cmp	r0, #0
    822c:	f47e ae41 	bne.w	6eb2 <_svfprintf_r+0x1f2>
    8230:	9d1d      	ldr	r5, [sp, #116]	; 0x74
    8232:	9c25      	ldr	r4, [sp, #148]	; 0x94
    8234:	9b24      	ldr	r3, [sp, #144]	; 0x90
    8236:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    823a:	e62a      	b.n	7e92 <_svfprintf_r+0x11d2>
    823c:	46a0      	mov	r8, r4
    823e:	2500      	movs	r5, #0
    8240:	f7fe bd99 	b.w	6d76 <_svfprintf_r+0xb6>
    8244:	9a16      	ldr	r2, [sp, #88]	; 0x58
    8246:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    8248:	4413      	add	r3, r2
    824a:	2267      	movs	r2, #103	; 0x67
    824c:	930d      	str	r3, [sp, #52]	; 0x34
    824e:	9211      	str	r2, [sp, #68]	; 0x44
    8250:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    8254:	e572      	b.n	7d3c <_svfprintf_r+0x107c>
    8256:	9b21      	ldr	r3, [sp, #132]	; 0x84
    8258:	e552      	b.n	7d00 <_svfprintf_r+0x1040>
    825a:	3330      	adds	r3, #48	; 0x30
    825c:	2230      	movs	r2, #48	; 0x30
    825e:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
    8262:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
    8266:	ab20      	add	r3, sp, #128	; 0x80
    8268:	e725      	b.n	80b6 <_svfprintf_r+0x13f6>
    826a:	9808      	ldr	r0, [sp, #32]
    826c:	4639      	mov	r1, r7
    826e:	2200      	movs	r2, #0
    8270:	2300      	movs	r3, #0
    8272:	f7fc f8f9 	bl	4468 <__aeabi_dcmpeq>
    8276:	2800      	cmp	r0, #0
    8278:	f47f ae8a 	bne.w	7f90 <_svfprintf_r+0x12d0>
    827c:	f1c5 0501 	rsb	r5, r5, #1
    8280:	951d      	str	r5, [sp, #116]	; 0x74
    8282:	442c      	add	r4, r5
    8284:	e529      	b.n	7cda <_svfprintf_r+0x101a>
    8286:	4e38      	ldr	r6, [pc, #224]	; (8368 <_svfprintf_r+0x16a8>)
    8288:	4b38      	ldr	r3, [pc, #224]	; (836c <_svfprintf_r+0x16ac>)
    828a:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
    828e:	f7ff b82f 	b.w	72f0 <_svfprintf_r+0x630>
    8292:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    8294:	9a16      	ldr	r2, [sp, #88]	; 0x58
    8296:	189d      	adds	r5, r3, r2
    8298:	eb05 030b 	add.w	r3, r5, fp
    829c:	930d      	str	r3, [sp, #52]	; 0x34
    829e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    82a2:	e54b      	b.n	7d3c <_svfprintf_r+0x107c>
    82a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    82a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    82a8:	f1c3 0301 	rsb	r3, r3, #1
    82ac:	441a      	add	r2, r3
    82ae:	4613      	mov	r3, r2
    82b0:	920d      	str	r2, [sp, #52]	; 0x34
    82b2:	e777      	b.n	81a4 <_svfprintf_r+0x14e4>
    82b4:	9b07      	ldr	r3, [sp, #28]
    82b6:	f013 0301 	ands.w	r3, r3, #1
    82ba:	f47f af05 	bne.w	80c8 <_svfprintf_r+0x1408>
    82be:	9313      	str	r3, [sp, #76]	; 0x4c
    82c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    82c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    82c6:	e539      	b.n	7d3c <_svfprintf_r+0x107c>
    82c8:	980e      	ldr	r0, [sp, #56]	; 0x38
    82ca:	f898 3001 	ldrb.w	r3, [r8, #1]
    82ce:	6805      	ldr	r5, [r0, #0]
    82d0:	3004      	adds	r0, #4
    82d2:	2d00      	cmp	r5, #0
    82d4:	900e      	str	r0, [sp, #56]	; 0x38
    82d6:	46a0      	mov	r8, r4
    82d8:	f6be ad4b 	bge.w	6d72 <_svfprintf_r+0xb2>
    82dc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    82e0:	f7fe bd47 	b.w	6d72 <_svfprintf_r+0xb2>
    82e4:	f1bb 0f00 	cmp.w	fp, #0
    82e8:	d102      	bne.n	82f0 <_svfprintf_r+0x1630>
    82ea:	9b07      	ldr	r3, [sp, #28]
    82ec:	07d8      	lsls	r0, r3, #31
    82ee:	d507      	bpl.n	8300 <_svfprintf_r+0x1640>
    82f0:	9b16      	ldr	r3, [sp, #88]	; 0x58
    82f2:	1c5d      	adds	r5, r3, #1
    82f4:	eb05 030b 	add.w	r3, r5, fp
    82f8:	930d      	str	r3, [sp, #52]	; 0x34
    82fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    82fe:	e51d      	b.n	7d3c <_svfprintf_r+0x107c>
    8300:	2301      	movs	r3, #1
    8302:	930d      	str	r3, [sp, #52]	; 0x34
    8304:	e51a      	b.n	7d3c <_svfprintf_r+0x107c>
    8306:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    830a:	f7ff b865 	b.w	73d8 <_svfprintf_r+0x718>
    830e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    8312:	f7fe be51 	b.w	6fb8 <_svfprintf_r+0x2f8>
    8316:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
    831a:	e6cc      	b.n	80b6 <_svfprintf_r+0x13f6>
    831c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    831e:	230c      	movs	r3, #12
    8320:	6013      	str	r3, [r2, #0]
    8322:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8326:	f7fe bdcd 	b.w	6ec4 <_svfprintf_r+0x204>
    832a:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    832e:	f7ff b950 	b.w	75d2 <_svfprintf_r+0x912>
    8332:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    8336:	f7fe bfab 	b.w	7290 <_svfprintf_r+0x5d0>
    833a:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    833e:	f7fe bdc9 	b.w	6ed4 <_svfprintf_r+0x214>
    8342:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    8346:	f7ff b819 	b.w	737c <_svfprintf_r+0x6bc>
    834a:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    834e:	f7fe bfeb 	b.w	7328 <_svfprintf_r+0x668>
    8352:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    8356:	f7ff b8f3 	b.w	7540 <_svfprintf_r+0x880>
    835a:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    835e:	f7ff b8d2 	b.w	7506 <_svfprintf_r+0x846>
    8362:	bf00      	nop
    8364:	00008fc4 	.word	0x00008fc4
    8368:	00008f98 	.word	0x00008f98
    836c:	00008f94 	.word	0x00008f94

00008370 <__ssprint_r>:
    8370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8374:	6893      	ldr	r3, [r2, #8]
    8376:	b083      	sub	sp, #12
    8378:	4690      	mov	r8, r2
    837a:	2b00      	cmp	r3, #0
    837c:	d072      	beq.n	8464 <__ssprint_r+0xf4>
    837e:	4683      	mov	fp, r0
    8380:	f04f 0900 	mov.w	r9, #0
    8384:	6816      	ldr	r6, [r2, #0]
    8386:	6808      	ldr	r0, [r1, #0]
    8388:	688b      	ldr	r3, [r1, #8]
    838a:	460d      	mov	r5, r1
    838c:	464c      	mov	r4, r9
    838e:	2c00      	cmp	r4, #0
    8390:	d045      	beq.n	841e <__ssprint_r+0xae>
    8392:	429c      	cmp	r4, r3
    8394:	461f      	mov	r7, r3
    8396:	469a      	mov	sl, r3
    8398:	d346      	bcc.n	8428 <__ssprint_r+0xb8>
    839a:	89ab      	ldrh	r3, [r5, #12]
    839c:	f413 6f90 	tst.w	r3, #1152	; 0x480
    83a0:	d02d      	beq.n	83fe <__ssprint_r+0x8e>
    83a2:	696f      	ldr	r7, [r5, #20]
    83a4:	6929      	ldr	r1, [r5, #16]
    83a6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    83aa:	ebc1 0a00 	rsb	sl, r1, r0
    83ae:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
    83b2:	1c60      	adds	r0, r4, #1
    83b4:	107f      	asrs	r7, r7, #1
    83b6:	4450      	add	r0, sl
    83b8:	42b8      	cmp	r0, r7
    83ba:	463a      	mov	r2, r7
    83bc:	bf84      	itt	hi
    83be:	4607      	movhi	r7, r0
    83c0:	463a      	movhi	r2, r7
    83c2:	055b      	lsls	r3, r3, #21
    83c4:	d533      	bpl.n	842e <__ssprint_r+0xbe>
    83c6:	4611      	mov	r1, r2
    83c8:	4658      	mov	r0, fp
    83ca:	f7fc f8df 	bl	458c <_malloc_r>
    83ce:	2800      	cmp	r0, #0
    83d0:	d037      	beq.n	8442 <__ssprint_r+0xd2>
    83d2:	4652      	mov	r2, sl
    83d4:	6929      	ldr	r1, [r5, #16]
    83d6:	9001      	str	r0, [sp, #4]
    83d8:	f7fb f822 	bl	3420 <memcpy>
    83dc:	89aa      	ldrh	r2, [r5, #12]
    83de:	9b01      	ldr	r3, [sp, #4]
    83e0:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    83e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    83e8:	81aa      	strh	r2, [r5, #12]
    83ea:	ebca 0207 	rsb	r2, sl, r7
    83ee:	eb03 000a 	add.w	r0, r3, sl
    83f2:	616f      	str	r7, [r5, #20]
    83f4:	612b      	str	r3, [r5, #16]
    83f6:	6028      	str	r0, [r5, #0]
    83f8:	60aa      	str	r2, [r5, #8]
    83fa:	4627      	mov	r7, r4
    83fc:	46a2      	mov	sl, r4
    83fe:	4652      	mov	r2, sl
    8400:	4649      	mov	r1, r9
    8402:	f7fc fb91 	bl	4b28 <memmove>
    8406:	f8d8 2008 	ldr.w	r2, [r8, #8]
    840a:	68ab      	ldr	r3, [r5, #8]
    840c:	6828      	ldr	r0, [r5, #0]
    840e:	1bdb      	subs	r3, r3, r7
    8410:	4450      	add	r0, sl
    8412:	1b14      	subs	r4, r2, r4
    8414:	60ab      	str	r3, [r5, #8]
    8416:	6028      	str	r0, [r5, #0]
    8418:	f8c8 4008 	str.w	r4, [r8, #8]
    841c:	b314      	cbz	r4, 8464 <__ssprint_r+0xf4>
    841e:	f8d6 9000 	ldr.w	r9, [r6]
    8422:	6874      	ldr	r4, [r6, #4]
    8424:	3608      	adds	r6, #8
    8426:	e7b2      	b.n	838e <__ssprint_r+0x1e>
    8428:	4627      	mov	r7, r4
    842a:	46a2      	mov	sl, r4
    842c:	e7e7      	b.n	83fe <__ssprint_r+0x8e>
    842e:	4658      	mov	r0, fp
    8430:	f7fc fc30 	bl	4c94 <_realloc_r>
    8434:	4603      	mov	r3, r0
    8436:	2800      	cmp	r0, #0
    8438:	d1d7      	bne.n	83ea <__ssprint_r+0x7a>
    843a:	6929      	ldr	r1, [r5, #16]
    843c:	4658      	mov	r0, fp
    843e:	f7fc ffc7 	bl	53d0 <_free_r>
    8442:	230c      	movs	r3, #12
    8444:	f8cb 3000 	str.w	r3, [fp]
    8448:	89ab      	ldrh	r3, [r5, #12]
    844a:	2200      	movs	r2, #0
    844c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    8450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    8454:	81ab      	strh	r3, [r5, #12]
    8456:	f8c8 2008 	str.w	r2, [r8, #8]
    845a:	f8c8 2004 	str.w	r2, [r8, #4]
    845e:	b003      	add	sp, #12
    8460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8464:	2000      	movs	r0, #0
    8466:	f8c8 0004 	str.w	r0, [r8, #4]
    846a:	b003      	add	sp, #12
    846c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00008470 <__aeabi_d2iz>:
    8470:	ea4f 0241 	mov.w	r2, r1, lsl #1
    8474:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    8478:	d215      	bcs.n	84a6 <__aeabi_d2iz+0x36>
    847a:	d511      	bpl.n	84a0 <__aeabi_d2iz+0x30>
    847c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    8480:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    8484:	d912      	bls.n	84ac <__aeabi_d2iz+0x3c>
    8486:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    848a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    848e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    8492:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    8496:	fa23 f002 	lsr.w	r0, r3, r2
    849a:	bf18      	it	ne
    849c:	4240      	negne	r0, r0
    849e:	4770      	bx	lr
    84a0:	f04f 0000 	mov.w	r0, #0
    84a4:	4770      	bx	lr
    84a6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    84aa:	d105      	bne.n	84b8 <__aeabi_d2iz+0x48>
    84ac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    84b0:	bf08      	it	eq
    84b2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    84b6:	4770      	bx	lr
    84b8:	f04f 0000 	mov.w	r0, #0
    84bc:	4770      	bx	lr
    84be:	bf00      	nop

000084c0 <__aeabi_uldivmod>:
    84c0:	b953      	cbnz	r3, 84d8 <__aeabi_uldivmod+0x18>
    84c2:	b94a      	cbnz	r2, 84d8 <__aeabi_uldivmod+0x18>
    84c4:	2900      	cmp	r1, #0
    84c6:	bf08      	it	eq
    84c8:	2800      	cmpeq	r0, #0
    84ca:	bf1c      	itt	ne
    84cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    84d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    84d4:	f000 b97e 	b.w	87d4 <__aeabi_idiv0>
    84d8:	f1ad 0c08 	sub.w	ip, sp, #8
    84dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    84e0:	f000 f806 	bl	84f0 <__udivmoddi4>
    84e4:	f8dd e004 	ldr.w	lr, [sp, #4]
    84e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    84ec:	b004      	add	sp, #16
    84ee:	4770      	bx	lr

000084f0 <__udivmoddi4>:
    84f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    84f4:	468c      	mov	ip, r1
    84f6:	460e      	mov	r6, r1
    84f8:	4604      	mov	r4, r0
    84fa:	9d08      	ldr	r5, [sp, #32]
    84fc:	2b00      	cmp	r3, #0
    84fe:	d150      	bne.n	85a2 <__udivmoddi4+0xb2>
    8500:	428a      	cmp	r2, r1
    8502:	4617      	mov	r7, r2
    8504:	d96c      	bls.n	85e0 <__udivmoddi4+0xf0>
    8506:	fab2 fe82 	clz	lr, r2
    850a:	f1be 0f00 	cmp.w	lr, #0
    850e:	d00b      	beq.n	8528 <__udivmoddi4+0x38>
    8510:	f1ce 0420 	rsb	r4, lr, #32
    8514:	fa20 f404 	lsr.w	r4, r0, r4
    8518:	fa01 f60e 	lsl.w	r6, r1, lr
    851c:	ea44 0c06 	orr.w	ip, r4, r6
    8520:	fa02 f70e 	lsl.w	r7, r2, lr
    8524:	fa00 f40e 	lsl.w	r4, r0, lr
    8528:	ea4f 4917 	mov.w	r9, r7, lsr #16
    852c:	0c22      	lsrs	r2, r4, #16
    852e:	fbbc f0f9 	udiv	r0, ip, r9
    8532:	fa1f f887 	uxth.w	r8, r7
    8536:	fb09 c610 	mls	r6, r9, r0, ip
    853a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    853e:	fb00 f308 	mul.w	r3, r0, r8
    8542:	42b3      	cmp	r3, r6
    8544:	d909      	bls.n	855a <__udivmoddi4+0x6a>
    8546:	19f6      	adds	r6, r6, r7
    8548:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
    854c:	f080 8122 	bcs.w	8794 <__udivmoddi4+0x2a4>
    8550:	42b3      	cmp	r3, r6
    8552:	f240 811f 	bls.w	8794 <__udivmoddi4+0x2a4>
    8556:	3802      	subs	r0, #2
    8558:	443e      	add	r6, r7
    855a:	1af6      	subs	r6, r6, r3
    855c:	b2a2      	uxth	r2, r4
    855e:	fbb6 f3f9 	udiv	r3, r6, r9
    8562:	fb09 6613 	mls	r6, r9, r3, r6
    8566:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
    856a:	fb03 f808 	mul.w	r8, r3, r8
    856e:	45a0      	cmp	r8, r4
    8570:	d909      	bls.n	8586 <__udivmoddi4+0x96>
    8572:	19e4      	adds	r4, r4, r7
    8574:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    8578:	f080 810a 	bcs.w	8790 <__udivmoddi4+0x2a0>
    857c:	45a0      	cmp	r8, r4
    857e:	f240 8107 	bls.w	8790 <__udivmoddi4+0x2a0>
    8582:	3b02      	subs	r3, #2
    8584:	443c      	add	r4, r7
    8586:	ebc8 0404 	rsb	r4, r8, r4
    858a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    858e:	2100      	movs	r1, #0
    8590:	2d00      	cmp	r5, #0
    8592:	d062      	beq.n	865a <__udivmoddi4+0x16a>
    8594:	fa24 f40e 	lsr.w	r4, r4, lr
    8598:	2300      	movs	r3, #0
    859a:	602c      	str	r4, [r5, #0]
    859c:	606b      	str	r3, [r5, #4]
    859e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    85a2:	428b      	cmp	r3, r1
    85a4:	d907      	bls.n	85b6 <__udivmoddi4+0xc6>
    85a6:	2d00      	cmp	r5, #0
    85a8:	d055      	beq.n	8656 <__udivmoddi4+0x166>
    85aa:	2100      	movs	r1, #0
    85ac:	e885 0041 	stmia.w	r5, {r0, r6}
    85b0:	4608      	mov	r0, r1
    85b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    85b6:	fab3 f183 	clz	r1, r3
    85ba:	2900      	cmp	r1, #0
    85bc:	f040 8090 	bne.w	86e0 <__udivmoddi4+0x1f0>
    85c0:	42b3      	cmp	r3, r6
    85c2:	d302      	bcc.n	85ca <__udivmoddi4+0xda>
    85c4:	4282      	cmp	r2, r0
    85c6:	f200 80f8 	bhi.w	87ba <__udivmoddi4+0x2ca>
    85ca:	1a84      	subs	r4, r0, r2
    85cc:	eb66 0603 	sbc.w	r6, r6, r3
    85d0:	2001      	movs	r0, #1
    85d2:	46b4      	mov	ip, r6
    85d4:	2d00      	cmp	r5, #0
    85d6:	d040      	beq.n	865a <__udivmoddi4+0x16a>
    85d8:	e885 1010 	stmia.w	r5, {r4, ip}
    85dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    85e0:	b912      	cbnz	r2, 85e8 <__udivmoddi4+0xf8>
    85e2:	2701      	movs	r7, #1
    85e4:	fbb7 f7f2 	udiv	r7, r7, r2
    85e8:	fab7 fe87 	clz	lr, r7
    85ec:	f1be 0f00 	cmp.w	lr, #0
    85f0:	d135      	bne.n	865e <__udivmoddi4+0x16e>
    85f2:	1bf3      	subs	r3, r6, r7
    85f4:	ea4f 4817 	mov.w	r8, r7, lsr #16
    85f8:	fa1f fc87 	uxth.w	ip, r7
    85fc:	2101      	movs	r1, #1
    85fe:	fbb3 f0f8 	udiv	r0, r3, r8
    8602:	0c22      	lsrs	r2, r4, #16
    8604:	fb08 3610 	mls	r6, r8, r0, r3
    8608:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    860c:	fb0c f300 	mul.w	r3, ip, r0
    8610:	42b3      	cmp	r3, r6
    8612:	d907      	bls.n	8624 <__udivmoddi4+0x134>
    8614:	19f6      	adds	r6, r6, r7
    8616:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
    861a:	d202      	bcs.n	8622 <__udivmoddi4+0x132>
    861c:	42b3      	cmp	r3, r6
    861e:	f200 80ce 	bhi.w	87be <__udivmoddi4+0x2ce>
    8622:	4610      	mov	r0, r2
    8624:	1af6      	subs	r6, r6, r3
    8626:	b2a2      	uxth	r2, r4
    8628:	fbb6 f3f8 	udiv	r3, r6, r8
    862c:	fb08 6613 	mls	r6, r8, r3, r6
    8630:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
    8634:	fb0c fc03 	mul.w	ip, ip, r3
    8638:	45a4      	cmp	ip, r4
    863a:	d907      	bls.n	864c <__udivmoddi4+0x15c>
    863c:	19e4      	adds	r4, r4, r7
    863e:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
    8642:	d202      	bcs.n	864a <__udivmoddi4+0x15a>
    8644:	45a4      	cmp	ip, r4
    8646:	f200 80b5 	bhi.w	87b4 <__udivmoddi4+0x2c4>
    864a:	4613      	mov	r3, r2
    864c:	ebcc 0404 	rsb	r4, ip, r4
    8650:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    8654:	e79c      	b.n	8590 <__udivmoddi4+0xa0>
    8656:	4629      	mov	r1, r5
    8658:	4628      	mov	r0, r5
    865a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    865e:	f1ce 0120 	rsb	r1, lr, #32
    8662:	fa06 f30e 	lsl.w	r3, r6, lr
    8666:	fa07 f70e 	lsl.w	r7, r7, lr
    866a:	fa20 f901 	lsr.w	r9, r0, r1
    866e:	ea4f 4817 	mov.w	r8, r7, lsr #16
    8672:	40ce      	lsrs	r6, r1
    8674:	ea49 0903 	orr.w	r9, r9, r3
    8678:	fbb6 faf8 	udiv	sl, r6, r8
    867c:	ea4f 4419 	mov.w	r4, r9, lsr #16
    8680:	fb08 661a 	mls	r6, r8, sl, r6
    8684:	fa1f fc87 	uxth.w	ip, r7
    8688:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
    868c:	fb0a f20c 	mul.w	r2, sl, ip
    8690:	429a      	cmp	r2, r3
    8692:	fa00 f40e 	lsl.w	r4, r0, lr
    8696:	d90a      	bls.n	86ae <__udivmoddi4+0x1be>
    8698:	19db      	adds	r3, r3, r7
    869a:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
    869e:	f080 8087 	bcs.w	87b0 <__udivmoddi4+0x2c0>
    86a2:	429a      	cmp	r2, r3
    86a4:	f240 8084 	bls.w	87b0 <__udivmoddi4+0x2c0>
    86a8:	f1aa 0a02 	sub.w	sl, sl, #2
    86ac:	443b      	add	r3, r7
    86ae:	1a9b      	subs	r3, r3, r2
    86b0:	fa1f f989 	uxth.w	r9, r9
    86b4:	fbb3 f1f8 	udiv	r1, r3, r8
    86b8:	fb08 3311 	mls	r3, r8, r1, r3
    86bc:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
    86c0:	fb01 f60c 	mul.w	r6, r1, ip
    86c4:	429e      	cmp	r6, r3
    86c6:	d907      	bls.n	86d8 <__udivmoddi4+0x1e8>
    86c8:	19db      	adds	r3, r3, r7
    86ca:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
    86ce:	d26b      	bcs.n	87a8 <__udivmoddi4+0x2b8>
    86d0:	429e      	cmp	r6, r3
    86d2:	d969      	bls.n	87a8 <__udivmoddi4+0x2b8>
    86d4:	3902      	subs	r1, #2
    86d6:	443b      	add	r3, r7
    86d8:	1b9b      	subs	r3, r3, r6
    86da:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
    86de:	e78e      	b.n	85fe <__udivmoddi4+0x10e>
    86e0:	f1c1 0e20 	rsb	lr, r1, #32
    86e4:	fa22 f40e 	lsr.w	r4, r2, lr
    86e8:	408b      	lsls	r3, r1
    86ea:	4323      	orrs	r3, r4
    86ec:	fa20 f70e 	lsr.w	r7, r0, lr
    86f0:	fa06 f401 	lsl.w	r4, r6, r1
    86f4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    86f8:	fa26 f60e 	lsr.w	r6, r6, lr
    86fc:	433c      	orrs	r4, r7
    86fe:	fbb6 f9fc 	udiv	r9, r6, ip
    8702:	0c27      	lsrs	r7, r4, #16
    8704:	fb0c 6619 	mls	r6, ip, r9, r6
    8708:	fa1f f883 	uxth.w	r8, r3
    870c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
    8710:	fb09 f708 	mul.w	r7, r9, r8
    8714:	42b7      	cmp	r7, r6
    8716:	fa02 f201 	lsl.w	r2, r2, r1
    871a:	fa00 fa01 	lsl.w	sl, r0, r1
    871e:	d908      	bls.n	8732 <__udivmoddi4+0x242>
    8720:	18f6      	adds	r6, r6, r3
    8722:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    8726:	d241      	bcs.n	87ac <__udivmoddi4+0x2bc>
    8728:	42b7      	cmp	r7, r6
    872a:	d93f      	bls.n	87ac <__udivmoddi4+0x2bc>
    872c:	f1a9 0902 	sub.w	r9, r9, #2
    8730:	441e      	add	r6, r3
    8732:	1bf6      	subs	r6, r6, r7
    8734:	b2a0      	uxth	r0, r4
    8736:	fbb6 f4fc 	udiv	r4, r6, ip
    873a:	fb0c 6614 	mls	r6, ip, r4, r6
    873e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
    8742:	fb04 f808 	mul.w	r8, r4, r8
    8746:	45b8      	cmp	r8, r7
    8748:	d907      	bls.n	875a <__udivmoddi4+0x26a>
    874a:	18ff      	adds	r7, r7, r3
    874c:	f104 30ff 	add.w	r0, r4, #4294967295	; 0xffffffff
    8750:	d228      	bcs.n	87a4 <__udivmoddi4+0x2b4>
    8752:	45b8      	cmp	r8, r7
    8754:	d926      	bls.n	87a4 <__udivmoddi4+0x2b4>
    8756:	3c02      	subs	r4, #2
    8758:	441f      	add	r7, r3
    875a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
    875e:	ebc8 0707 	rsb	r7, r8, r7
    8762:	fba0 8902 	umull	r8, r9, r0, r2
    8766:	454f      	cmp	r7, r9
    8768:	4644      	mov	r4, r8
    876a:	464e      	mov	r6, r9
    876c:	d314      	bcc.n	8798 <__udivmoddi4+0x2a8>
    876e:	d029      	beq.n	87c4 <__udivmoddi4+0x2d4>
    8770:	b365      	cbz	r5, 87cc <__udivmoddi4+0x2dc>
    8772:	ebba 0304 	subs.w	r3, sl, r4
    8776:	eb67 0706 	sbc.w	r7, r7, r6
    877a:	fa07 fe0e 	lsl.w	lr, r7, lr
    877e:	40cb      	lsrs	r3, r1
    8780:	40cf      	lsrs	r7, r1
    8782:	ea4e 0303 	orr.w	r3, lr, r3
    8786:	e885 0088 	stmia.w	r5, {r3, r7}
    878a:	2100      	movs	r1, #0
    878c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8790:	4613      	mov	r3, r2
    8792:	e6f8      	b.n	8586 <__udivmoddi4+0x96>
    8794:	4610      	mov	r0, r2
    8796:	e6e0      	b.n	855a <__udivmoddi4+0x6a>
    8798:	ebb8 0402 	subs.w	r4, r8, r2
    879c:	eb69 0603 	sbc.w	r6, r9, r3
    87a0:	3801      	subs	r0, #1
    87a2:	e7e5      	b.n	8770 <__udivmoddi4+0x280>
    87a4:	4604      	mov	r4, r0
    87a6:	e7d8      	b.n	875a <__udivmoddi4+0x26a>
    87a8:	4611      	mov	r1, r2
    87aa:	e795      	b.n	86d8 <__udivmoddi4+0x1e8>
    87ac:	4681      	mov	r9, r0
    87ae:	e7c0      	b.n	8732 <__udivmoddi4+0x242>
    87b0:	468a      	mov	sl, r1
    87b2:	e77c      	b.n	86ae <__udivmoddi4+0x1be>
    87b4:	3b02      	subs	r3, #2
    87b6:	443c      	add	r4, r7
    87b8:	e748      	b.n	864c <__udivmoddi4+0x15c>
    87ba:	4608      	mov	r0, r1
    87bc:	e70a      	b.n	85d4 <__udivmoddi4+0xe4>
    87be:	3802      	subs	r0, #2
    87c0:	443e      	add	r6, r7
    87c2:	e72f      	b.n	8624 <__udivmoddi4+0x134>
    87c4:	45c2      	cmp	sl, r8
    87c6:	d3e7      	bcc.n	8798 <__udivmoddi4+0x2a8>
    87c8:	463e      	mov	r6, r7
    87ca:	e7d1      	b.n	8770 <__udivmoddi4+0x280>
    87cc:	4629      	mov	r1, r5
    87ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    87d2:	bf00      	nop

000087d4 <__aeabi_idiv0>:
    87d4:	4770      	bx	lr
    87d6:	bf00      	nop
    87d8:	65726957 	.word	0x65726957
    87dc:	00000031 	.word	0x00000031
    87e0:	334d434c 	.word	0x334d434c
    87e4:	20513030 	.word	0x20513030
    87e8:	7262694c 	.word	0x7262694c
    87ec:	20797261 	.word	0x20797261
    87f0:	74736554 	.word	0x74736554
    87f4:	646f4320 	.word	0x646f4320
    87f8:	74612065 	.word	0x74612065
    87fc:	25783020 	.word	0x25783020
    8800:	0058322e 	.word	0x0058322e
    8804:	333a3731 	.word	0x333a3731
    8808:	38343a30 	.word	0x38343a30
    880c:	00000000 	.word	0x00000000
    8810:	2072614d 	.word	0x2072614d
    8814:	32203332 	.word	0x32203332
    8818:	00383130 	.word	0x00383130
    881c:	6c697542 	.word	0x6c697542
    8820:	73252064 	.word	0x73252064
    8824:	25202d20 	.word	0x25202d20
    8828:	250a0d73 	.word	0x250a0d73
    882c:	000a0d73 	.word	0x000a0d73
    8830:	6d6f682f 	.word	0x6d6f682f
    8834:	72622f65 	.word	0x72622f65
    8838:	2f656375 	.word	0x2f656375
    883c:	75636f44 	.word	0x75636f44
    8840:	746e656d 	.word	0x746e656d
    8844:	6f632f73 	.word	0x6f632f73
    8848:	412f6564 	.word	0x412f6564
    884c:	69756472 	.word	0x69756472
    8850:	6c2f6f6e 	.word	0x6c2f6f6e
    8854:	61726269 	.word	0x61726269
    8858:	73656972 	.word	0x73656972
    885c:	7379532f 	.word	0x7379532f
    8860:	6e6f7274 	.word	0x6e6f7274
    8864:	4c5f7869 	.word	0x4c5f7869
    8868:	30334d43 	.word	0x30334d43
    886c:	78652f30 	.word	0x78652f30
    8870:	6c706d61 	.word	0x6c706d61
    8874:	4c2f7365 	.word	0x4c2f7365
    8878:	30334d43 	.word	0x30334d43
    887c:	435f5130 	.word	0x435f5130
    8880:	7341646d 	.word	0x7341646d
    8884:	52696963 	.word	0x52696963
    8888:	2f646165 	.word	0x2f646165
    888c:	334d434c 	.word	0x334d434c
    8890:	5f513030 	.word	0x5f513030
    8894:	41646d43 	.word	0x41646d43
    8898:	69696373 	.word	0x69696373
    889c:	64616552 	.word	0x64616552
    88a0:	6f6e692e 	.word	0x6f6e692e
    88a4:	00000000 	.word	0x00000000
    88a8:	20555043 	.word	0x20555043
    88ac:	54207369 	.word	0x54207369
    88b0:	312e335f 	.word	0x312e335f
    88b4:	322e332f 	.word	0x322e332f
    88b8:	00000000 	.word	0x00000000
    88bc:	50435f46 	.word	0x50435f46
    88c0:	003d2055 	.word	0x003d2055
    88c4:	6e697355 	.word	0x6e697355
    88c8:	32692067 	.word	0x32692067
    88cc:	33745f63 	.word	0x33745f63
    88d0:	43324920 	.word	0x43324920
    88d4:	62696c20 	.word	0x62696c20
    88d8:	79726172 	.word	0x79726172
    88dc:	726f6620 	.word	0x726f6620
    88e0:	65655420 	.word	0x65655420
    88e4:	0d79736e 	.word	0x0d79736e
    88e8:	0000000a 	.word	0x0000000a
    88ec:	746e4920 	.word	0x746e4920
    88f0:	61767265 	.word	0x61767265
    88f4:	7369206c 	.word	0x7369206c
    88f8:	00000020 	.word	0x00000020
    88fc:	63657320 	.word	0x63657320
    8900:	0000202c 	.word	0x0000202c
    8904:	75746553 	.word	0x75746553
    8908:	6f432070 	.word	0x6f432070
    890c:	656c706d 	.word	0x656c706d
    8910:	00216574 	.word	0x00216574
    8914:	657a6973 	.word	0x657a6973
    8918:	6120666f 	.word	0x6120666f
    891c:	69696373 	.word	0x69696373
    8920:	72726120 	.word	0x72726120
    8924:	69207961 	.word	0x69207961
    8928:	69252073 	.word	0x69252073
    892c:	00000a0d 	.word	0x00000a0d
    8930:	0d752540 	.word	0x0d752540
    8934:	0000000a 	.word	0x0000000a
    8938:	2072666d 	.word	0x2072666d
    893c:	203a4449 	.word	0x203a4449
    8940:	0a0d7325 	.word	0x0a0d7325
    8944:	00000000 	.word	0x00000000
    8948:	65646f6d 	.word	0x65646f6d
    894c:	25203a6c 	.word	0x25203a6c
    8950:	000a0d73 	.word	0x000a0d73
    8954:	69766572 	.word	0x69766572
    8958:	6e6f6973 	.word	0x6e6f6973
    895c:	7325203a 	.word	0x7325203a
    8960:	00000a0d 	.word	0x00000a0d
    8964:	61636f6c 	.word	0x61636f6c
    8968:	6e6f6974 	.word	0x6e6f6974
    896c:	7325203a 	.word	0x7325203a
    8970:	00000a0d 	.word	0x00000a0d
    8974:	2067664d 	.word	0x2067664d
    8978:	65746144 	.word	0x65746144
    897c:	7325203a 	.word	0x7325203a
    8980:	00000a0d 	.word	0x00000a0d
    8984:	2067664d 	.word	0x2067664d
    8988:	69726553 	.word	0x69726553
    898c:	203a6c61 	.word	0x203a6c61
    8990:	0a0d7325 	.word	0x0a0d7325
    8994:	00000000 	.word	0x00000000
    8998:	74706d65 	.word	0x74706d65
    899c:	ffff0079 	.word	0xffff0079
    89a0:	20646d63 	.word	0x20646d63
    89a4:	58257830 	.word	0x58257830
    89a8:	0000202c 	.word	0x0000202c
    89ac:	20776172 	.word	0x20776172
    89b0:	64616572 	.word	0x64616572
    89b4:	6f727720 	.word	0x6f727720
    89b8:	6e20676e 	.word	0x6e20676e
    89bc:	65626d75 	.word	0x65626d75
    89c0:	666f2072 	.word	0x666f2072
    89c4:	74796220 	.word	0x74796220
    89c8:	61207365 	.word	0x61207365
    89cc:	6c696176 	.word	0x6c696176
    89d0:	656c6261 	.word	0x656c6261
    89d4:	00000000 	.word	0x00000000
    89d8:	61657220 	.word	0x61657220
    89dc:	69252064 	.word	0x69252064
    89e0:	74796220 	.word	0x74796220
    89e4:	0a0d7365 	.word	0x0a0d7365
    89e8:	00000000 	.word	0x00000000
    89ec:	303a7525 	.word	0x303a7525
    89f0:	32302578 	.word	0x32302578
    89f4:	63252f58 	.word	0x63252f58
    89f8:	00000020 	.word	0x00000020
    89fc:	69637361 	.word	0x69637361
    8a00:	65722069 	.word	0x65722069
    8a04:	202c6461 	.word	0x202c6461
    8a08:	3a646d63 	.word	0x3a646d63
    8a0c:	25783020 	.word	0x25783020
    8a10:	000a0d58 	.word	0x000a0d58
    8a14:	69637361 	.word	0x69637361
    8a18:	65722069 	.word	0x65722069
    8a1c:	6f206461 	.word	0x6f206461
    8a20:	73312066 	.word	0x73312066
    8a24:	79622074 	.word	0x79622074
    8a28:	66206574 	.word	0x66206574
    8a2c:	656c6961 	.word	0x656c6961
    8a30:	000a0d64 	.word	0x000a0d64
    8a34:	69637361 	.word	0x69637361
    8a38:	61642069 	.word	0x61642069
    8a3c:	63206174 	.word	0x63206174
    8a40:	73726168 	.word	0x73726168
    8a44:	69616620 	.word	0x69616620
    8a48:	0064656c 	.word	0x0064656c
    8a4c:	61207525 	.word	0x61207525
    8a50:	69696373 	.word	0x69696373
    8a54:	61686320 	.word	0x61686320
    8a58:	72207372 	.word	0x72207372
    8a5c:	0d646165 	.word	0x0d646165
    8a60:	0000000a 	.word	0x0000000a
    8a64:	69637361 	.word	0x69637361
    8a68:	656c2069 	.word	0x656c2069
    8a6c:	6874676e 	.word	0x6874676e
    8a70:	74796220 	.word	0x74796220
    8a74:	203d2065 	.word	0x203d2065
    8a78:	0a0d7525 	.word	0x0a0d7525
    8a7c:	ffffff00 	.word	0xffffff00

00008a80 <vtable for i2c_t3>:
	...
    8a88:	00000b0d 00000b35 0000046d 00000b09     ....5...m.......
    8a98:	00000af9 00001879 000018a1              ....y.......

00008aa4 <i2c_div_num>:
    8aa4:	00000014 00000016 00000018 0000001a     ................
    8ab4:	0000001c 0000001e 00000020 00000022     ........ ..."...
    8ac4:	00000024 00000028 0000002c 00000030     $...(...,...0...
    8ad4:	00000034 00000038 0000003c 00000040     4...8...<...@...
    8ae4:	00000044 00000048 00000050 00000058     D...H...P...X...
    8af4:	00000060 00000068 00000070 00000080     `...h...p.......
    8b04:	00000088 00000090 000000a0 000000b0     ................
    8b14:	000000c0 000000e0 000000f0 00000100     ................
    8b24:	00000120 00000140 00000160 00000180      ...@...`.......
    8b34:	000001c0 000001e0 00000200 00000240     ............@...
    8b44:	00000280 00000300 00000380 000003c0     ................
    8b54:	00000400 00000480 00000500 00000600     ................
    8b64:	00000780 00000700 00000800 00000900     ................
    8b74:	00000a00 00000c00 00000f00              ............

00008b80 <i2c_div_ratio>:
    8b80:	03020100 06090504 0d0c070a 12450e43     ............C.E.
    8b90:	1514130f 171a1619 551d1c4f 231f221e     ........O..U.".#
    8ba0:	26952524 2c2b272a 2f322e2d 36353433     $%.&*'+,-.2/3456
    8bb0:	3c3b3a37 ff3f3e3d                       7:;<=>?.

00008bb8 <digital_pin_to_info_PGM>:
    8bb8:	43fe0840 4004a040 43fe0844 4004a044     @..C@..@D..CD..@
    8bc8:	43fe1800 4004c000 43fe0030 40049030     ...C...@0..C0..@
    8bd8:	43fe0034 40049034 43fe181c 4004c01c     4..C4..@...C...@
    8be8:	43fe1810 4004c010 43fe1808 4004c008     ...C...@...C...@
    8bf8:	43fe180c 4004c00c 43fe100c 4004b00c     ...C...@...C...@
    8c08:	43fe1010 4004b010 43fe1018 4004b018     ...C...@...C...@
    8c18:	43fe101c 4004b01c 43fe1014 4004b014     ...C...@...C...@
    8c28:	43fe1804 4004c004 43fe1000 4004b000     ...C...@...C...@
    8c38:	43fe0800 4004a000 43fe0804 4004a004     ...C...@...C...@
    8c48:	43fe080c 4004a00c 43fe0808 4004a008     ...C...@...C...@
    8c58:	43fe1814 4004c014 43fe1818 4004c018     ...C...@...C...@
    8c68:	43fe1004 4004b004 43fe1008 4004b008     ...C...@...C...@
    8c78:	43fe0014 40049014 43fe084c 4004a04c     ...C...@L..CL..@
    8c88:	43fe2004 4004d004 43fe1024 4004b024     . .C...@$..C$..@
    8c98:	43fe1020 4004b020 43fe1028 4004b028      ..C ..@(..C(..@
    8ca8:	43fe102c 4004b02c 43fe2000 4004d000     ,..C,..@. .C...@
    8cb8:	43fe0848 4004a048 43fe0010 40049010     H..CH..@...C...@
    8cc8:	ffff0a0d                                ....

00008ccc <vtable for usb_serial_class>:
	...
    8cd4:	00003371 00003365 0000335d 00003355     q3..e3..]3..U3..
    8ce4:	0000334d 00003345 0000333d 00003335     M3..E3..=3..53..

00008cf4 <usb_endpoint_config_table>:
    8cf4:	15191500                                ....

00008cf8 <usb_descriptor_list>:
    8cf8:	00000100 1fff8ddc 00000012 00000200     ................
    8d08:	1fff8e08 00000043 00000300 1fff8e64     ....C.......d...
    8d18:	00000000 04090301 1fff8df0 00000000     ................
    8d28:	04090302 1fff8e4c 00000000 04090303     ....L...........
    8d38:	1fff8e68 00000000 00000000 00000000     h...............
    8d48:	00000000                                ....

00008d4c <_global_impure_ptr>:
    8d4c:	1fff8e80 00000043 49534f50 00000058     ....C...POSIX...
    8d5c:	ffff002e                                ....

00008d60 <_ctype_>:
    8d60:	20202000 20202020 28282020 20282828     .         ((((( 
    8d70:	20202020 20202020 20202020 20202020                     
    8d80:	10108820 10101010 10101010 10101010      ...............
    8d90:	04040410 04040404 10040404 10101010     ................
    8da0:	41411010 41414141 01010101 01010101     ..AAAAAA........
    8db0:	01010101 01010101 01010101 10101010     ................
    8dc0:	42421010 42424242 02020202 02020202     ..BBBBBB........
    8dd0:	02020202 02020202 02020202 10101010     ................
    8de0:	00000020 00000000 00000000 00000000      ...............
	...
    8e60:	ffffff00 ffffffff                       ........

00008e68 <__mprec_tens>:
    8e68:	00000000 3ff00000 00000000 40240000     .......?......$@
    8e78:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    8e88:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    8e98:	00000000 412e8480 00000000 416312d0     .......A......cA
    8ea8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    8eb8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    8ec8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    8ed8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    8ee8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    8ef8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    8f08:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    8f18:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    8f28:	79d99db4 44ea7843                       ...yCx.D

00008f30 <p05.6085>:
    8f30:	00000005 00000019 0000007d ffffffff     ........}.......

00008f40 <__mprec_bigtens>:
    8f40:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    8f50:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    8f60:	7f73bf3c 75154fdd 69666e49 7974696e     <.s..O.uInfinity
    8f70:	00000000 004e614e ffff0030              ....NaN.0...

00008f7c <zeroes.7256>:
    8f7c:	30303030 30303030 30303030 30303030     0000000000000000
    8f8c:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
    8f9c:	33323130 37363534 42413938 46454443     0123456789ABCDEF
    8fac:	00000000 33323130 37363534 62613938     ....0123456789ab
    8fbc:	66656463 00000000 6c756e28 0000296c     cdef....(null)..

00008fcc <blanks.7255>:
    8fcc:	20202020 20202020 20202020 20202020                     

00008fdc <_init>:
    8fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8fde:	bf00      	nop
    8fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    8fe2:	bc08      	pop	{r3}
    8fe4:	469e      	mov	lr, r3
    8fe6:	4770      	bx	lr

00008fe8 <__init_array_start>:
    8fe8:	000052ed 	.word	0x000052ed

00008fec <__frame_dummy_init_array_entry>:
    8fec:	00000435 00000771 00001f85              5...q.......

Disassembly of section .fini:

00008ff8 <_fini>:
    8ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8ffa:	bf00      	nop

Disassembly of section .data:

1fff8720 <port_E_isr>:
#if defined(KINETISK)
PORT_ISR_FUNCTION_CLZ(A)
PORT_ISR_FUNCTION_CLZ(B)
PORT_ISR_FUNCTION_CLZ(C)
PORT_ISR_FUNCTION_CLZ(D)
PORT_ISR_FUNCTION_CLZ(E)
1fff8720:	b538      	push	{r3, r4, r5, lr}
1fff8722:	4b08      	ldr	r3, [pc, #32]	; (1fff8744 <port_E_isr+0x24>)
1fff8724:	681c      	ldr	r4, [r3, #0]
1fff8726:	601c      	str	r4, [r3, #0]
1fff8728:	b154      	cbz	r4, 1fff8740 <port_E_isr+0x20>
1fff872a:	4d07      	ldr	r5, [pc, #28]	; (1fff8748 <port_E_isr+0x28>)
1fff872c:	fa94 f3a4 	rbit	r3, r4
1fff8730:	fab3 f383 	clz	r3, r3
1fff8734:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff8738:	4798      	blx	r3
1fff873a:	1e63      	subs	r3, r4, #1
1fff873c:	401c      	ands	r4, r3
1fff873e:	d1f5      	bne.n	1fff872c <port_E_isr+0xc>
1fff8740:	bd38      	pop	{r3, r4, r5, pc}
1fff8742:	bf00      	nop
1fff8744:	4004d0a0 	.word	0x4004d0a0
1fff8748:	1fff8dbc 	.word	0x1fff8dbc

1fff874c <port_D_isr>:

#if defined(KINETISK)
PORT_ISR_FUNCTION_CLZ(A)
PORT_ISR_FUNCTION_CLZ(B)
PORT_ISR_FUNCTION_CLZ(C)
PORT_ISR_FUNCTION_CLZ(D)
1fff874c:	b538      	push	{r3, r4, r5, lr}
1fff874e:	4b08      	ldr	r3, [pc, #32]	; (1fff8770 <port_D_isr+0x24>)
1fff8750:	681c      	ldr	r4, [r3, #0]
1fff8752:	601c      	str	r4, [r3, #0]
1fff8754:	b154      	cbz	r4, 1fff876c <port_D_isr+0x20>
1fff8756:	4d07      	ldr	r5, [pc, #28]	; (1fff8774 <port_D_isr+0x28>)
1fff8758:	fa94 f3a4 	rbit	r3, r4
1fff875c:	fab3 f383 	clz	r3, r3
1fff8760:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff8764:	4798      	blx	r3
1fff8766:	1e63      	subs	r3, r4, #1
1fff8768:	401c      	ands	r4, r3
1fff876a:	d1f5      	bne.n	1fff8758 <port_D_isr+0xc>
1fff876c:	bd38      	pop	{r3, r4, r5, pc}
1fff876e:	bf00      	nop
1fff8770:	4004c0a0 	.word	0x4004c0a0
1fff8774:	1fff8d9c 	.word	0x1fff8d9c

1fff8778 <port_C_isr>:
// END PORT_ISR_FUNCTION_CLZ

#if defined(KINETISK)
PORT_ISR_FUNCTION_CLZ(A)
PORT_ISR_FUNCTION_CLZ(B)
PORT_ISR_FUNCTION_CLZ(C)
1fff8778:	b538      	push	{r3, r4, r5, lr}
1fff877a:	4b08      	ldr	r3, [pc, #32]	; (1fff879c <port_C_isr+0x24>)
1fff877c:	681c      	ldr	r4, [r3, #0]
1fff877e:	601c      	str	r4, [r3, #0]
1fff8780:	b154      	cbz	r4, 1fff8798 <port_C_isr+0x20>
1fff8782:	4d07      	ldr	r5, [pc, #28]	; (1fff87a0 <port_C_isr+0x28>)
1fff8784:	fa94 f3a4 	rbit	r3, r4
1fff8788:	fab3 f383 	clz	r3, r3
1fff878c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff8790:	4798      	blx	r3
1fff8792:	1e63      	subs	r3, r4, #1
1fff8794:	401c      	ands	r4, r3
1fff8796:	d1f5      	bne.n	1fff8784 <port_C_isr+0xc>
1fff8798:	bd38      	pop	{r3, r4, r5, pc}
1fff879a:	bf00      	nop
1fff879c:	4004b0a0 	.word	0x4004b0a0
1fff87a0:	1fff8d6c 	.word	0x1fff8d6c

1fff87a4 <port_B_isr>:
	}
// END PORT_ISR_FUNCTION_CLZ

#if defined(KINETISK)
PORT_ISR_FUNCTION_CLZ(A)
PORT_ISR_FUNCTION_CLZ(B)
1fff87a4:	b538      	push	{r3, r4, r5, lr}
1fff87a6:	4b08      	ldr	r3, [pc, #32]	; (1fff87c8 <port_B_isr+0x24>)
1fff87a8:	681c      	ldr	r4, [r3, #0]
1fff87aa:	601c      	str	r4, [r3, #0]
1fff87ac:	b154      	cbz	r4, 1fff87c4 <port_B_isr+0x20>
1fff87ae:	4d07      	ldr	r5, [pc, #28]	; (1fff87cc <port_B_isr+0x28>)
1fff87b0:	fa94 f3a4 	rbit	r3, r4
1fff87b4:	fab3 f383 	clz	r3, r3
1fff87b8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff87bc:	4798      	blx	r3
1fff87be:	1e63      	subs	r3, r4, #1
1fff87c0:	401c      	ands	r4, r3
1fff87c2:	d1f5      	bne.n	1fff87b0 <port_B_isr+0xc>
1fff87c4:	bd38      	pop	{r3, r4, r5, pc}
1fff87c6:	bf00      	nop
1fff87c8:	4004a0a0 	.word	0x4004a0a0
1fff87cc:	1fff8d1c 	.word	0x1fff8d1c

1fff87d0 <port_A_isr>:
		}                                                     \
	}
// END PORT_ISR_FUNCTION_CLZ

#if defined(KINETISK)
PORT_ISR_FUNCTION_CLZ(A)
1fff87d0:	b538      	push	{r3, r4, r5, lr}
1fff87d2:	4b08      	ldr	r3, [pc, #32]	; (1fff87f4 <port_A_isr+0x24>)
1fff87d4:	681c      	ldr	r4, [r3, #0]
1fff87d6:	601c      	str	r4, [r3, #0]
1fff87d8:	b154      	cbz	r4, 1fff87f0 <port_A_isr+0x20>
1fff87da:	4d07      	ldr	r5, [pc, #28]	; (1fff87f8 <port_A_isr+0x28>)
1fff87dc:	fa94 f3a4 	rbit	r3, r4
1fff87e0:	fab3 f383 	clz	r3, r3
1fff87e4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff87e8:	4798      	blx	r3
1fff87ea:	1e63      	subs	r3, r4, #1
1fff87ec:	401c      	ands	r4, r3
1fff87ee:	d1f5      	bne.n	1fff87dc <port_A_isr+0xc>
1fff87f0:	bd38      	pop	{r3, r4, r5, pc}
1fff87f2:	bf00      	nop
1fff87f4:	400490a0 	.word	0x400490a0
1fff87f8:	1fff8ce4 	.word	0x1fff8ce4

1fff87fc <__dso_handle>:
1fff87fc:	00000000                                ....

1fff8800 <i2c_t3::i2cData>:
1fff8800:	40066000 40066001 40066002 40066003     .`.@.`.@.`.@.`.@
1fff8810:	40066004 40066005 40066006 40066007     .`.@.`.@.`.@.`.@
1fff8820:	40066008 40066009 4006600a 4006600b     .`.@.`.@.`.@.`.@
	...
1fff8a48:	00010001 000186a0 00000001 00000000     ................
	...
1fff8a70:	40067000 40067001 40067002 40067003     .p.@.p.@.p.@.p.@
1fff8a80:	40067004 40067005 40067006 40067007     .p.@.p.@.p.@.p.@
1fff8a90:	40067008 40067009 4006700a 4006700b     .p.@.p.@.p.@.p.@
	...
1fff8cb8:	00020001 000186a0 00000001 00000000     ................
	...

1fff8ce0 <__brkval>:
1fff8ce0:	1fff9bf0                                ....

1fff8ce4 <isr_table_portA>:
1fff8ce4:	0000208d 0000208d 0000208d 0000208d     . ... ... ... ..
1fff8cf4:	0000208d 0000208d 0000208d 0000208d     . ... ... ... ..
1fff8d04:	0000208d 0000208d 0000208d 0000208d     . ... ... ... ..
1fff8d14:	0000208d 0000208d                       . ... ..

1fff8d1c <isr_table_portB>:
1fff8d1c:	0000208d 0000208d 0000208d 0000208d     . ... ... ... ..
1fff8d2c:	0000208d 0000208d 0000208d 0000208d     . ... ... ... ..
1fff8d3c:	0000208d 0000208d 0000208d 0000208d     . ... ... ... ..
1fff8d4c:	0000208d 0000208d 0000208d 0000208d     . ... ... ... ..
1fff8d5c:	0000208d 0000208d 0000208d 0000208d     . ... ... ... ..

1fff8d6c <isr_table_portC>:
1fff8d6c:	0000208d 0000208d 0000208d 0000208d     . ... ... ... ..
1fff8d7c:	0000208d 0000208d 0000208d 0000208d     . ... ... ... ..
1fff8d8c:	0000208d 0000208d 0000208d 0000208d     . ... ... ... ..

1fff8d9c <isr_table_portD>:
1fff8d9c:	0000208d 0000208d 0000208d 0000208d     . ... ... ... ..
1fff8dac:	0000208d 0000208d 0000208d 0000208d     . ... ... ... ..

1fff8dbc <isr_table_portE>:
1fff8dbc:	0000208d 0000208d                       . ... ..

1fff8dc4 <usb_buffer_available>:
1fff8dc4:	ffffffff                                ....

1fff8dc8 <Serial>:
1fff8dc8:	00008cd4 00000000 000003e8 00000000     ................

1fff8dd8 <analog_config_bits>:
1fff8dd8:	0000040a                                         .

1fff8dd9 <analog_num_average>:
1fff8dd9:	12000004                                         ...

1fff8ddc <device_descriptor>:
1fff8ddc:	01010112 40000002 048316c0 02010200     .......@........
1fff8dec:	00000103                                ....

1fff8df0 <usb_string_manufacturer_name_default>:
1fff8df0:	00540318 00650065 0073006e 00640079     ..T.e.e.n.s.y.d.
1fff8e00:	00690075 006f006e                       u.i.n.o.

1fff8e08 <config_descriptor>:
1fff8e08:	00430209 c0000102 00040932 02020100     ..C.....2.......
1fff8e18:	24050001 05011000 01010124 06022404     ...$....$....$..
1fff8e28:	00062405 82050701 40001003 00010409     .$.........@....
1fff8e38:	00000a02 03050700 00004002 02840507     .........@......
1fff8e48:	00000040                                @...

1fff8e4c <usb_string_product_name_default>:
1fff8e4c:	00550316 00420053 00530020 00720065     ..U.S.B. .S.e.r.
1fff8e5c:	00610069 0000006c                       i.a.l...

1fff8e64 <string0>:
1fff8e64:	04090304                                ....

1fff8e68 <usb_string_serial_number_default>:
1fff8e68:	0000030c 00000000 00000000 00000000     ................
	...

1fff8e80 <impure_data>:
1fff8e80:	00000000 1fff916c 1fff91d4 1fff923c     ....l.......<...
	...
1fff8f28:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
1fff8f38:	0005deec 0000000b 00000000 00000000     ................
	...

1fff92a8 <_impure_ptr>:
1fff92a8:	1fff8e80                                ....

1fff92ac <__global_locale>:
1fff92ac:	00000043 00000000 00000000 00000000     C...............
	...
1fff92cc:	00000043 00000000 00000000 00000000     C...............
	...
1fff92ec:	00000043 00000000 00000000 00000000     C...............
	...
1fff930c:	00000043 00000000 00000000 00000000     C...............
	...
1fff932c:	00000043 00000000 00000000 00000000     C...............
	...
1fff934c:	00000043 00000000 00000000 00000000     C...............
	...
1fff936c:	00000043 00000000 00000000 00000000     C...............
	...
1fff938c:	00005201 00004afd 00000000 00008d60     .R...J......`...
1fff939c:	00008d5c 00008944 00008944 00008944     \...D...D...D...
1fff93ac:	00008944 00008944 00008944 00008944     D...D...D...D...
1fff93bc:	00008944 00008944 ffffffff ffffffff     D...D...........
1fff93cc:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
1fff93f4:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

1fff9418 <__malloc_av_>:
	...
1fff9420:	1fff9418 1fff9418 1fff9420 1fff9420     ........ ... ...
1fff9430:	1fff9428 1fff9428 1fff9430 1fff9430     (...(...0...0...
1fff9440:	1fff9438 1fff9438 1fff9440 1fff9440     8...8...@...@...
1fff9450:	1fff9448 1fff9448 1fff9450 1fff9450     H...H...P...P...
1fff9460:	1fff9458 1fff9458 1fff9460 1fff9460     X...X...`...`...
1fff9470:	1fff9468 1fff9468 1fff9470 1fff9470     h...h...p...p...
1fff9480:	1fff9478 1fff9478 1fff9480 1fff9480     x...x...........
1fff9490:	1fff9488 1fff9488 1fff9490 1fff9490     ................
1fff94a0:	1fff9498 1fff9498 1fff94a0 1fff94a0     ................
1fff94b0:	1fff94a8 1fff94a8 1fff94b0 1fff94b0     ................
1fff94c0:	1fff94b8 1fff94b8 1fff94c0 1fff94c0     ................
1fff94d0:	1fff94c8 1fff94c8 1fff94d0 1fff94d0     ................
1fff94e0:	1fff94d8 1fff94d8 1fff94e0 1fff94e0     ................
1fff94f0:	1fff94e8 1fff94e8 1fff94f0 1fff94f0     ................
1fff9500:	1fff94f8 1fff94f8 1fff9500 1fff9500     ................
1fff9510:	1fff9508 1fff9508 1fff9510 1fff9510     ................
1fff9520:	1fff9518 1fff9518 1fff9520 1fff9520     ........ ... ...
1fff9530:	1fff9528 1fff9528 1fff9530 1fff9530     (...(...0...0...
1fff9540:	1fff9538 1fff9538 1fff9540 1fff9540     8...8...@...@...
1fff9550:	1fff9548 1fff9548 1fff9550 1fff9550     H...H...P...P...
1fff9560:	1fff9558 1fff9558 1fff9560 1fff9560     X...X...`...`...
1fff9570:	1fff9568 1fff9568 1fff9570 1fff9570     h...h...p...p...
1fff9580:	1fff9578 1fff9578 1fff9580 1fff9580     x...x...........
1fff9590:	1fff9588 1fff9588 1fff9590 1fff9590     ................
1fff95a0:	1fff9598 1fff9598 1fff95a0 1fff95a0     ................
1fff95b0:	1fff95a8 1fff95a8 1fff95b0 1fff95b0     ................
1fff95c0:	1fff95b8 1fff95b8 1fff95c0 1fff95c0     ................
1fff95d0:	1fff95c8 1fff95c8 1fff95d0 1fff95d0     ................
1fff95e0:	1fff95d8 1fff95d8 1fff95e0 1fff95e0     ................
1fff95f0:	1fff95e8 1fff95e8 1fff95f0 1fff95f0     ................
1fff9600:	1fff95f8 1fff95f8 1fff9600 1fff9600     ................
1fff9610:	1fff9608 1fff9608 1fff9610 1fff9610     ................
1fff9620:	1fff9618 1fff9618 1fff9620 1fff9620     ........ ... ...
1fff9630:	1fff9628 1fff9628 1fff9630 1fff9630     (...(...0...0...
1fff9640:	1fff9638 1fff9638 1fff9640 1fff9640     8...8...@...@...
1fff9650:	1fff9648 1fff9648 1fff9650 1fff9650     H...H...P...P...
1fff9660:	1fff9658 1fff9658 1fff9660 1fff9660     X...X...`...`...
1fff9670:	1fff9668 1fff9668 1fff9670 1fff9670     h...h...p...p...
1fff9680:	1fff9678 1fff9678 1fff9680 1fff9680     x...x...........
1fff9690:	1fff9688 1fff9688 1fff9690 1fff9690     ................
1fff96a0:	1fff9698 1fff9698 1fff96a0 1fff96a0     ................
1fff96b0:	1fff96a8 1fff96a8 1fff96b0 1fff96b0     ................
1fff96c0:	1fff96b8 1fff96b8 1fff96c0 1fff96c0     ................
1fff96d0:	1fff96c8 1fff96c8 1fff96d0 1fff96d0     ................
1fff96e0:	1fff96d8 1fff96d8 1fff96e0 1fff96e0     ................
1fff96f0:	1fff96e8 1fff96e8 1fff96f0 1fff96f0     ................
1fff9700:	1fff96f8 1fff96f8 1fff9700 1fff9700     ................
1fff9710:	1fff9708 1fff9708 1fff9710 1fff9710     ................
1fff9720:	1fff9718 1fff9718 1fff9720 1fff9720     ........ ... ...
1fff9730:	1fff9728 1fff9728 1fff9730 1fff9730     (...(...0...0...
1fff9740:	1fff9738 1fff9738 1fff9740 1fff9740     8...8...@...@...
1fff9750:	1fff9748 1fff9748 1fff9750 1fff9750     H...H...P...P...
1fff9760:	1fff9758 1fff9758 1fff9760 1fff9760     X...X...`...`...
1fff9770:	1fff9768 1fff9768 1fff9770 1fff9770     h...h...p...p...
1fff9780:	1fff9778 1fff9778 1fff9780 1fff9780     x...x...........
1fff9790:	1fff9788 1fff9788 1fff9790 1fff9790     ................
1fff97a0:	1fff9798 1fff9798 1fff97a0 1fff97a0     ................
1fff97b0:	1fff97a8 1fff97a8 1fff97b0 1fff97b0     ................
1fff97c0:	1fff97b8 1fff97b8 1fff97c0 1fff97c0     ................
1fff97d0:	1fff97c8 1fff97c8 1fff97d0 1fff97d0     ................
1fff97e0:	1fff97d8 1fff97d8 1fff97e0 1fff97e0     ................
1fff97f0:	1fff97e8 1fff97e8 1fff97f0 1fff97f0     ................
1fff9800:	1fff97f8 1fff97f8 1fff9800 1fff9800     ................
1fff9810:	1fff9808 1fff9808 1fff9810 1fff9810     ................

1fff9820 <__malloc_trim_threshold>:
1fff9820:	00020000                                ....

1fff9824 <__malloc_sbrk_base>:
1fff9824:	ffffffff                                ....
